{"pageProps":{"post":{"publish":true,"enable_form":false,"tags":[{"_id":"5ed467d0165e5f006fa403fd","name":"D39","createdAt":"2020-06-01T02:28:32.042Z","updatedAt":"2020-06-01T02:28:32.042Z","__v":0,"id":"5ed467d0165e5f006fa403fd"},{"_id":"5ed467b5165e5f006fa403fc","name":"vulnerability research ","createdAt":"2020-06-01T02:28:05.155Z","updatedAt":"2020-06-01T02:28:05.155Z","__v":0,"id":"5ed467b5165e5f006fa403fc"}],"relative_posts":[],"_id":"5ee07e4bbf58af004a154155","post_url":"blackhat-s-talk-breaking-samsung-s-root-of-trust-exploiting-samsung-secure-boot","post_name":"BlackHat's Talk: Breaking Samsung's Root of Trust - Exploiting Samsung Secure Boot","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/v1590731286/20200608_cover_23a0b23713.jpg","contents":[{"locale":"en","_id":"5ee07e4bbf58af004a154156","title":"BlackHat's Talk: Breaking Samsung's Root of Trust - Exploiting Samsung Secure Boot","context":"### D39\n\nD39 focuses on vulnerability research and has identified several critical security flaws, including technical exploitation of mobile, IoT devices, and Linux and Windows operating systems. We have reported dozens of vulnerabilities and dedicate to Samsung Vulnerabilities and Exposures (SVE) and Common Vulnerabilities and Exposures (CVE).\n\nBefore diving into the main subject this month, we are glad to announce that TeamT5 is again accepted at Black Hat USA, and our vulnerability research team, D39, will talk at the Black Hat Briefings in the upcoming August. We are honored to share our research findings with researchers and security experts all over the world and expect more recognition of Taiwan's vulnerability researchers in the world.\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769445/D39_6-1_6807f98c9b.png)\n[Black Hat Session](https://www.blackhat.com/us-20/briefings/schedule/index.html#breaking-samsungs-root-of-trust-exploiting-samsung-s-secure-boot-20290)\n\nThis article will cover a part of our talk at Black Hat USA in August.\n\n### Introduction\n\nWe have found several vulnerabilities in Samsung Secure boot, which can break through Samsung Knox protections. We can even retrieve users' sensitive data from a locked device. The affected Samsung mobiles include Galaxy S8, S9, and S10. Patches to these vulnerabilities have been provided by Samsung.\n\nOne of these vulnerabilities allows attackers to execute arbitrary code in Galaxy S8 secure bootloader to access the device. In this article, we will elaborate how we exploit these vulnerabilities to bypass S8 secure bootloader through the USB device and obtain arbitrary code execution in early boot stage.\n\nNote: Another security research team found this vulnerability at the same time and report it to Samsung.\nID: SVE-2019-15230 (details below).\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769435/SVE-2019_3bc5eea84d.png)\n\n### KNOX\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769436/D39_6-2_ee457f68cd.png)\n[Image courtesy](https://docs.samsungknox.com/whitepapers/knox-platform/hardware-backed-root-of-trust.htm)\n\nAs the market leader of smartphone, Samsung conducts a series of protection on Android, known as the Knox Platform, to ensure the security of its devices. During the booting process, Samsung uses S-boot (Secure Boot) to make sure it can only boot a stocked image. If the device tries to boot a custom image, it will trip (turned from 0X0 to 0X1) a one-time programmable bit e-fuse (a.k.a Knox bit). Once a trustzone app (trustlet) detects the Knox bit tripped, it will delete the encryption key of sensitive data to prevent unauthorized data from accessing the locked device.\n\n### Vulnerability\n\nSmartphones with Samsung Exynos processor use a exclusive secure bootloader named S-boot. S-boot has ODIN mode which allows users to upgrade the firmware manually. Due to the insufficiency in its code, the flash command (opcode: 0x66) in ODIN mode is not able to properly check the flash image size, which leads to buffer overflow.\n\nThe flash command in ODIN mode uses a temporary buffer to store the image. In Galaxy S8, the buffer is located at 0xC0000000, right in front of sboot code segment (0xC9000000). Although the system will check to ensure that the size being no larger than 0x1e0000, it uses signed comparison to check the size of the image; thus provide us some space to get around. We therefore provide a size larger than 0x80000000, making buffer overflowed and, in the end, the following segments such as code, stack, and heap will be overwritten.\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769435/D39_6-3_8b038e080e.png)\n\n### The Exploit\n\n#### Code Execution\n\nAlthough we can overflow the code segment of S-Boot, we still cannot hijack the execution flow. Since USB receivers use physical memory to hold the data it received directly, we cannot affect instruction cache unless the cache line has been invalidated.\n\nFortunately, the heap segment is not cached due to MMU flag. There are some pointers stored in the heap segment, which can be accessed during the USB process. If we overwrite these pointers with null bytes, the processor will trigger an exception and trap into the exception handler while accessing to NULL pointers. Since the handler has never been executed, it is not cached in the instruction cache. Therefore we can also overwrite the exception handler simultaneously and hijack it directly to our shellcode.\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769437/D39_6-4_58c7cc6a95.png)\n\n#### Booting Custom Kernel\n\nSince all the run-time data has been overwritten -- including stack, heap and global variables -- the sboot fail to perform further booting operation. These kinds of data are difficult to recover, so we must re-execute the booting process.\n\nUnder normal condition, S-boot calls several functions in a particular function table which is located at 0xC90C7350. To re-execute s-boot, these functions have to be invoked sequentially again. They would initialize the memory of heap and stack, set the global variables, and boot the kernel at the end. However, these functions also involve some SMC calls which cannot be executed twice. Since we only compromised EL1 (Exception Level 1), the trustzone in EL3 (Exception Level 3) cannot be reverted. As a result, we have to overwrite these SMC calls with NOP instruction while overflowing the code segment to ignore those SMC (System Management Controller) calls.\n\nAfter all the run-time data has been reset, we replace the original kernel with our custom one. Then we execute one last function to boot our custom kernel and get the **root privilege without blowing KNOX bit**.\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769436/D39_6-5_2f6b6f9ccd.png)\n\n### Timeline\n\n2019-10-02 Report Vulnerability\n2019-10-08 Informed Vulnerability duplicated and release patch note\n\n### Appendix: Potential Exploit Path on Galaxy S10\n\nAccording to our analysis, this vulnerability affects Galaxy S9, Galaxy S10 and Galaxy Note 10 as well. Among them we find that exploitation can still be trigger at different address. For instance, even the temporary buffer located at different addresss, like 0x890000000 in Galaxy S10, there are still chances to exploit it. To explain the complete exploitation flow, we choose the firmware, G970FXXU1ASD5, as an example.\n\nIn Galaxy S9 and later version, there is another feature added to the secure boot - compressed_download. It uses another buffer to store the flash image. However if compressed_download failed during the initialization, it will fallback to normal download, and use the buffer (0xC0000000) to store the flash image.\n\n![](https://res.cloudinary.com/dvgomg5gh/image/upload/v1591769435/D39_6-6_724f86aa51.png)\n\nTo make S-boot fallback to normal download, we have to make the function `cd_v3_smp_register` fail. After reversing, we noticed that the function `cd_v3_smp_register` may return failed if there is no available core(`booted_cores` > 3) can be booted. Coincidentally, there is a test command - \"smp_boot_test\" in the UART (Universal Asynchronous Receiver/Transmitter) console. The command smp_boot_test will boot a core and add the count of the booted_cores. Although `smp_boot_test` shutdown the booted up core immediately, it didn't restore the count. Therefore, the compressed_download_init may failed if the command `smp_boot_test` has been invoked more than twice before entering the download mode.\n\nIf we have the UART debug cable to get the UART console, we can call the command`smp_boot_test` 3 times and enter the download mode via the command `usb`. The `compressed_download_init` would fail, then the temporary buffer fallback to 0xC0000000. Therefore the arbitrary code execution on S10's bootloader can be achieved as the one in Galaxy S8.\n\nWe managed to build our own TypeC debug cable at first. However, after trying every kinds of Pull-up/down resistor value, TypeC accessory mode, TypeC VDM, we cannot yet figure out a cable for RID_523K detection. Still, in the end, we applied other approach that enable us to attain **Galaxy S10 Secure Bootloader's permission of arbitrary code** without having debug cable.\n\nWe will have a thorough display on Black Hat. Stay tuned!\n\nFor the latest vulnerability research from D39, please follow:\n\nTeamT5 official website: [https://teamt5.org/](https://teamt5.org/ \"https://teamt5.org/\")\n\nTwitter: [https://twitter.com/TeamT5_Official](https://twitter.com/TeamT5_Official \"https://twitter.com/TeamT5_Official\")","createdAt":"2020-06-10T06:31:39.066Z","updatedAt":"2020-07-02T09:16:52.294Z","__v":0,"id":"5ee07e4bbf58af004a154156"}],"createdAt":"2020-06-10T06:31:39.059Z","updatedAt":"2021-01-13T02:33:44.215Z","__v":1,"topic":{"category":"blogs","_id":"5ecaa004a792d70040a0d8b0","color":"#64cda2","name":"Technical Analysis","createdAt":"2020-05-24T16:25:40.461Z","updatedAt":"2020-06-07T22:08:04.525Z","__v":0,"contents":[{"locale":"en","_id":"5edd6544bf58af004a15410d","text":"Technical Analysis","createdAt":"2020-06-07T22:08:04.247Z","updatedAt":"2020-06-07T22:08:04.247Z","__v":0,"id":"5edd6544bf58af004a15410d"},{"locale":"tw","_id":"5edd6544bf58af004a15410e","text":"技術分析","createdAt":"2020-06-07T22:08:04.247Z","updatedAt":"2020-06-07T22:08:04.247Z","__v":0,"id":"5edd6544bf58af004a15410e"},{"locale":"jp","_id":"5edd6544bf58af004a15410f","text":"技術分析","createdAt":"2020-06-07T22:08:04.248Z","updatedAt":"2020-06-07T22:08:04.248Z","__v":0,"id":"5edd6544bf58af004a15410f"}],"id":"5ecaa004a792d70040a0d8b0"},"publish_date":"2020-06-10T03:00:00.000Z","author":{"confirmed":true,"blocked":false,"_id":"5eeadf2c163518003f86d911","username":"D39","email":"d39@example.com","provider":"local","createdAt":"2020-06-18T03:27:40.091Z","updatedAt":"2020-06-19T03:40:27.965Z","__v":0,"role":"5e467d0375f9d7007998aebf","id":"5eeadf2c163518003f86d911"},"been_relative_posts":[{"publish":true,"enable_form":false,"tags":["609a3fe42107530037594af9","5ed467b5165e5f006fa403fc"],"relative_posts":["5ee07e4bbf58af004a154155","609a38e42107530037594ae8"],"_id":"5f2b78f2163518003f86da49","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1596099107/20200525_e334c6b0ed.png","post_name":"Black Hat’s Talk: D39 Shares Their Research on Breaking Samsung Secure Boot at Black Hat USA 2020","post_url":"black-hat-s-talk-d39-shares-their-research-on-breaking-samsung-secure-boot-at-black-hat-usa-2020","publish_date":"2020-08-06T08:00:00.000Z","contents":[{"locale":"en","_id":"5f2b78f2163518003f86da4a","title":"Black Hat’s Talk: D39 Shares Their Research on Breaking Samsung Secure Boot at Black Hat USA 2020","context":"*Image courtesy of Black Hat from https://www.blackhat.com/us-20/\n\nWe were glad to announce that TeamT5 was again accepted at Black Hat USA. And this time, our vulnerability research team, D39, presented their latest exploit research on Samsung S10 secure bootloader at the Black Hat Briefings. We were very honored to share our research findings with researchers and security experts all over the world in this annual flagship conference.\n\n![BHUSA_cover](https://res.cloudinary.com/dvgomg5gh/image/upload/v1596699298/BHUSA_cover_48fcf0b266.jpg)\n_TeamT5's vulnerability researcher presented on Black Hat USA 2020._\n\nD39 has been focusing on vulnerability research and has identified several critical security flaws. We have found several vulnerabilities in Samsung Secure boot, which can break through Samsung Knox protections. In Black Hat USA 2020, we elaborated how did we discover and exploit the vulnerabilities in detail, demonstrated the exploit on a Samsung Galaxy S10 smartphone, and had a discussion on the possible impact of these vulnerabilities.\n\n![Disclosure timeline](https://res.cloudinary.com/dvgomg5gh/image/upload/v1596699297/Disclosure_timeline_422975e76a.jpg)\n_Timeline of the vulnerability disclosure, patch release and assignment of SVE IDs._\n\nBlack Hat is the world’s leading information security event, and remains the best and biggest event of its kind. It provides attendees with cutting-edge security research, development and trends, and has the ability to define tomorrow’s information security landscape. Black Hat USA 2020 went fully virtual this year, held over the same dates from 1 to 6 August, in light of the coronavirus pandemic.","createdAt":"2020-08-06T03:28:50.998Z","updatedAt":"2020-08-06T07:56:30.077Z","__v":0,"id":"5f2b78f2163518003f86da4a"}],"createdAt":"2020-08-06T03:28:50.953Z","updatedAt":"2021-05-13T03:37:18.933Z","__v":1,"author":"5eec3483163518003f86d943","topic":"5ecaa036a792d70040a0d8b4","id":"5f2b78f2163518003f86da49"},{"publish":true,"enable_form":false,"tags":["5ffd1086c56e80003f985958","5ffd1093c56e80003f985959","5ffd109dc56e80003f98595a","5ed467b5165e5f006fa403fc"],"relative_posts":["5ee07e4bbf58af004a154155"],"_id":"5ffd4148c56e80003f98595c","post_name":"年度最慘漏洞！深入探究 Oracle WebLogic CVE-2020-14882","post_url":"most-epic-fail-vulnerability-research-on-oracle-weblogic-cve-2020-14882","publish_date":"2021-01-13T02:00:00.000Z","contents":[{"locale":"tw","_id":"5ffd4148c56e80003f98595d","title":"年度最慘漏洞！深入探究 Oracle WebLogic CVE-2020-14882","context":"圖片來源：[Pixabay](https://pixabay.com/photos/toys-pony-my-little-pony-horse-4968006/)\n\n## 緣起\n\nWebLogic 是美商 Oracle 的主要產品之一，係商業市場上主要的 Java（J2EE）應用伺服器軟體（application server）之一。於 2020 年爆出高風險漏洞 CVE-2020-14882 與 CVE-2020-14883，其中，CVE-2020-14882 的 CVSS 3.1 評分更高達 9.8，屬於嚴重（Critical）等級之漏洞。\n\n攻擊者可利用漏洞，組合惡意指令，使未經授權的請求繞過 WebLogic 後台登入等限制，最終可以遠端執行代碼攻擊（Remote Code Execution），因此攻擊者可輕易的利用此漏洞發起攻擊。\n\n<br>\n\n## 技術分析\n\n我們從下圖的漏洞 POC 範例開始看起。\n\n![blog_2101-1.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1610433541/blog_2101_1_7add5099fd.png)\n_圖一、POC 攻擊範例_\n\n<br>\n\n首先 WebLogic 會對 url 進行檢查，當攻擊者試圖存取 console 路徑底下的檔案資源時（階段 A），會將其 url 與 WebLogic 設定檔（web.xml）內的網頁資源路徑進行比對，若該 url 屬於任一資源路徑，將不須驗證即可進行資源存取（階段 B）。其 web.xml 的檔案路徑為 wlserver/server/lib/consoleapp/webapp/WEB-INF/web.xml，如下圖所示。\n\n![blog_2101-2.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1610433541/blog_2101_2_b9ab148ed5.png)\n_圖二、web.xml 內容_\n\n<br>\n\n再來，```http://127.0.0.1:7001/console/images/%252E%252E%252Fconsole.portal``` 會先進行一次 url decode，將 %25 轉成 %，所以該 url 會變成 ```http://127.0.0.1:7001/console/images/%2E%2E%2Fconsole.portal```（階段 C）。\n\n但是在 UIServletInternal.getTree 函式中，WebLogic 又會做再一次 url decode，將 %2E%2E%2F 轉為 ../，於是 url 變成```http://127.0.0.1:7001/console/images/../console.portal```，且後續的操作中 WebLogic 都沒有對路徑進行權限檢查，所以產生了跨目錄穿越攻擊（Directory Traversal）的漏洞。\n\nWebLogic Server 處理後台管理（console）的請求時，會呼叫 BreadcrumbBacking().init 函式進行處理（階段 D）。當 url 中含有 handle 參數時，會將 handle 拆解成 class 和 argument。以 POC 為例，class 就會是 ```com.tangosol.coherence.mvel2.sh.ShellSession()```（階段 E），argument 則是 ```\"java.lang.Runtime.getRuntime().exec(%27whoami%27);\"```（階段 F）。\n\n後續，會將 argument 傳給 class 的 constructor ，而 ShellSession 函式會再把 argument 傳給 MVELInterpretedRuntime 函式中，最後透過反射執行 argument 中內含的惡意指令，也就是 POC 範例中的 whoami。\n\n<br>\n\n## 修補插曲\n\n但僅憑跨目錄穿越攻擊、Unauthorized RCE 等問題，何以稱之為「年度最慘漏洞（Most Epic Fail）」？\n\nOracle 於 2020 年 10 月釋出修補程式，但細究其修補的方法，發現 Oracle 利用黑名單的方式過濾 url 參數，如下圖所示。\n\n![blog_2101-3.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1610433542/blog_2101_3_67ba9cf2c5.png)\n_圖三、Oracle 透過黑名單修補 CVE-2020-14882_\n\n<br>\n\n#### 利用黑名單方式過濾，會有什麼問題呢？\n\n只要利用不在黑名單內的 %252e%252e，就可以成功繞過（Bypass）已修補程式中的 url 檢查。\n\n眾多安全研究人員於短時間內發現該問題並通報 Oracle，該漏洞也被編號為 CVE-2020-14750，如下圖所示。此錯誤的漏洞修補方式，也使得 CVE-2020-14882 成功入圍 2020 年 [Pwnie Award Most Epic Fail](https://pwnies.com/nominations/active/most-epic-fail/oracle-weblogic-server-co-oracle/) 項目。\n\n![blog_2101-4.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1610433541/blog_2101_4_677f062e72.png)\n_圖四、眾多研究員回報 CVE-2020-14750_\n\n<br>\n\n漏洞修補是一門深奧的學問，以 CVE-2020-14882 為例，其成因包含對檔案路徑存取控管不確實、對路徑做兩次的 url decode 及後台管理程式提供代碼執行。但 Oracle 一開始只修補兩次的 url decode 問題，更不用說其修補的方式為黑名單限制。因漏洞修補不確實而產生了更多的漏洞，所以不可不慎。\n\n<br>\n\n## 影響層面\n\n攻擊者利用此漏洞互相搭配，不須登入即可遠端指令執行，進而產生憑證竊取（Credential Dump）、橫向移動（Lateral Movement）等攻擊行為。\n\n- 受影響產品：WebLogic Server\n- 受影響版本：10.3.6.0.0、12.1.3.0.0、12.2.1.3.0、12.2.1.4.0、14.1.1.0.0\n\n<br>\n\n## 防護建議\n\n- 更新 Oracle 官方最新修正 [patch](https://www.oracle.com/security-alerts/cpuoct2020.html)。\n- 惡意 payload 檢查，例如檢查 console.portal 和 payload 是否帶有 ```handle=...``` 參數，或是直接關閉 console.portal 和 payload 的 handle 功能。\n- 匯入以下 Yara 偵測規則，確認是否存在利用該漏洞的惡意程式。\n\n```\nrule CVE_2020_14882 {\n    meta:\n        author = \"TeamT5\"\n        description = \"CVE-2020-14882 exploit\"\n    strings:\n        $resource1 = \"console/bea-helpsets/\"\n        $resource2 = \"console/framework/skins/wlsconsole/images/\"\n        $resource3 = \"console/framework/skins/wlsconsole/css/\"\n        $resource4 = \"console/framework/skins/wlsconsole/js/\"\n        $resource5 = \"console/framework/skeletons/wlsconsole/css/\"\n        $resource6 = \"console/framework/skeletons/wlsconsole/js/\"\n        $resource7 = \"console/css/\"\n        $resource8 = \"console/common/\"\n        $resource9 = \"console/images/\"\n\n        $console1 = \"console.portal\"\n        $console2 = \"consolejndi.portal\"\n        \n        $handle = \"handle=\"\n\n    condition:\n        any of ($resource*) and 1 of ($console*) and $handle\n}\n```\n\n![blog_2101-5.png](https://res.cloudinary.com/dvgomg5gh/image/upload/v1610433541/blog_2101_5_8a00e312e3.png)\n_圖五、透過 Yara 偵測規則可有效偵測 CVE-2020-14882 exploit_\n\n<br>\n","__v":0,"id":"5ffd4148c56e80003f98595d"}],"createdAt":"2021-01-12T06:27:20.923Z","updatedAt":"2021-01-13T02:33:44.217Z","__v":1,"author":"5ff54e5ec56e80003f985956","topic":"5ecaa004a792d70040a0d8b0","banner_img_url":"https://res.cloudinary.com/dvgomg5gh/image/upload/f_auto/v1610441497/toys_4968006_1920_454e3e5929.jpg","id":"5ffd4148c56e80003f98595c"}],"id":"5ee07e4bbf58af004a154155"}},"__N_SSG":true}